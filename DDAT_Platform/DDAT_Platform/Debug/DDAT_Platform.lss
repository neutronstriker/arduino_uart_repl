
DDAT_Platform.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a8  00800100  00005c06  00005c9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014b  008003a8  008003a8  00005f42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005f42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005f74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000455  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e634  00000000  00000000  00006a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023ef  00000000  00000000  0001509d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004dcb  00000000  00000000  0001748c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014d0  00000000  00000000  0001c258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000030f6  00000000  00000000  0001d728  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008896  00000000  00000000  0002081e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000730  00000000  00000000  000290b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__ctors_end>
       4:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__vector_1>
       8:	0c 94 1a 1a 	jmp	0x3434	; 0x3434 <__vector_2>
       c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      10:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      14:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      18:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      1c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      20:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      24:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      28:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      2c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      30:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      34:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      38:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      3c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      40:	0c 94 cd 28 	jmp	0x519a	; 0x519a <__vector_16>
      44:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      48:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__vector_18>
      4c:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <__vector_19>
      50:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      54:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      58:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      5c:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      60:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      64:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__bad_interrupt>
      68:	e7 1d       	adc	r30, r7
      6a:	0d 1e       	adc	r0, r29
      6c:	ec 1d       	adc	r30, r12
      6e:	f1 1d       	adc	r31, r1
      70:	f6 1d       	adc	r31, r6
      72:	fb 1d       	adc	r31, r11
      74:	00 1e       	adc	r0, r16

00000076 <__trampolines_end>:
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 3e       	cpi	r16, 0xE0	; 224
      7c:	5b 4f       	sbci	r21, 0xFB	; 251
      7e:	5b 3e       	cpi	r21, 0xEB	; 235
      80:	3e 6b       	ori	r19, 0xBE	; 190
      82:	4f 6b       	ori	r20, 0xBF	; 191
      84:	3e 1c       	adc	r3, r14
      86:	3e 7c       	andi	r19, 0xCE	; 206
      88:	3e 1c       	adc	r3, r14
      8a:	18 3c       	cpi	r17, 0xC8	; 200
      8c:	7e 3c       	cpi	r23, 0xCE	; 206
      8e:	18 1c       	adc	r1, r8
      90:	57 7d       	andi	r21, 0xD7	; 215
      92:	57 1c       	adc	r5, r7
      94:	1c 5e       	subi	r17, 0xEC	; 236
      96:	7f 5e       	subi	r23, 0xEF	; 239
      98:	1c 00       	.word	0x001c	; ????
      9a:	18 3c       	cpi	r17, 0xC8	; 200
      9c:	18 00       	.word	0x0018	; ????
      9e:	ff e7       	ldi	r31, 0x7F	; 127
      a0:	c3 e7       	ldi	r28, 0x73	; 115
      a2:	ff 00       	.word	0x00ff	; ????
      a4:	18 24       	eor	r1, r8
      a6:	18 00       	.word	0x0018	; ????
      a8:	ff e7       	ldi	r31, 0x7F	; 127
      aa:	db e7       	ldi	r29, 0x7B	; 123
      ac:	ff 30       	cpi	r31, 0x0F	; 15
      ae:	48 3a       	cpi	r20, 0xA8	; 168
      b0:	06 0e       	add	r0, r22
      b2:	26 29       	or	r18, r6
      b4:	79 29       	or	r23, r9
      b6:	26 40       	sbci	r18, 0x06	; 6
      b8:	7f 05       	cpc	r23, r15
      ba:	05 07       	cpc	r16, r21
      bc:	40 7f       	andi	r20, 0xF0	; 240
      be:	05 25       	eor	r16, r5
      c0:	3f 5a       	subi	r19, 0xAF	; 175
      c2:	3c e7       	ldi	r19, 0x7C	; 124
      c4:	3c 5a       	subi	r19, 0xAC	; 172
      c6:	7f 3e       	cpi	r23, 0xEF	; 239
      c8:	1c 1c       	adc	r1, r12
      ca:	08 08       	sbc	r0, r8
      cc:	1c 1c       	adc	r1, r12
      ce:	3e 7f       	andi	r19, 0xFE	; 254
      d0:	14 22       	and	r1, r20
      d2:	7f 22       	and	r7, r31
      d4:	14 5f       	subi	r17, 0xF4	; 244
      d6:	5f 00       	.word	0x005f	; ????
      d8:	5f 5f       	subi	r21, 0xFF	; 255
      da:	06 09       	sbc	r16, r6
      dc:	7f 01       	movw	r14, r30
      de:	7f 00       	.word	0x007f	; ????
      e0:	66 89       	ldd	r22, Z+22	; 0x16
      e2:	95 6a       	ori	r25, 0xA5	; 165
      e4:	60 60       	ori	r22, 0x00	; 0
      e6:	60 60       	ori	r22, 0x00	; 0
      e8:	60 94       	com	r6
      ea:	a2 ff       	sbrs	r26, 2
      ec:	a2 94       	swap	r10
      ee:	08 04       	cpc	r0, r8
      f0:	7e 04       	cpc	r7, r14
      f2:	08 10       	cpse	r0, r8
      f4:	20 7e       	andi	r18, 0xE0	; 224
      f6:	20 10       	cpse	r2, r0
      f8:	08 08       	sbc	r0, r8
      fa:	2a 1c       	adc	r2, r10
      fc:	08 08       	sbc	r0, r8
      fe:	1c 2a       	or	r1, r28
     100:	08 08       	sbc	r0, r8
     102:	1e 10       	cpse	r1, r14
     104:	10 10       	cpse	r1, r0
     106:	10 0c       	add	r1, r0
     108:	1e 0c       	add	r1, r14
     10a:	1e 0c       	add	r1, r14
     10c:	30 38       	cpi	r19, 0x80	; 128
     10e:	3e 38       	cpi	r19, 0x8E	; 142
     110:	30 06       	cpc	r3, r16
     112:	0e 3e       	cpi	r16, 0xEE	; 238
     114:	0e 06       	cpc	r0, r30
     116:	00 00       	nop
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 5f       	subi	r16, 0xF0	; 240
     11e:	00 00       	nop
     120:	00 07       	cpc	r16, r16
     122:	00 07       	cpc	r16, r16
     124:	00 14       	cp	r0, r0
     126:	7f 14       	cp	r7, r15
     128:	7f 14       	cp	r7, r15
     12a:	24 2a       	or	r2, r20
     12c:	7f 2a       	or	r7, r31
     12e:	12 23       	and	r17, r18
     130:	13 08       	sbc	r1, r3
     132:	64 62       	ori	r22, 0x24	; 36
     134:	36 49       	sbci	r19, 0x96	; 150
     136:	56 20       	and	r5, r6
     138:	50 00       	.word	0x0050	; ????
     13a:	08 07       	cpc	r16, r24
     13c:	03 00       	.word	0x0003	; ????
     13e:	00 1c       	adc	r0, r0
     140:	22 41       	sbci	r18, 0x12	; 18
     142:	00 00       	nop
     144:	41 22       	and	r4, r17
     146:	1c 00       	.word	0x001c	; ????
     148:	2a 1c       	adc	r2, r10
     14a:	7f 1c       	adc	r7, r15
     14c:	2a 08       	sbc	r2, r10
     14e:	08 3e       	cpi	r16, 0xE8	; 232
     150:	08 08       	sbc	r0, r8
     152:	00 80       	ld	r0, Z
     154:	70 30       	cpi	r23, 0x00	; 0
     156:	00 08       	sbc	r0, r0
     158:	08 08       	sbc	r0, r8
     15a:	08 08       	sbc	r0, r8
     15c:	00 00       	nop
     15e:	60 60       	ori	r22, 0x00	; 0
     160:	00 20       	and	r0, r0
     162:	10 08       	sbc	r1, r0
     164:	04 02       	muls	r16, r20
     166:	3e 51       	subi	r19, 0x1E	; 30
     168:	49 45       	sbci	r20, 0x59	; 89
     16a:	3e 00       	.word	0x003e	; ????
     16c:	42 7f       	andi	r20, 0xF2	; 242
     16e:	40 00       	.word	0x0040	; ????
     170:	72 49       	sbci	r23, 0x92	; 146
     172:	49 49       	sbci	r20, 0x99	; 153
     174:	46 21       	and	r20, r6
     176:	41 49       	sbci	r20, 0x91	; 145
     178:	4d 33       	cpi	r20, 0x3D	; 61
     17a:	18 14       	cp	r1, r8
     17c:	12 7f       	andi	r17, 0xF2	; 242
     17e:	10 27       	eor	r17, r16
     180:	45 45       	sbci	r20, 0x55	; 85
     182:	45 39       	cpi	r20, 0x95	; 149
     184:	3c 4a       	sbci	r19, 0xAC	; 172
     186:	49 49       	sbci	r20, 0x99	; 153
     188:	31 41       	sbci	r19, 0x11	; 17
     18a:	21 11       	cpse	r18, r1
     18c:	09 07       	cpc	r16, r25
     18e:	36 49       	sbci	r19, 0x96	; 150
     190:	49 49       	sbci	r20, 0x99	; 153
     192:	36 46       	sbci	r19, 0x66	; 102
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	29 1e       	adc	r2, r25
     198:	00 00       	nop
     19a:	14 00       	.word	0x0014	; ????
     19c:	00 00       	nop
     19e:	40 34       	cpi	r20, 0x40	; 64
     1a0:	00 00       	nop
     1a2:	00 08       	sbc	r0, r0
     1a4:	14 22       	and	r1, r20
     1a6:	41 14       	cp	r4, r1
     1a8:	14 14       	cp	r1, r4
     1aa:	14 14       	cp	r1, r4
     1ac:	00 41       	sbci	r16, 0x10	; 16
     1ae:	22 14       	cp	r2, r2
     1b0:	08 02       	muls	r16, r24
     1b2:	01 59       	subi	r16, 0x91	; 145
     1b4:	09 06       	cpc	r0, r25
     1b6:	3e 41       	sbci	r19, 0x1E	; 30
     1b8:	5d 59       	subi	r21, 0x9D	; 157
     1ba:	4e 7c       	andi	r20, 0xCE	; 206
     1bc:	12 11       	cpse	r17, r2
     1be:	12 7c       	andi	r17, 0xC2	; 194
     1c0:	7f 49       	sbci	r23, 0x9F	; 159
     1c2:	49 49       	sbci	r20, 0x99	; 153
     1c4:	36 3e       	cpi	r19, 0xE6	; 230
     1c6:	41 41       	sbci	r20, 0x11	; 17
     1c8:	41 22       	and	r4, r17
     1ca:	7f 41       	sbci	r23, 0x1F	; 31
     1cc:	41 41       	sbci	r20, 0x11	; 17
     1ce:	3e 7f       	andi	r19, 0xFE	; 254
     1d0:	49 49       	sbci	r20, 0x99	; 153
     1d2:	49 41       	sbci	r20, 0x19	; 25
     1d4:	7f 09       	sbc	r23, r15
     1d6:	09 09       	sbc	r16, r9
     1d8:	01 3e       	cpi	r16, 0xE1	; 225
     1da:	41 41       	sbci	r20, 0x11	; 17
     1dc:	51 73       	andi	r21, 0x31	; 49
     1de:	7f 08       	sbc	r7, r15
     1e0:	08 08       	sbc	r0, r8
     1e2:	7f 00       	.word	0x007f	; ????
     1e4:	41 7f       	andi	r20, 0xF1	; 241
     1e6:	41 00       	.word	0x0041	; ????
     1e8:	20 40       	sbci	r18, 0x00	; 0
     1ea:	41 3f       	cpi	r20, 0xF1	; 241
     1ec:	01 7f       	andi	r16, 0xF1	; 241
     1ee:	08 14       	cp	r0, r8
     1f0:	22 41       	sbci	r18, 0x12	; 18
     1f2:	7f 40       	sbci	r23, 0x0F	; 15
     1f4:	40 40       	sbci	r20, 0x00	; 0
     1f6:	40 7f       	andi	r20, 0xF0	; 240
     1f8:	02 1c       	adc	r0, r2
     1fa:	02 7f       	andi	r16, 0xF2	; 242
     1fc:	7f 04       	cpc	r7, r15
     1fe:	08 10       	cpse	r0, r8
     200:	7f 3e       	cpi	r23, 0xEF	; 239
     202:	41 41       	sbci	r20, 0x11	; 17
     204:	41 3e       	cpi	r20, 0xE1	; 225
     206:	7f 09       	sbc	r23, r15
     208:	09 09       	sbc	r16, r9
     20a:	06 3e       	cpi	r16, 0xE6	; 230
     20c:	41 51       	subi	r20, 0x11	; 17
     20e:	21 5e       	subi	r18, 0xE1	; 225
     210:	7f 09       	sbc	r23, r15
     212:	19 29       	or	r17, r9
     214:	46 26       	eor	r4, r22
     216:	49 49       	sbci	r20, 0x99	; 153
     218:	49 32       	cpi	r20, 0x29	; 41
     21a:	03 01       	movw	r0, r6
     21c:	7f 01       	movw	r14, r30
     21e:	03 3f       	cpi	r16, 0xF3	; 243
     220:	40 40       	sbci	r20, 0x00	; 0
     222:	40 3f       	cpi	r20, 0xF0	; 240
     224:	1f 20       	and	r1, r15
     226:	40 20       	and	r4, r0
     228:	1f 3f       	cpi	r17, 0xFF	; 255
     22a:	40 38       	cpi	r20, 0x80	; 128
     22c:	40 3f       	cpi	r20, 0xF0	; 240
     22e:	63 14       	cp	r6, r3
     230:	08 14       	cp	r0, r8
     232:	63 03       	mulsu	r22, r19
     234:	04 78       	andi	r16, 0x84	; 132
     236:	04 03       	mulsu	r16, r20
     238:	61 59       	subi	r22, 0x91	; 145
     23a:	49 4d       	sbci	r20, 0xD9	; 217
     23c:	43 00       	.word	0x0043	; ????
     23e:	7f 41       	sbci	r23, 0x1F	; 31
     240:	41 41       	sbci	r20, 0x11	; 17
     242:	02 04       	cpc	r0, r2
     244:	08 10       	cpse	r0, r8
     246:	20 00       	.word	0x0020	; ????
     248:	41 41       	sbci	r20, 0x11	; 17
     24a:	41 7f       	andi	r20, 0xF1	; 241
     24c:	04 02       	muls	r16, r20
     24e:	01 02       	muls	r16, r17
     250:	04 40       	sbci	r16, 0x04	; 4
     252:	40 40       	sbci	r20, 0x00	; 0
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	00 03       	mulsu	r16, r16
     258:	07 08       	sbc	r0, r7
     25a:	00 20       	and	r0, r0
     25c:	54 54       	subi	r21, 0x44	; 68
     25e:	78 40       	sbci	r23, 0x08	; 8
     260:	7f 28       	or	r7, r15
     262:	44 44       	sbci	r20, 0x44	; 68
     264:	38 38       	cpi	r19, 0x88	; 136
     266:	44 44       	sbci	r20, 0x44	; 68
     268:	44 28       	or	r4, r4
     26a:	38 44       	sbci	r19, 0x48	; 72
     26c:	44 28       	or	r4, r4
     26e:	7f 38       	cpi	r23, 0x8F	; 143
     270:	54 54       	subi	r21, 0x44	; 68
     272:	54 18       	sub	r5, r4
     274:	00 08       	sbc	r0, r0
     276:	7e 09       	sbc	r23, r14
     278:	02 18       	sub	r0, r2
     27a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     27c:	9c 78       	andi	r25, 0x8C	; 140
     27e:	7f 08       	sbc	r7, r15
     280:	04 04       	cpc	r0, r4
     282:	78 00       	.word	0x0078	; ????
     284:	44 7d       	andi	r20, 0xD4	; 212
     286:	40 00       	.word	0x0040	; ????
     288:	20 40       	sbci	r18, 0x00	; 0
     28a:	40 3d       	cpi	r20, 0xD0	; 208
     28c:	00 7f       	andi	r16, 0xF0	; 240
     28e:	10 28       	or	r1, r0
     290:	44 00       	.word	0x0044	; ????
     292:	00 41       	sbci	r16, 0x10	; 16
     294:	7f 40       	sbci	r23, 0x0F	; 15
     296:	00 7c       	andi	r16, 0xC0	; 192
     298:	04 78       	andi	r16, 0x84	; 132
     29a:	04 78       	andi	r16, 0x84	; 132
     29c:	7c 08       	sbc	r7, r12
     29e:	04 04       	cpc	r0, r4
     2a0:	78 38       	cpi	r23, 0x88	; 136
     2a2:	44 44       	sbci	r20, 0x44	; 68
     2a4:	44 38       	cpi	r20, 0x84	; 132
     2a6:	fc 18       	sub	r15, r12
     2a8:	24 24       	eor	r2, r4
     2aa:	18 18       	sub	r1, r8
     2ac:	24 24       	eor	r2, r4
     2ae:	18 fc       	.word	0xfc18	; ????
     2b0:	7c 08       	sbc	r7, r12
     2b2:	04 04       	cpc	r0, r4
     2b4:	08 48       	sbci	r16, 0x88	; 136
     2b6:	54 54       	subi	r21, 0x44	; 68
     2b8:	54 24       	eor	r5, r4
     2ba:	04 04       	cpc	r0, r4
     2bc:	3f 44       	sbci	r19, 0x4F	; 79
     2be:	24 3c       	cpi	r18, 0xC4	; 196
     2c0:	40 40       	sbci	r20, 0x00	; 0
     2c2:	20 7c       	andi	r18, 0xC0	; 192
     2c4:	1c 20       	and	r1, r12
     2c6:	40 20       	and	r4, r0
     2c8:	1c 3c       	cpi	r17, 0xCC	; 204
     2ca:	40 30       	cpi	r20, 0x00	; 0
     2cc:	40 3c       	cpi	r20, 0xC0	; 192
     2ce:	44 28       	or	r4, r4
     2d0:	10 28       	or	r1, r0
     2d2:	44 4c       	sbci	r20, 0xC4	; 196
     2d4:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__bss_end+0x779d>
     2d8:	44 64       	ori	r20, 0x44	; 68
     2da:	54 4c       	sbci	r21, 0xC4	; 196
     2dc:	44 00       	.word	0x0044	; ????
     2de:	08 36       	cpi	r16, 0x68	; 104
     2e0:	41 00       	.word	0x0041	; ????
     2e2:	00 00       	nop
     2e4:	77 00       	.word	0x0077	; ????
     2e6:	00 00       	nop
     2e8:	41 36       	cpi	r20, 0x61	; 97
     2ea:	08 00       	.word	0x0008	; ????
     2ec:	02 01       	movw	r0, r4
     2ee:	02 04       	cpc	r0, r2
     2f0:	02 3c       	cpi	r16, 0xC2	; 194
     2f2:	26 23       	and	r18, r22
     2f4:	26 3c       	cpi	r18, 0xC6	; 198
     2f6:	1e a1       	ldd	r17, Y+38	; 0x26
     2f8:	a1 61       	ori	r26, 0x11	; 17
     2fa:	12 3a       	cpi	r17, 0xA2	; 162
     2fc:	40 40       	sbci	r20, 0x00	; 0
     2fe:	20 7a       	andi	r18, 0xA0	; 160
     300:	38 54       	subi	r19, 0x48	; 72
     302:	54 55       	subi	r21, 0x54	; 84
     304:	59 21       	and	r21, r9
     306:	55 55       	subi	r21, 0x55	; 85
     308:	79 41       	sbci	r23, 0x19	; 25
     30a:	22 54       	subi	r18, 0x42	; 66
     30c:	54 78       	andi	r21, 0x84	; 132
     30e:	42 21       	and	r20, r2
     310:	55 54       	subi	r21, 0x45	; 69
     312:	78 40       	sbci	r23, 0x08	; 8
     314:	20 54       	subi	r18, 0x40	; 64
     316:	55 79       	andi	r21, 0x95	; 149
     318:	40 0c       	add	r4, r0
     31a:	1e 52       	subi	r17, 0x2E	; 46
     31c:	72 12       	cpse	r7, r18
     31e:	39 55       	subi	r19, 0x59	; 89
     320:	55 55       	subi	r21, 0x55	; 85
     322:	59 39       	cpi	r21, 0x99	; 153
     324:	54 54       	subi	r21, 0x44	; 68
     326:	54 59       	subi	r21, 0x94	; 148
     328:	39 55       	subi	r19, 0x59	; 89
     32a:	54 54       	subi	r21, 0x44	; 68
     32c:	58 00       	.word	0x0058	; ????
     32e:	00 45       	sbci	r16, 0x50	; 80
     330:	7c 41       	sbci	r23, 0x1C	; 28
     332:	00 02       	muls	r16, r16
     334:	45 7d       	andi	r20, 0xD5	; 213
     336:	42 00       	.word	0x0042	; ????
     338:	01 45       	sbci	r16, 0x51	; 81
     33a:	7c 40       	sbci	r23, 0x0C	; 12
     33c:	7d 12       	cpse	r7, r29
     33e:	11 12       	cpse	r1, r17
     340:	7d f0       	brhs	.+30     	; 0x360 <__trampolines_end+0x2ea>
     342:	28 25       	eor	r18, r8
     344:	28 f0       	brcs	.+10     	; 0x350 <__trampolines_end+0x2da>
     346:	7c 54       	subi	r23, 0x4C	; 76
     348:	55 45       	sbci	r21, 0x55	; 85
     34a:	00 20       	and	r0, r0
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	7c 54       	subi	r23, 0x4C	; 76
     350:	7c 0a       	sbc	r7, r28
     352:	09 7f       	andi	r16, 0xF9	; 249
     354:	49 32       	cpi	r20, 0x29	; 41
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 32       	cpi	r20, 0x29	; 41
     35a:	3a 44       	sbci	r19, 0x4A	; 74
     35c:	44 44       	sbci	r20, 0x44	; 68
     35e:	3a 32       	cpi	r19, 0x2A	; 42
     360:	4a 48       	sbci	r20, 0x8A	; 138
     362:	48 30       	cpi	r20, 0x08	; 8
     364:	3a 41       	sbci	r19, 0x1A	; 26
     366:	41 21       	and	r20, r1
     368:	7a 3a       	cpi	r23, 0xAA	; 170
     36a:	42 40       	sbci	r20, 0x02	; 2
     36c:	20 78       	andi	r18, 0x80	; 128
     36e:	00 9d       	mul	r16, r0
     370:	a0 a0       	ldd	r10, Z+32	; 0x20
     372:	7d 3d       	cpi	r23, 0xDD	; 221
     374:	42 42       	sbci	r20, 0x22	; 34
     376:	42 3d       	cpi	r20, 0xD2	; 210
     378:	3d 40       	sbci	r19, 0x0D	; 13
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	3d 3c       	cpi	r19, 0xCD	; 205
     37e:	24 ff       	sbrs	r18, 4
     380:	24 24       	eor	r2, r4
     382:	48 7e       	andi	r20, 0xE8	; 232
     384:	49 43       	sbci	r20, 0x39	; 57
     386:	66 2b       	or	r22, r22
     388:	2f fc       	.word	0xfc2f	; ????
     38a:	2f 2b       	or	r18, r31
     38c:	ff 09       	sbc	r31, r15
     38e:	29 f6       	brne	.-118    	; 0x31a <__trampolines_end+0x2a4>
     390:	20 c0       	rjmp	.+64     	; 0x3d2 <__trampolines_end+0x35c>
     392:	88 7e       	andi	r24, 0xE8	; 232
     394:	09 03       	fmul	r16, r17
     396:	20 54       	subi	r18, 0x40	; 64
     398:	54 79       	andi	r21, 0x94	; 148
     39a:	41 00       	.word	0x0041	; ????
     39c:	00 44       	sbci	r16, 0x40	; 64
     39e:	7d 41       	sbci	r23, 0x1D	; 29
     3a0:	30 48       	sbci	r19, 0x80	; 128
     3a2:	48 4a       	sbci	r20, 0xA8	; 168
     3a4:	32 38       	cpi	r19, 0x82	; 130
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	22 7a       	andi	r18, 0xA2	; 162
     3aa:	00 7a       	andi	r16, 0xA0	; 160
     3ac:	0a 0a       	sbc	r0, r26
     3ae:	72 7d       	andi	r23, 0xD2	; 210
     3b0:	0d 19       	sub	r16, r13
     3b2:	31 7d       	andi	r19, 0xD1	; 209
     3b4:	26 29       	or	r18, r6
     3b6:	29 2f       	mov	r18, r25
     3b8:	28 26       	eor	r2, r24
     3ba:	29 29       	or	r18, r9
     3bc:	29 26       	eor	r2, r25
     3be:	30 48       	sbci	r19, 0x80	; 128
     3c0:	4d 40       	sbci	r20, 0x0D	; 13
     3c2:	20 38       	cpi	r18, 0x80	; 128
     3c4:	08 08       	sbc	r0, r8
     3c6:	08 08       	sbc	r0, r8
     3c8:	08 08       	sbc	r0, r8
     3ca:	08 08       	sbc	r0, r8
     3cc:	38 2f       	mov	r19, r24
     3ce:	10 c8       	rjmp	.-4064   	; 0xfffff3f0 <__eeprom_end+0xff7ef3f0>
     3d0:	ac ba       	out	0x1c, r10	; 28
     3d2:	2f 10       	cpse	r2, r15
     3d4:	28 34       	cpi	r18, 0x48	; 72
     3d6:	fa 00       	.word	0x00fa	; ????
     3d8:	00 7b       	andi	r16, 0xB0	; 176
     3da:	00 00       	nop
     3dc:	08 14       	cp	r0, r8
     3de:	2a 14       	cp	r2, r10
     3e0:	22 22       	and	r2, r18
     3e2:	14 2a       	or	r1, r20
     3e4:	14 08       	sbc	r1, r4
     3e6:	aa 00       	.word	0x00aa	; ????
     3e8:	55 00       	.word	0x0055	; ????
     3ea:	aa aa       	std	Y+50, r10	; 0x32
     3ec:	55 aa       	std	Z+53, r5	; 0x35
     3ee:	55 aa       	std	Z+53, r5	; 0x35
     3f0:	00 00       	nop
     3f2:	00 ff       	sbrs	r16, 0
     3f4:	00 10       	cpse	r0, r0
     3f6:	10 10       	cpse	r1, r0
     3f8:	ff 00       	.word	0x00ff	; ????
     3fa:	14 14       	cp	r1, r4
     3fc:	14 ff       	sbrs	r17, 4
     3fe:	00 10       	cpse	r0, r0
     400:	10 ff       	sbrs	r17, 0
     402:	00 ff       	sbrs	r16, 0
     404:	10 10       	cpse	r1, r0
     406:	f0 10       	cpse	r15, r0
     408:	f0 14       	cp	r15, r0
     40a:	14 14       	cp	r1, r4
     40c:	fc 00       	.word	0x00fc	; ????
     40e:	14 14       	cp	r1, r4
     410:	f7 00       	.word	0x00f7	; ????
     412:	ff 00       	.word	0x00ff	; ????
     414:	00 ff       	sbrs	r16, 0
     416:	00 ff       	sbrs	r16, 0
     418:	14 14       	cp	r1, r4
     41a:	f4 04       	cpc	r15, r4
     41c:	fc 14       	cp	r15, r12
     41e:	14 17       	cp	r17, r20
     420:	10 1f       	adc	r17, r16
     422:	10 10       	cpse	r1, r0
     424:	1f 10       	cpse	r1, r15
     426:	1f 14       	cp	r1, r15
     428:	14 14       	cp	r1, r4
     42a:	1f 00       	.word	0x001f	; ????
     42c:	10 10       	cpse	r1, r0
     42e:	10 f0       	brcs	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	00 00       	nop
     432:	00 00       	nop
     434:	1f 10       	cpse	r1, r15
     436:	10 10       	cpse	r1, r0
     438:	10 1f       	adc	r17, r16
     43a:	10 10       	cpse	r1, r0
     43c:	10 10       	cpse	r1, r0
     43e:	f0 10       	cpse	r15, r0
     440:	00 00       	nop
     442:	00 ff       	sbrs	r16, 0
     444:	10 10       	cpse	r1, r0
     446:	10 10       	cpse	r1, r0
     448:	10 10       	cpse	r1, r0
     44a:	10 10       	cpse	r1, r0
     44c:	10 ff       	sbrs	r17, 0
     44e:	10 00       	.word	0x0010	; ????
     450:	00 00       	nop
     452:	ff 14       	cp	r15, r15
     454:	00 00       	nop
     456:	ff 00       	.word	0x00ff	; ????
     458:	ff 00       	.word	0x00ff	; ????
     45a:	00 1f       	adc	r16, r16
     45c:	10 17       	cp	r17, r16
     45e:	00 00       	nop
     460:	fc 04       	cpc	r15, r12
     462:	f4 14       	cp	r15, r4
     464:	14 17       	cp	r17, r20
     466:	10 17       	cp	r17, r16
     468:	14 14       	cp	r1, r4
     46a:	f4 04       	cpc	r15, r4
     46c:	f4 00       	.word	0x00f4	; ????
     46e:	00 ff       	sbrs	r16, 0
     470:	00 f7       	brcc	.-64     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     472:	14 14       	cp	r1, r4
     474:	14 14       	cp	r1, r4
     476:	14 14       	cp	r1, r4
     478:	14 f7       	brge	.-60     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     47a:	00 f7       	brcc	.-64     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     47c:	14 14       	cp	r1, r4
     47e:	14 17       	cp	r17, r20
     480:	14 10       	cpse	r1, r4
     482:	10 1f       	adc	r17, r16
     484:	10 1f       	adc	r17, r16
     486:	14 14       	cp	r1, r4
     488:	14 f4       	brge	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48a:	14 10       	cpse	r1, r4
     48c:	10 f0       	brcs	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48e:	10 f0       	brcs	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     490:	00 00       	nop
     492:	1f 10       	cpse	r1, r15
     494:	1f 00       	.word	0x001f	; ????
     496:	00 00       	nop
     498:	1f 14       	cp	r1, r15
     49a:	00 00       	nop
     49c:	00 fc       	sbrc	r0, 0
     49e:	14 00       	.word	0x0014	; ????
     4a0:	00 f0       	brcs	.+0      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	10 10       	cpse	r1, r0
     4a6:	ff 10       	cpse	r15, r15
     4a8:	ff 14       	cp	r15, r15
     4aa:	14 14       	cp	r1, r4
     4ac:	ff 14       	cp	r15, r15
     4ae:	10 10       	cpse	r1, r0
     4b0:	10 1f       	adc	r17, r16
     4b2:	00 00       	nop
     4b4:	00 00       	nop
     4b6:	f0 10       	cpse	r15, r0
     4b8:	ff ff       	.word	0xffff	; ????
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	ff f0       	brie	.+62     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4be:	f0 f0       	brcs	.+60     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4c0:	f0 f0       	brcs	.+60     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4c2:	ff ff       	.word	0xffff	; ????
     4c4:	ff 00       	.word	0x00ff	; ????
     4c6:	00 00       	nop
     4c8:	00 00       	nop
     4ca:	ff ff       	.word	0xffff	; ????
     4cc:	0f 0f       	add	r16, r31
     4ce:	0f 0f       	add	r16, r31
     4d0:	0f 38       	cpi	r16, 0x8F	; 143
     4d2:	44 44       	sbci	r20, 0x44	; 68
     4d4:	38 44       	sbci	r19, 0x48	; 72
     4d6:	fc 4a       	sbci	r31, 0xAC	; 172
     4d8:	4a 4a       	sbci	r20, 0xAA	; 170
     4da:	34 7e       	andi	r19, 0xE4	; 228
     4dc:	02 02       	muls	r16, r18
     4de:	06 06       	cpc	r0, r22
     4e0:	02 7e       	andi	r16, 0xE2	; 226
     4e2:	02 7e       	andi	r16, 0xE2	; 226
     4e4:	02 63       	ori	r16, 0x32	; 50
     4e6:	55 49       	sbci	r21, 0x95	; 149
     4e8:	41 63       	ori	r20, 0x31	; 49
     4ea:	38 44       	sbci	r19, 0x48	; 72
     4ec:	44 3c       	cpi	r20, 0xC4	; 196
     4ee:	04 40       	sbci	r16, 0x04	; 4
     4f0:	7e 20       	and	r7, r14
     4f2:	1e 20       	and	r1, r14
     4f4:	06 02       	muls	r16, r22
     4f6:	7e 02       	muls	r23, r30
     4f8:	02 99       	sbic	0x00, 2	; 0
     4fa:	a5 e7       	ldi	r26, 0x75	; 117
     4fc:	a5 99       	sbic	0x14, 5	; 20
     4fe:	1c 2a       	or	r1, r28
     500:	49 2a       	or	r4, r25
     502:	1c 4c       	sbci	r17, 0xCC	; 204
     504:	72 01       	movw	r14, r4
     506:	72 4c       	sbci	r23, 0xC2	; 194
     508:	30 4a       	sbci	r19, 0xA0	; 160
     50a:	4d 4d       	sbci	r20, 0xDD	; 221
     50c:	30 30       	cpi	r19, 0x00	; 0
     50e:	48 78       	andi	r20, 0x88	; 136
     510:	48 30       	cpi	r20, 0x08	; 8
     512:	bc 62       	ori	r27, 0x2C	; 44
     514:	5a 46       	sbci	r21, 0x6A	; 106
     516:	3d 3e       	cpi	r19, 0xED	; 237
     518:	49 49       	sbci	r20, 0x99	; 153
     51a:	49 00       	.word	0x0049	; ????
     51c:	7e 01       	movw	r14, r28
     51e:	01 01       	movw	r0, r2
     520:	7e 2a       	or	r7, r30
     522:	2a 2a       	or	r2, r26
     524:	2a 2a       	or	r2, r26
     526:	44 44       	sbci	r20, 0x44	; 68
     528:	5f 44       	sbci	r21, 0x4F	; 79
     52a:	44 40       	sbci	r20, 0x04	; 4
     52c:	51 4a       	sbci	r21, 0xA1	; 161
     52e:	44 40       	sbci	r20, 0x04	; 4
     530:	40 44       	sbci	r20, 0x40	; 64
     532:	4a 51       	subi	r20, 0x1A	; 26
     534:	40 00       	.word	0x0040	; ????
     536:	00 ff       	sbrs	r16, 0
     538:	01 03       	mulsu	r16, r17
     53a:	e0 80       	ld	r14, Z
     53c:	ff 00       	.word	0x00ff	; ????
     53e:	00 08       	sbc	r0, r0
     540:	08 6b       	ori	r16, 0xB8	; 184
     542:	6b 08       	sbc	r6, r11
     544:	36 12       	cpse	r3, r22
     546:	36 24       	eor	r3, r6
     548:	36 06       	cpc	r3, r22
     54a:	0f 09       	sbc	r16, r15
     54c:	0f 06       	cpc	r0, r31
     54e:	00 00       	nop
     550:	18 18       	sub	r1, r8
     552:	00 00       	nop
     554:	00 10       	cpse	r0, r0
     556:	10 00       	.word	0x0010	; ????
     558:	30 40       	sbci	r19, 0x00	; 0
     55a:	ff 01       	movw	r30, r30
     55c:	01 00       	.word	0x0001	; ????
     55e:	1f 01       	movw	r2, r30
     560:	01 1e       	adc	r0, r17
     562:	00 19       	sub	r16, r0
     564:	1d 17       	cp	r17, r29
     566:	12 00       	.word	0x0012	; ????
     568:	3c 3c       	cpi	r19, 0xCC	; 204
     56a:	3c 3c       	cpi	r19, 0xCC	; 204
     56c:	00 00       	nop
     56e:	00 00       	nop
	...

00000571 <_ZZ13parse_spi_cmdPchE3__c_2>:
     571:	53 50 49 20 42 61 64 20 42 69 74 20 6f 72 64 65     SPI Bad Bit orde
     581:	72 20 6f 70 74 69 6f 6e 00                          r option.

0000058a <_ZZ13parse_spi_cmdPchE3__c_1>:
     58a:	53 50 49 20 42 61 64 20 6d 6f 64 65 20 6f 70 74     SPI Bad mode opt
     59a:	69 6f 6e 00                                         ion.

0000059e <_ZZ13parse_spi_cmdPchE3__c_0>:
     59e:	53 50 49 20 42 61 64 20 43 6c 6f 63 6b 20 4f 70     SPI Bad Clock Op
     5ae:	74 69 6f 6e 00                                      tion.

000005b3 <_ZZ13parse_spi_cmdPchE3__c>:
     5b3:	45 52 52 4f 52 21 20 54 68 69 73 20 70 69 6e 20     ERROR! This pin 
     5c3:	69 73 20 66 6f 72 62 69 64 64 65 6e 20 66 6f 72     is forbidden for
     5d3:	20 43 53 00                                          CS.

000005d7 <_ZZ14stop_streamingvE3__c_1>:
     5d7:	53 54 52 45 41 4d 49 4e 47 5f 53 54 4f 50 50 45     STREAMING_STOPPE
     5e7:	44 00                                               D.

000005e9 <_ZZ14stop_streamingvE3__c_0>:
     5e9:	20 53 54 4f 50 50 45 44 00                           STOPPED.

000005f2 <_ZZ14stop_streamingvE3__c>:
     5f2:	53 54 52 45 41 4d 49 4e 47 00                       STREAMING.

000005fc <_ZZ10showPinOutvE3__c_1>:
     5fc:	20 20 20 20 20 20 20 20 20 20 20 35 56 2c 52 2c                5V,R,
     60c:	47 2c 52 41 57 00                                   G,RAW.

00000612 <_ZZ10showPinOutvE3__c_0>:
     612:	31 33 2c 33 2e 33 2c 41 52 45 46 2c 41 30 2d 41     13,3.3,AREF,A0-A
     622:	37 00                                               7.

00000624 <_ZZ10showPinOutvE3__c>:
     624:	31 32 2c 31 31 2e 2e 2e 33 2c 32 2c 47 2c 52 2c     12,11...3,2,G,R,
     634:	52 58 2c 54 58 00                                   RX,TX.

0000063a <_ZZ5usagevE3__c_42>:
     63a:	20 20 20 20 20 20 34 2e 4e 65 77 20 43 6f 6d 6d           4.New Comm
     64a:	61 6e 64 73 20 68 61 76 65 20 62 65 65 6e 20 61     ands have been a
     65a:	64 64 65 64 20 70 6c 65 61 73 65 20 75 70 64 61     dded please upda
     66a:	74 65 20 74 68 69 73 20 6c 69 73 74 0d 0a 00        te this list...

00000679 <_ZZ5usagevE3__c_41>:
     679:	20 20 20 20 20 20 33 2e 43 6f 6d 6d 61 6e 64 73           3.Commands
     689:	20 61 72 65 20 63 61 73 65 20 73 65 6e 73 69 74      are case sensit
     699:	69 76 65 2c 20 77 65 20 6e 65 65 64 20 74 6f 20     ive, we need to 
     6a9:	63 68 65 63 6b 20 74 68 69 73 0d 0a 00              check this...

000006b6 <_ZZ5usagevE3__c_40>:
     6b6:	20 20 20 20 20 20 32 2e 41 6c 6c 20 74 68 72 65           2.All thre
     6c6:	65 20 74 79 70 65 73 20 6f 66 20 73 74 72 65 61     e types of strea
     6d6:	6d 20 63 61 6e 20 62 65 20 61 63 74 69 76 65 20     m can be active 
     6e6:	74 6f 67 65 74 68 65 72 20 61 6e 64 20 64 61 74     together and dat
     6f6:	61 20 77 69 6c 6c 20 62 65 20 69 6e 20 43 6f 6d     a will be in Com
     706:	6d 61 20 53 65 70 61 72 61 74 65 64 20 76 61 6c     ma Separated val
     716:	75 65 73 0d 0a 00                                   ues...

0000071c <_ZZ5usagevE3__c_39>:
     71c:	0d 0a 4e 6f 74 65 3a 20 31 2e 43 54 52 4c 2b 43     ..Note: 1.CTRL+C
     72c:	20 66 6f 6c 6c 6f 77 65 64 20 62 79 20 52 45 54      followed by RET
     73c:	55 52 4e 20 61 6c 73 6f 20 73 74 6f 70 73 20 73     URN also stops s
     74c:	74 72 65 61 6d 0d 0a 00                             tream...

00000754 <_ZZ5usagevE3__c_38>:
     754:	09 68 65 6c 70 3a 20 53 68 6f 77 20 74 68 69 73     .help: Show this
     764:	20 68 65 6c 70 20 6d 65 73 73 61 67 65 0d 0a 00      help message...

00000774 <_ZZ5usagevE3__c_37>:
     774:	09 75 64 69 73 3a 20 64 69 73 61 62 6c 65 20 55     .udis: disable U
     784:	61 72 74 20 63 6f 6e 6e 65 63 74 69 6f 6e 3b 20     art connection; 
     794:	63 61 6e 20 62 65 20 75 73 65 20 74 6f 20 6d 61     can be use to ma
     7a4:	6b 65 20 61 20 70 61 73 73 20 74 68 72 6f 75 67     ke a pass throug
     7b4:	68 20 63 6f 6e 6e 65 63 74 69 6f 6e 20 62 65 74     h connection bet
     7c4:	77 65 65 6e 20 42 6c 75 65 74 6f 6f 74 68 20 61     ween Bluetooth a
     7d4:	6e 64 20 61 6e 6f 74 68 65 72 20 55 41 52 54 20     nd another UART 
     7e4:	64 65 76 69 63 65 2e 0d 0a 00                       device....

000007ee <_ZZ5usagevE3__c_36>:
     7ee:	09 73 6e 6f 6f 70 64 3a 20 45 6e 61 62 6c 65 73     .snoopd: Enables
     7fe:	20 74 68 65 20 54 58 20 6f 66 20 41 56 52 20 62      the TX of AVR b
     80e:	61 63 6b 20 4f 4e 0d 0a 00                          ack ON...

00000817 <_ZZ5usagevE3__c_35>:
     817:	09 73 6e 6f 6f 70 65 3a 20 64 69 73 61 62 6c 65     .snoope: disable
     827:	73 20 54 58 20 6f 66 20 41 56 52 20 61 6e 64 20     s TX of AVR and 
     837:	6b 65 65 70 73 20 74 68 65 20 52 58 20 65 6e 61     keeps the RX ena
     847:	62 6c 65 64 20 73 6f 20 74 68 61 74 20 77 65 20     bled so that we 
     857:	63 61 6e 20 72 65 61 64 20 64 61 74 61 20 6f 66     can read data of
     867:	20 61 6e 6f 74 68 65 72 20 55 41 52 54 20 64 65      another UART de
     877:	76 69 63 65 20 63 6f 6e 6e 65 63 74 65 64 0d 0a     vice connected..
	...

00000888 <_ZZ5usagevE3__c_34>:
     888:	09 72 65 73 65 74 3a 20 72 65 73 65 74 73 20 74     .reset: resets t
     898:	68 65 20 64 65 76 69 63 65 0d 0a 00                 he device...

000008a4 <_ZZ5usagevE3__c_33>:
     8a4:	09 77 73 70 6b 3a 20 6b 65 65 70 20 77 68 69 74     .wspk: keep whit
     8b4:	65 20 73 70 61 63 65 20 63 68 61 72 61 63 74 65     e space characte
     8c4:	72 73 0d 0a 00                                      rs...

000008c9 <_ZZ5usagevE3__c_32>:
     8c9:	09 77 73 70 72 3a 20 64 69 73 63 61 72 64 20 77     .wspr: discard w
     8d9:	68 69 74 65 20 73 70 61 63 65 20 63 68 61 72 61     hite space chara
     8e9:	63 74 65 72 73 0d 0a 00                             cters...

000008f1 <_ZZ5usagevE3__c_31>:
     8f1:	09 63 61 73 65 5f 64 3a 20 64 69 73 61 62 6c 65     .case_d: disable
     901:	20 43 61 73 65 20 73 65 6e 73 69 74 69 76 69 74      Case sensitivit
     911:	79 0d 0a 00                                         y...

00000915 <_ZZ5usagevE3__c_30>:
     915:	09 63 61 73 65 5f 65 3a 20 65 6e 61 62 6c 65 20     .case_e: enable 
     925:	43 61 73 65 20 73 65 6e 73 69 74 69 76 69 74 79     Case sensitivity
     935:	0d 0a 00                                            ...

00000938 <_ZZ5usagevE3__c_29>:
     938:	09 62 73 70 61 63 65 5f 64 3a 20 64 69 73 61 62     .bspace_d: disab
     948:	6c 65 20 42 61 63 6b 73 70 61 63 65 20 64 65 74     le Backspace det
     958:	65 63 74 69 6f 6e 0d 0a 00                          ection...

00000961 <_ZZ5usagevE3__c_28>:
     961:	09 62 73 70 61 63 65 5f 65 3a 20 65 6e 61 62 6c     .bspace_e: enabl
     971:	65 20 42 61 63 6b 73 70 61 63 65 20 64 65 74 65     e Backspace dete
     981:	63 74 69 6f 6e 0d 0a 00                             ction...

00000989 <_ZZ5usagevE3__c_27>:
     989:	09 61 74 64 65 3a 20 64 69 73 61 62 6c 65 20 54     .atde: disable T
     999:	65 72 6d 69 6e 61 6c 20 45 43 48 4f 0d 0a 00        erminal ECHO...

000009a8 <_ZZ5usagevE3__c_26>:
     9a8:	09 61 74 65 3a 20 65 6e 61 62 6c 65 20 54 65 72     .ate: enable Ter
     9b8:	6d 69 6e 61 6c 20 45 43 48 4f 0d 0a 00              minal ECHO...

000009c5 <_ZZ5usagevE3__c_25>:
     9c5:	09 73 68 6f 77 3a 20 53 68 6f 77 20 70 69 6e 2d     .show: Show pin-
     9d5:	6f 75 74 20 6f 6e 20 4f 4c 45 44 20 44 69 73 70     out on OLED Disp
     9e5:	6c 61 79 0d 0a 00                                   lay...

000009eb <_ZZ5usagevE3__c_24>:
     9eb:	09 20 20 20 20 20 20 20 20 20 20 79 6f 75 20 63     .          you c
     9fb:	61 6e 20 73 70 65 63 69 66 79 20 44 45 43 20 69     an specify DEC i
     a0b:	66 20 79 6f 75 20 77 61 6e 74 2e 0d 0a 00           f you want....

00000a19 <_ZZ5usagevE3__c_23>:
     a19:	09 20 20 20 20 20 20 20 20 20 20 74 68 65 20 73     .          the s
     a29:	65 71 75 65 6e 63 65 20 6f 66 20 70 61 72 61 6d     equence of param
     a39:	65 74 65 72 73 20 69 73 20 6e 6f 74 20 69 6d 70     eters is not imp
     a49:	6f 72 74 61 6e 74 2c 20 6d 61 78 20 6e 75 6d 62     ortant, max numb
     a59:	65 72 20 6f 66 20 62 79 74 65 73 20 63 61 6e 20     er of bytes can 
     a69:	62 65 20 38 2c 20 64 65 66 61 75 6c 74 20 69 73     be 8, default is
     a79:	20 48 45 58 20 74 79 70 65 0d 0a 00                  HEX type...

00000a85 <_ZZ5usagevE3__c_22>:
     a85:	09 20 20 20 20 20 20 20 20 20 20 66 6f 72 6d 61     .          forma
     a95:	74 3a 69 32 63 72 65 61 64 20 2d 73 3c 73 6c 61     t:i2cread -s<sla
     aa5:	76 65 5f 61 64 64 72 3e 20 2d 6e 3c 6e 6f 2e 20     ve_addr> -n<no. 
     ab5:	6f 66 20 62 79 74 65 73 3e 20 2d 72 3c 72 65 67     of bytes> -r<reg
     ac5:	69 73 74 65 72 5f 61 64 64 72 3e 20 5b 2d 74 48     ister_addr> [-tH
     ad5:	45 58 3a 44 45 43 5d 0d 0a 00                       EX:DEC]...

00000adf <_ZZ5usagevE3__c_21>:
     adf:	09 69 32 63 72 65 61 64 3a 20 52 65 61 64 20 64     .i2cread: Read d
     aef:	61 74 61 20 66 72 6f 6d 20 72 65 71 75 65 73 74     ata from request
     aff:	65 64 20 49 32 43 20 73 6c 61 76 65 20 64 65 76     ed I2C slave dev
     b0f:	69 63 65 0d 0a 00                                   ice...

00000b15 <_ZZ5usagevE3__c_20>:
     b15:	09 20 20 20 20 20 20 20 20 20 20 79 6f 75 20 63     .          you c
     b25:	61 6e 20 73 70 65 63 69 66 79 20 44 45 43 20 69     an specify DEC i
     b35:	66 20 79 6f 75 20 77 61 6e 74 2e 0d 0a 00           f you want....

00000b43 <_ZZ5usagevE3__c_19>:
     b43:	09 20 20 20 20 20 20 20 20 20 20 74 68 65 20 73     .          the s
     b53:	65 71 75 65 6e 63 65 20 6f 66 20 70 61 72 61 6d     equence of param
     b63:	65 74 65 72 73 20 69 73 20 6e 6f 74 20 69 6d 70     eters is not imp
     b73:	6f 72 74 61 6e 74 2c 20 6d 61 78 20 6e 75 6d 62     ortant, max numb
     b83:	65 72 20 6f 66 20 62 79 74 65 73 20 63 61 6e 20     er of bytes can 
     b93:	62 65 20 38 2c 20 64 65 66 61 75 6c 74 20 69 73     be 8, default is
     ba3:	20 48 45 58 20 74 79 70 65 0d 0a 00                  HEX type...

00000baf <_ZZ5usagevE3__c_18>:
     baf:	09 20 20 20 20 20 20 20 20 20 20 66 6f 72 6d 61     .          forma
     bbf:	74 3a 69 32 63 77 72 69 74 65 20 2d 73 3c 73 6c     t:i2cwrite -s<sl
     bcf:	61 76 65 5f 61 64 64 72 3e 20 2d 6e 3c 6e 6f 2e     ave_addr> -n<no.
     bdf:	20 6f 66 20 62 79 74 65 73 3e 20 2d 72 3c 72 65      of bytes> -r<re
     bef:	67 69 73 74 65 72 5f 61 64 64 72 3e 20 2d 68 3c     gister_addr> -h<
     bff:	64 61 74 61 62 79 74 65 31 2c 64 61 74 61 62 79     databyte1,databy
     c0f:	74 65 32 2e 2e 3e 20 5b 2d 74 48 45 58 3a 44 45     te2..> [-tHEX:DE
     c1f:	43 5d 0d 0a 00                                      C]...

00000c24 <_ZZ5usagevE3__c_17>:
     c24:	09 69 32 63 77 72 69 74 65 3a 20 57 72 69 74 65     .i2cwrite: Write
     c34:	20 64 61 74 61 20 74 6f 20 72 65 71 75 65 73 74      data to request
     c44:	65 64 20 49 32 43 20 73 6c 61 76 65 20 64 65 76     ed I2C slave dev
     c54:	69 63 65 0d 0a 00                                   ice...

00000c5a <_ZZ5usagevE3__c_16>:
     c5a:	09 20 20 20 20 20 20 20 20 20 20 66 6f 72 6d 61     .          forma
     c6a:	74 3a 20 69 32 63 70 69 6e 67 20 2d 73 3c 73 6c     t: i2cping -s<sl
     c7a:	61 76 65 5f 61 64 64 72 3e 0d 0a 00                 ave_addr>...

00000c86 <_ZZ5usagevE3__c_15>:
     c86:	09 69 32 63 70 69 6e 67 3a 20 43 68 65 63 6b 73     .i2cping: Checks
     c96:	20 69 66 20 61 20 72 65 71 75 65 73 74 65 64 20      if a requested 
     ca6:	49 32 43 20 73 6c 61 76 65 20 64 65 76 69 63 65     I2C slave device
     cb6:	20 69 73 20 72 65 73 70 6f 6e 73 69 76 65 20 6f      is responsive o
     cc6:	72 20 6e 6f 74 0d 0a 00                             r not...

00000cce <_ZZ5usagevE3__c_14>:
     cce:	09 69 32 63 73 63 61 6e 3a 20 53 63 61 6e 20 49     .i2cscan: Scan I
     cde:	32 43 20 62 75 73 20 66 6f 72 20 61 6c 6c 20 64     2C bus for all d
     cee:	65 76 69 63 65 73 0d 0a 00                          evices...

00000cf7 <_ZZ5usagevE3__c_13>:
     cf7:	09 73 74 72 65 61 6d 53 3a 20 53 74 6f 70 20 61     .streamS: Stop a
     d07:	6c 6c 20 73 74 72 65 61 6d 73 0d 0a 00              ll streams...

00000d14 <_ZZ5usagevE3__c_12>:
     d14:	09 73 74 72 65 61 6d 50 58 3a 20 63 6f 6e 74 69     .streamPX: conti
     d24:	6e 75 6f 75 73 6c 79 20 53 74 72 65 61 6d 20 74     nuously Stream t
     d34:	68 65 20 56 61 6c 75 65 20 6f 66 20 50 4f 52 54     he Value of PORT
     d44:	20 58 2c 20 77 68 65 72 65 20 58 20 63 61 6e 20      X, where X can 
     d54:	62 65 20 42 2c 20 43 20 6f 72 20 44 20 69 6e 20     be B, C or D in 
     d64:	48 45 58 0d 0a 00                                   HEX...

00000d6a <_ZZ5usagevE3__c_11>:
     d6a:	09 73 74 72 65 61 6d 41 58 3a 20 63 6f 6e 74 69     .streamAX: conti
     d7a:	6e 75 6f 75 73 6c 79 20 53 74 72 65 61 6d 20 74     nuously Stream t
     d8a:	68 65 20 64 61 74 61 20 6f 66 20 61 6e 61 6c 6f     he data of analo
     d9a:	67 20 50 69 6e 20 58 0d 0a 00                       g Pin X...

00000da4 <_ZZ5usagevE3__c_10>:
     da4:	09 73 74 72 65 61 6d 44 58 3a 20 63 6f 6e 74 69     .streamDX: conti
     db4:	6e 75 6f 75 73 6c 79 20 53 74 72 65 61 6d 20 74     nuously Stream t
     dc4:	68 65 20 73 74 61 74 65 20 6f 66 20 64 69 67 69     he state of digi
     dd4:	74 61 6c 20 50 69 6e 20 58 0d 0a 00                 tal Pin X...

00000de0 <_ZZ5usagevE3__c_9>:
     de0:	09 74 6f 67 58 3a 20 74 6f 67 67 6c 65 20 58 20     .togX: toggle X 
     df0:	70 69 6e 20 64 69 67 69 74 61 6c 20 6f 75 74 70     pin digital outp
     e00:	75 74 0d 0a 00                                      ut...

00000e05 <_ZZ5usagevE3__c_8>:
     e05:	09 61 72 65 66 58 3a 20 73 65 74 20 61 6e 61 6c     .arefX: set anal
     e15:	6f 67 20 72 65 66 65 72 65 6e 63 65 2c 20 61 72     og reference, ar
     e25:	65 66 69 3a 69 6e 74 65 72 6e 61 6c 2c 20 61 72     efi:internal, ar
     e35:	65 66 78 3a 65 78 74 65 72 6e 61 6c 2c 20 61 72     efx:external, ar
     e45:	65 66 76 3a 76 63 63 0d 0a 00                       efv:vcc...

00000e4f <_ZZ5usagevE3__c_7>:
     e4f:	09 61 67 65 74 58 3a 20 67 65 74 20 58 20 70 69     .agetX: get X pi
     e5f:	6e 20 61 6e 61 6c 6f 67 20 56 61 6c 75 65 0d 0a     n analog Value..
	...

00000e70 <_ZZ5usagevE3__c_6>:
     e70:	09 70 77 6d 66 58 20 59 3a 20 73 65 74 20 70 77     .pwmfX Y: set pw
     e80:	6d 20 66 72 65 71 75 65 6e 63 79 20 64 69 76 69     m frequency divi
     e90:	73 6f 72 20 6f 6e 20 58 20 70 69 6e 20 6f 66 20     sor on X pin of 
     ea0:	56 61 6c 75 65 20 59 5b 31 7c 38 7c 33 32 7c 36     Value Y[1|8|32|6
     eb0:	34 7c 31 32 38 7c 32 35 36 7c 31 30 32 34 5d 0d     4|128|256|1024].
     ec0:	0a 00                                               ..

00000ec2 <_ZZ5usagevE3__c_5>:
     ec2:	09 70 77 6d 76 58 20 59 3a 20 73 65 74 20 70 77     .pwmvX Y: set pw
     ed2:	6d 20 6f 6e 20 58 20 70 69 6e 20 6f 66 20 56 61     m on X pin of Va
     ee2:	6c 75 65 20 59 28 30 2d 32 35 35 29 0d 0a 00        lue Y(0-255)...

00000ef1 <_ZZ5usagevE3__c_4>:
     ef1:	09 67 65 74 58 3a 20 67 65 74 20 58 20 70 69 6e     .getX: get X pin
     f01:	20 64 69 67 69 74 61 6c 20 56 61 6c 75 65 0d 0a      digital Value..
	...

00000f12 <_ZZ5usagevE3__c_3>:
     f12:	09 73 65 74 70 58 3a 20 53 65 74 20 58 20 70 69     .setpX: Set X pi
     f22:	6e 20 69 6e 70 75 74 20 50 75 6c 6c 2d 75 70 0d     n input Pull-up.
     f32:	0a 00                                               ..

00000f34 <_ZZ5usagevE3__c_2>:
     f34:	09 73 65 74 69 58 3a 20 53 65 74 20 58 20 70 69     .setiX: Set X pi
     f44:	6e 20 69 6e 70 75 74 0d 0a 00                       n input...

00000f4e <_ZZ5usagevE3__c_1>:
     f4e:	09 73 65 74 6c 58 3a 20 53 65 74 20 58 20 70 69     .setlX: Set X pi
     f5e:	6e 20 4c 6f 77 0d 0a 00                             n Low...

00000f66 <_ZZ5usagevE3__c_0>:
     f66:	09 73 65 74 68 58 3a 20 53 65 74 20 58 20 70 69     .sethX: Set X pi
     f76:	6e 20 48 69 67 68 0d 0a 00                          n High...

00000f7f <_ZZ5usagevE3__c>:
     f7f:	44 44 41 54 20 50 6c 61 74 66 6f 72 6d 20 0d 0a     DDAT Platform ..
     f8f:	55 73 61 67 65 3a 0d 0a 00                          Usage:...

00000f98 <_ZZ13readSerialCmdvE3__c_83>:
     f98:	45 52 52 4f 52 28 21 29 00                          ERROR(!).

00000fa1 <_ZZ13readSerialCmdvE3__c_82>:
     fa1:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00000fa9 <_ZZ13readSerialCmdvE3__c_81>:
     fa9:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00000fb1 <_ZZ13readSerialCmdvE3__c_80>:
     fb1:	44 61 74 61 20 52 65 61 64 3a 0d 0a 00              Data Read:...

00000fbe <_ZZ13readSerialCmdvE3__c_79>:
     fbe:	45 52 52 4f 52 21 20 43 61 6e 6e 6f 74 20 50 72     ERROR! Cannot Pr
     fce:	6f 63 65 73 73 20 6d 6f 72 65 20 74 68 61 6e 20     ocess more than 
     fde:	38 20 62 79 74 65 73 20 69 6e 20 6f 6e 65 20 73     8 bytes in one s
     fee:	68 6f 74 2e 00                                      hot..

00000ff3 <_ZZ13readSerialCmdvE3__c_78>:
     ff3:	45 52 52 4f 52 21 20 45 6e 61 62 6c 65 20 53 50     ERROR! Enable SP
    1003:	49 20 66 69 72 73 74 00                             I first.

0000100b <_ZZ13readSerialCmdvE3__c_77>:
    100b:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001013 <_ZZ13readSerialCmdvE3__c_76>:
    1013:	44 61 74 61 20 53 65 6e 74 00                       Data Sent.

0000101d <_ZZ13readSerialCmdvE3__c_75>:
    101d:	45 52 52 4f 52 21 20 43 61 6e 6e 6f 74 20 50 72     ERROR! Cannot Pr
    102d:	6f 63 65 73 73 20 6d 6f 72 65 20 74 68 61 6e 20     ocess more than 
    103d:	38 20 62 79 74 65 73 20 69 6e 20 6f 6e 65 20 73     8 bytes in one s
    104d:	68 6f 74 2e 00                                      hot..

00001052 <_ZZ13readSerialCmdvE3__c_74>:
    1052:	45 52 52 4f 52 21 20 42 79 74 65 20 43 6f 75 6e     ERROR! Byte Coun
    1062:	74 20 64 6f 65 73 6e 27 74 20 6d 61 74 63 68 20     t doesn't match 
    1072:	6e 75 6d 62 65 72 20 6f 66 20 62 79 74 65 73 00     number of bytes.

00001082 <_ZZ13readSerialCmdvE3__c_73>:
    1082:	45 52 52 4f 52 21 20 45 6e 61 62 6c 65 20 53 50     ERROR! Enable SP
    1092:	49 20 66 69 72 73 74 00                             I first.

0000109a <_ZZ13readSerialCmdvE3__c_72>:
    109a:	45 52 52 4f 52 5f 32 00                             ERROR_2.

000010a2 <_ZZ13readSerialCmdvE3__c_71>:
    10a2:	53 50 49 20 44 69 73 61 62 6c 65 64 00              SPI Disabled.

000010af <_ZZ13readSerialCmdvE3__c_70>:
    10af:	53 50 49 20 45 6e 61 62 6c 65 64 00                 SPI Enabled.

000010bb <_ZZ13readSerialCmdvE3__c_69>:
    10bb:	45 52 52 4f 52 5f 31 00                             ERROR_1.

000010c3 <_ZZ13readSerialCmdvE3__c_68>:
    10c3:	42 61 63 6b 73 70 61 63 65 20 64 65 74 65 63 74     Backspace detect
    10d3:	69 6f 6e 20 44 69 73 61 62 6c 65 64 00              ion Disabled.

000010e0 <_ZZ13readSerialCmdvE3__c_67>:
    10e0:	42 61 63 6b 73 70 61 63 65 20 64 65 74 65 63 74     Backspace detect
    10f0:	69 6f 6e 20 45 6e 61 62 6c 65 64 00                 ion Enabled.

000010fc <_ZZ13readSerialCmdvE3__c_66>:
    10fc:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001104 <_ZZ13readSerialCmdvE3__c_65>:
    1104:	43 61 73 65 20 53 65 6e 73 69 74 69 76 69 74 79     Case Sensitivity
    1114:	20 44 69 73 61 62 6c 65 64 00                        Disabled.

0000111e <_ZZ13readSerialCmdvE3__c_64>:
    111e:	43 61 73 65 20 53 65 6e 73 69 74 69 76 69 74 79     Case Sensitivity
    112e:	20 45 6e 61 62 6c 65 64 00                           Enabled.

00001137 <_ZZ13readSerialCmdvE3__c_63>:
    1137:	20 44 65 76 69 63 65 73 20 46 6f 75 6e 64 2e 00      Devices Found..

00001147 <_ZZ13readSerialCmdvE3__c_62>:
    1147:	0d 0a 53 63 61 6e 20 43 6f 6d 70 6c 65 74 65 2e     ..Scan Complete.
	...

00001158 <_ZZ13readSerialCmdvE3__c_61>:
    1158:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 3a 00     Device Address:.

00001168 <_ZZ13readSerialCmdvE3__c_60>:
    1168:	53 63 61 6e 6e 69 6e 67 20 49 32 43 20 62 75 73     Scanning I2C bus
    1178:	2e 2e 2e 00                                         ....

0000117c <_ZZ13readSerialCmdvE3__c_59>:
    117c:	44 65 76 69 63 65 20 4e 6f 74 20 52 65 73 70 6f     Device Not Respo
    118c:	6e 64 69 6e 67 20 74 6f 20 50 69 6e 67 00           nding to Ping.

0000119a <_ZZ13readSerialCmdvE3__c_58>:
    119a:	44 65 76 69 63 65 20 52 65 73 70 6f 6e 64 65 64     Device Responded
    11aa:	20 74 6f 20 50 69 6e 67 00                           to Ping.

000011b3 <_ZZ13readSerialCmdvE3__c_57>:
    11b3:	45 52 52 4f 52 5f 32 00                             ERROR_2.

000011bb <_ZZ13readSerialCmdvE3__c_56>:
    11bb:	45 52 52 4f 52 5f 33 00                             ERROR_3.

000011c3 <_ZZ13readSerialCmdvE3__c_55>:
    11c3:	44 61 74 61 20 52 65 61 64 3a 0d 0a 00              Data Read:...

000011d0 <_ZZ13readSerialCmdvE3__c_54>:
    11d0:	53 74 61 74 75 73 3a 20 00                          Status: .

000011d9 <_ZZ13readSerialCmdvE3__c_53>:
    11d9:	45 52 52 4f 52 21 20 44 65 76 69 63 65 20 4e 6f     ERROR! Device No
    11e9:	74 20 46 6f 75 6e 64 2f 52 65 73 70 6f 64 69 6e     t Found/Respodin
    11f9:	67 00                                               g.

000011fb <_ZZ13readSerialCmdvE3__c_52>:
    11fb:	45 52 52 4f 52 21 20 43 61 6e 6e 6f 74 20 72 65     ERROR! Cannot re
    120b:	61 64 20 6d 6f 72 65 20 74 68 61 6e 20 38 20 62     ad more than 8 b
    121b:	79 74 65 73 20 69 6e 20 6f 6e 65 20 73 68 6f 74     ytes in one shot
    122b:	2e 00                                               ..

0000122d <_ZZ13readSerialCmdvE3__c_51>:
    122d:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001235 <_ZZ13readSerialCmdvE3__c_50>:
    1235:	44 61 74 61 20 57 72 69 74 74 65 6e 20 53 75 63     Data Written Suc
    1245:	63 65 73 73 66 75 6c 6c 79 00                       cessfully.

0000124f <_ZZ13readSerialCmdvE3__c_49>:
    124f:	53 74 61 74 75 73 3a 20 00                          Status: .

00001258 <_ZZ13readSerialCmdvE3__c_48>:
    1258:	45 52 52 4f 52 21 20 44 65 76 69 63 65 20 4e 6f     ERROR! Device No
    1268:	74 20 46 6f 75 6e 64 2f 52 65 73 70 6f 64 69 6e     t Found/Respodin
    1278:	67 00                                               g.

0000127a <_ZZ13readSerialCmdvE3__c_47>:
    127a:	45 52 52 4f 52 21 20 42 79 74 65 20 43 6f 75 6e     ERROR! Byte Coun
    128a:	74 20 64 6f 65 73 6e 27 74 20 6d 61 74 63 68 20     t doesn't match 
    129a:	6e 75 6d 62 65 72 20 6f 66 20 62 79 74 65 73 00     number of bytes.

000012aa <_ZZ13readSerialCmdvE3__c_46>:
    12aa:	45 52 52 4f 52 5f 32 00                             ERROR_2.

000012b2 <_ZZ13readSerialCmdvE3__c_45>:
    12b2:	49 4e 43 4c 55 44 49 4e 47 20 57 48 49 54 45 20     INCLUDING WHITE 
    12c2:	53 50 41 43 45 00                                   SPACE.

000012c8 <_ZZ13readSerialCmdvE3__c_44>:
    12c8:	45 58 43 4c 55 44 49 4e 47 20 57 48 49 54 45 20     EXCLUDING WHITE 
    12d8:	53 50 41 43 45 00                                   SPACE.

000012de <_ZZ13readSerialCmdvE3__c_43>:
    12de:	54 65 73 74 20 53 75 63 63 65 73 73 00              Test Success.

000012eb <_ZZ13readSerialCmdvE3__c_42>:
    12eb:	68 65 6c 6c 6f 00                                   hello.

000012f1 <_ZZ13readSerialCmdvE3__c_41>:
    12f1:	45 52 52 4f 52 5f 33 00                             ERROR_3.

000012f9 <_ZZ13readSerialCmdvE3__c_40>:
    12f9:	45 52 52 4f 52 5f 34 00                             ERROR_4.

00001301 <_ZZ13readSerialCmdvE3__c_39>:
    1301:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001309 <_ZZ13readSerialCmdvE3__c_38>:
    1309:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001311 <_ZZ13readSerialCmdvE3__c_37>:
    1311:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001319 <_ZZ13readSerialCmdvE3__c_36>:
    1319:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001321 <_ZZ13readSerialCmdvE3__c_35>:
    1321:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001329 <_ZZ13readSerialCmdvE3__c_34>:
    1329:	56 43 43 00                                         VCC.

0000132d <_ZZ13readSerialCmdvE3__c_33>:
    132d:	45 58 54 45 52 4e 41 4c 00                          EXTERNAL.

00001336 <_ZZ13readSerialCmdvE3__c_32>:
    1336:	49 4e 54 45 52 4e 41 4c 00                          INTERNAL.

0000133f <_ZZ13readSerialCmdvE3__c_31>:
    133f:	41 4e 41 4c 4f 47 20 52 45 46 00                    ANALOG REF.

0000134a <_ZZ13readSerialCmdvE3__c_30>:
    134a:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001352 <_ZZ13readSerialCmdvE3__c_29>:
    1352:	50 57 4d 46 20 00                                   PWMF .

00001358 <_ZZ13readSerialCmdvE3__c_28>:
    1358:	45 52 52 4f 52 5f 33 00                             ERROR_3.

00001360 <_ZZ13readSerialCmdvE3__c_27>:
    1360:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001368 <_ZZ13readSerialCmdvE3__c_26>:
    1368:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001370 <_ZZ13readSerialCmdvE3__c_25>:
    1370:	50 57 4d 20 00                                      PWM .

00001375 <_ZZ13readSerialCmdvE3__c_23>:
    1375:	45 52 52 4f 52 5f 32 00                             ERROR_2.

0000137d <_ZZ13readSerialCmdvE3__c_22>:
    137d:	45 52 52 4f 52 5f 31 00                             ERROR_1.

00001385 <_ZZ13readSerialCmdvE3__c_21>:
    1385:	41 4e 41 4c 4f 47 20 00                             ANALOG .

0000138d <_ZZ13readSerialCmdvE3__c_20>:
    138d:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001395 <_ZZ13readSerialCmdvE3__c_19>:
    1395:	45 52 52 4f 52 5f 31 00                             ERROR_1.

0000139d <_ZZ13readSerialCmdvE3__c_18>:
    139d:	4c 4f 57 00                                         LOW.

000013a1 <_ZZ13readSerialCmdvE3__c_17>:
    13a1:	48 49 47 48 00                                      HIGH.

000013a6 <_ZZ13readSerialCmdvE3__c_16>:
    13a6:	53 54 41 54 45 20 00                                STATE .

000013ad <_ZZ13readSerialCmdvE3__c_15>:
    13ad:	47 50 49 4f 20 00                                   GPIO .

000013b3 <_ZZ13readSerialCmdvE3__c_14>:
    13b3:	45 52 52 4f 52 5f 32 00                             ERROR_2.

000013bb <_ZZ13readSerialCmdvE3__c_13>:
    13bb:	45 52 52 4f 52 5f 31 00                             ERROR_1.

000013c3 <_ZZ13readSerialCmdvE3__c_12>:
    13c3:	54 4f 47 47 4c 45 44 20 00                          TOGGLED .

000013cc <_ZZ13readSerialCmdvE3__c_11>:
    13cc:	47 50 49 4f 20 00                                   GPIO .

000013d2 <_ZZ13readSerialCmdvE3__c_10>:
    13d2:	45 52 52 4f 52 5f 32 00                             ERROR_2.

000013da <_ZZ13readSerialCmdvE3__c_9>:
    13da:	45 52 52 4f 52 5f 31 00                             ERROR_1.

000013e2 <_ZZ13readSerialCmdvE3__c_8>:
    13e2:	45 52 52 4f 52 33 00                                ERROR3.

000013e9 <_ZZ13readSerialCmdvE3__c_7>:
    13e9:	43 4d 44 5f 45 52 00                                CMD_ER.

000013f0 <_ZZ13readSerialCmdvE3__c_6>:
    13f0:	49 4e 50 55 54 00                                   INPUT.

000013f6 <_ZZ13readSerialCmdvE3__c_5>:
    13f6:	50 5f 55 50 00                                      P_UP.

000013fb <_ZZ13readSerialCmdvE3__c_4>:
    13fb:	4c 4f 57 00                                         LOW.

000013ff <_ZZ13readSerialCmdvE3__c_3>:
    13ff:	48 49 47 48 00                                      HIGH.

00001404 <_ZZ13readSerialCmdvE3__c_2>:
    1404:	53 45 54 20 00                                      SET .

00001409 <_ZZ13readSerialCmdvE3__c_1>:
    1409:	47 50 49 4f 20 00                                   GPIO .

0000140f <_ZZ13readSerialCmdvE3__c_0>:
    140f:	45 52 52 4f 52 5f 32 00                             ERROR_2.

00001417 <_ZZ13readSerialCmdvE3__c>:
    1417:	45 52 52 4f 52 5f 31 00                             ERROR_1.

0000141f <_ZZ12initPlatformvE3__c_1>:
    141f:	20 20 50 4c 41 54 46 4f 52 4d 00                      PLATFORM.

0000142a <_ZZ12initPlatformvE3__c_0>:
    142a:	20 20 20 20 44 44 41 54 00                              DDAT.

00001433 <_ZZ12initPlatformvE3__c>:
    1433:	44 44 41 54 5f 49 4e 49 54 49 41 4c 49 53 45 44     DDAT_INITIALISED
    1443:	0d 0a 00                                            ...

00001446 <_ZL5cmd38>:
    1446:	70 77 6d 66 00                                      pwmf.

0000144b <_ZL5cmd37>:
    144b:	70 77 6d 76 00                                      pwmv.

00001450 <_ZL5cmd36>:
    1450:	72 65 73 65 74 00                                   reset.

00001456 <_ZL5cmd35>:
    1456:	73 70 69 5f 64 69 73 00                             spi_dis.

0000145e <_ZL5cmd34>:
    145e:	73 70 69 5f 65 6e 00                                spi_en.

00001465 <_ZL5cmd33>:
    1465:	73 70 69 5f 72 65 61 64 00                          spi_read.

0000146e <_ZL5cmd32>:
    146e:	73 70 69 5f 63 73 6c 00                             spi_csl.

00001476 <_ZL5cmd31>:
    1476:	73 70 69 5f 63 73 68 00                             spi_csh.

0000147e <_ZL5cmd30>:
    147e:	73 70 69 5f 77 72 69 74 65 00                       spi_write.

00001488 <_ZL5cmd29>:
    1488:	73 70 69 5f 63 6f 6e 66 69 67 00                    spi_config.

00001493 <_ZL5cmd28>:
    1493:	62 73 70 61 63 65 5f 64 00                          bspace_d.

0000149c <_ZL5cmd27>:
    149c:	62 73 70 61 63 65 5f 65 00                          bspace_e.

000014a5 <_ZL5cmd26>:
    14a5:	63 61 73 65 5f 64 00                                case_d.

000014ac <_ZL5cmd25>:
    14ac:	63 61 73 65 5f 65 00                                case_e.

000014b3 <_ZL5cmd24>:
    14b3:	69 32 63 73 63 61 6e 00                             i2cscan.

000014bb <_ZL5cmd23>:
    14bb:	69 32 63 70 69 6e 67 00                             i2cping.

000014c3 <_ZL5cmd22>:
    14c3:	69 32 63 72 65 61 64 00                             i2cread.

000014cb <_ZL5cmd21>:
    14cb:	69 32 63 77 72 69 74 65 00                          i2cwrite.

000014d4 <_ZL5cmd19>:
    14d4:	77 73 70 72 00                                      wspr.

000014d9 <_ZL5cmd18>:
    14d9:	75 64 69 73 00                                      udis.

000014de <_ZL5cmd16>:
    14de:	73 6e 6f 6f 70 65 00                                snoope.

000014e5 <_ZL5cmd15>:
    14e5:	61 74 64 65 00                                      atde.

000014ea <_ZL5cmd14>:
    14ea:	68 65 6c 70 00                                      help.

000014ef <_ZL5cmd13>:
    14ef:	61 74 65 00                                         ate.

000014f3 <_ZL5cmd11>:
    14f3:	74 6f 67 00                                         tog.

000014f7 <_ZL5cmd10>:
    14f7:	73 74 72 65 61 6d 00                                stream.

000014fe <_ZL4cmd9>:
    14fe:	61 67 65 74 00                                      aget.

00001503 <_ZL4cmd8>:
    1503:	61 72 65 66 00                                      aref.

00001508 <_ZL4cmd5>:
    1508:	67 65 74 00                                         get.

0000150c <_ZL4cmd4>:
    150c:	73 65 74 00                                         set.

00001510 <_ZL4cmd3>:
    1510:	73 68 6f 77 00                                      show.

00001515 <_ZL4cmd2>:
    1515:	74 65 73 74 00                                      test.

0000151a <_ZL4cmd1>:
    151a:	68 65 6c 6c 6f 00                                   hello.

00001520 <port_to_mode_PGM>:
    1520:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000152a <port_to_output_PGM>:
    152a:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00001534 <port_to_input_PGM>:
    1534:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000153e <digital_pin_to_port_PGM>:
    153e:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    154e:	03 03 03 03                                         ....

00001552 <digital_pin_to_bit_mask_PGM>:
    1552:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1562:	04 08 10 20                                         ... 

00001566 <digital_pin_to_timer_PGM>:
    1566:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
    1576:	00 00 00 00                                         ....

0000157a <__ctors_start>:
    157a:	6a 16       	cp	r6, r26
    157c:	f9 1f       	adc	r31, r25

0000157e <__ctors_end>:
    157e:	11 24       	eor	r1, r1
    1580:	1f be       	out	0x3f, r1	; 63
    1582:	cf ef       	ldi	r28, 0xFF	; 255
    1584:	d8 e0       	ldi	r29, 0x08	; 8
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	cd bf       	out	0x3d, r28	; 61

0000158a <__do_copy_data>:
    158a:	13 e0       	ldi	r17, 0x03	; 3
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	e6 e0       	ldi	r30, 0x06	; 6
    1592:	fc e5       	ldi	r31, 0x5C	; 92
    1594:	02 c0       	rjmp	.+4      	; 0x159a <__do_copy_data+0x10>
    1596:	05 90       	lpm	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	a8 3a       	cpi	r26, 0xA8	; 168
    159c:	b1 07       	cpc	r27, r17
    159e:	d9 f7       	brne	.-10     	; 0x1596 <__do_copy_data+0xc>

000015a0 <__do_clear_bss>:
    15a0:	24 e0       	ldi	r18, 0x04	; 4
    15a2:	a8 ea       	ldi	r26, 0xA8	; 168
    15a4:	b3 e0       	ldi	r27, 0x03	; 3
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <.do_clear_bss_start>

000015a8 <.do_clear_bss_loop>:
    15a8:	1d 92       	st	X+, r1

000015aa <.do_clear_bss_start>:
    15aa:	a3 3f       	cpi	r26, 0xF3	; 243
    15ac:	b2 07       	cpc	r27, r18
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <.do_clear_bss_loop>

000015b0 <__do_global_ctors>:
    15b0:	1a e0       	ldi	r17, 0x0A	; 10
    15b2:	cf eb       	ldi	r28, 0xBF	; 191
    15b4:	da e0       	ldi	r29, 0x0A	; 10
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <__do_global_ctors+0x10>
    15b8:	21 97       	sbiw	r28, 0x01	; 1
    15ba:	fe 01       	movw	r30, r28
    15bc:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__tablejump2__>
    15c0:	cd 3b       	cpi	r28, 0xBD	; 189
    15c2:	d1 07       	cpc	r29, r17
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__do_global_ctors+0x8>
    15c6:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <main>
    15ca:	0c 94 01 2e 	jmp	0x5c02	; 0x5c02 <_exit>

000015ce <__bad_interrupt>:
    15ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000015d2 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    _height = HEIGHT;
    break;
   case 1:
   case 3:
    _width  = HEIGHT;
    _height = WIDTH;
    15d2:	2f 92       	push	r2
    15d4:	3f 92       	push	r3
    15d6:	4f 92       	push	r4
    15d8:	5f 92       	push	r5
    15da:	6f 92       	push	r6
    15dc:	7f 92       	push	r7
    15de:	8f 92       	push	r8
    15e0:	9f 92       	push	r9
    15e2:	af 92       	push	r10
    15e4:	bf 92       	push	r11
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x26>
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <_ZN12Adafruit_GFX8drawLineEiiiij+0x28>
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <_ZN12Adafruit_GFX8drawLineEiiiij+0x2a>
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	5c 01       	movw	r10, r24
    1602:	7e 83       	std	Y+6, r23	; 0x06
    1604:	6d 83       	std	Y+5, r22	; 0x05
    1606:	6a 01       	movw	r12, r20
    1608:	49 01       	movw	r8, r18
    160a:	c8 01       	movw	r24, r16
    160c:	fa 82       	std	Y+2, r15	; 0x02
    160e:	e9 82       	std	Y+1, r14	; 0x01
    1610:	98 01       	movw	r18, r16
    1612:	24 1b       	sub	r18, r20
    1614:	35 0b       	sbc	r19, r21
    1616:	29 01       	movw	r4, r18
    1618:	22 f4       	brpl	.+8      	; 0x1622 <_ZN12Adafruit_GFX8drawLineEiiiij+0x50>
    161a:	44 24       	eor	r4, r4
    161c:	55 24       	eor	r5, r5
    161e:	42 1a       	sub	r4, r18
    1620:	53 0a       	sbc	r5, r19
    1622:	94 01       	movw	r18, r8
    1624:	4d 81       	ldd	r20, Y+5	; 0x05
    1626:	5e 81       	ldd	r21, Y+6	; 0x06
    1628:	24 1b       	sub	r18, r20
    162a:	35 0b       	sbc	r19, r21
    162c:	79 01       	movw	r14, r18
    162e:	22 f4       	brpl	.+8      	; 0x1638 <_ZN12Adafruit_GFX8drawLineEiiiij+0x66>
    1630:	ee 24       	eor	r14, r14
    1632:	ff 24       	eor	r15, r15
    1634:	e2 1a       	sub	r14, r18
    1636:	f3 0a       	sbc	r15, r19
    1638:	e4 14       	cp	r14, r4
    163a:	f5 04       	cpc	r15, r5
    163c:	5c f4       	brge	.+22     	; 0x1654 <_ZN12Adafruit_GFX8drawLineEiiiij+0x82>
    163e:	38 2d       	mov	r19, r8
    1640:	29 2d       	mov	r18, r9
    1642:	4c 01       	movw	r8, r24
    1644:	83 2f       	mov	r24, r19
    1646:	92 2f       	mov	r25, r18
    1648:	3d 81       	ldd	r19, Y+5	; 0x05
    164a:	2e 81       	ldd	r18, Y+6	; 0x06
    164c:	de 82       	std	Y+6, r13	; 0x06
    164e:	cd 82       	std	Y+5, r12	; 0x05
    1650:	c3 2e       	mov	r12, r19
    1652:	d2 2e       	mov	r13, r18
    1654:	ad 81       	ldd	r26, Y+5	; 0x05
    1656:	be 81       	ldd	r27, Y+6	; 0x06
    1658:	8a 16       	cp	r8, r26
    165a:	9b 06       	cpc	r9, r27
    165c:	0c f0       	brlt	.+2      	; 0x1660 <_ZN12Adafruit_GFX8drawLineEiiiij+0x8e>
    165e:	5f c0       	rjmp	.+190    	; 0x171e <_ZN12Adafruit_GFX8drawLineEiiiij+0x14c>
    1660:	a8 19       	sub	r26, r8
    1662:	b9 09       	sbc	r27, r9
    1664:	bc 83       	std	Y+4, r27	; 0x04
    1666:	ab 83       	std	Y+3, r26	; 0x03
    1668:	96 01       	movw	r18, r12
    166a:	28 1b       	sub	r18, r24
    166c:	39 0b       	sbc	r19, r25
    166e:	19 01       	movw	r2, r18
    1670:	22 f4       	brpl	.+8      	; 0x167a <_ZN12Adafruit_GFX8drawLineEiiiij+0xa8>
    1672:	22 24       	eor	r2, r2
    1674:	33 24       	eor	r3, r3
    1676:	22 1a       	sub	r2, r18
    1678:	33 0a       	sbc	r3, r19
    167a:	6b 80       	ldd	r6, Y+3	; 0x03
    167c:	7c 80       	ldd	r7, Y+4	; 0x04
    167e:	77 20       	and	r7, r7
    1680:	1c f4       	brge	.+6      	; 0x1688 <_ZN12Adafruit_GFX8drawLineEiiiij+0xb6>
    1682:	bf ef       	ldi	r27, 0xFF	; 255
    1684:	6b 1a       	sub	r6, r27
    1686:	7b 0a       	sbc	r7, r27
    1688:	75 94       	asr	r7
    168a:	67 94       	ror	r6
    168c:	8c 15       	cp	r24, r12
    168e:	9d 05       	cpc	r25, r13
    1690:	1c f4       	brge	.+6      	; 0x1698 <_ZN12Adafruit_GFX8drawLineEiiiij+0xc6>
    1692:	01 e0       	ldi	r16, 0x01	; 1
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	02 c0       	rjmp	.+4      	; 0x169c <_ZN12Adafruit_GFX8drawLineEiiiij+0xca>
    1698:	0f ef       	ldi	r16, 0xFF	; 255
    169a:	1f ef       	ldi	r17, 0xFF	; 255
    169c:	2d 81       	ldd	r18, Y+5	; 0x05
    169e:	3e 81       	ldd	r19, Y+6	; 0x06
    16a0:	28 15       	cp	r18, r8
    16a2:	39 05       	cpc	r19, r9
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xd6>
    16a6:	5b c0       	rjmp	.+182    	; 0x175e <_ZN12Adafruit_GFX8drawLineEiiiij+0x18c>
    16a8:	6c 01       	movw	r12, r24
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9e 82       	std	Y+6, r9	; 0x06
    16b0:	8d 82       	std	Y+5, r8	; 0x05
    16b2:	89 2e       	mov	r8, r25
    16b4:	98 2e       	mov	r9, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    16b8:	0f ef       	ldi	r16, 0xFF	; 255
    16ba:	1f ef       	ldi	r17, 0xFF	; 255
    16bc:	e4 14       	cp	r14, r4
    16be:	f5 04       	cpc	r15, r5
    16c0:	74 f4       	brge	.+28     	; 0x16de <_ZN12Adafruit_GFX8drawLineEiiiij+0x10c>
    16c2:	d5 01       	movw	r26, r10
    16c4:	ed 91       	ld	r30, X+
    16c6:	fc 91       	ld	r31, X
    16c8:	04 80       	ldd	r0, Z+4	; 0x04
    16ca:	f5 81       	ldd	r31, Z+5	; 0x05
    16cc:	e0 2d       	mov	r30, r0
    16ce:	29 81       	ldd	r18, Y+1	; 0x01
    16d0:	3a 81       	ldd	r19, Y+2	; 0x02
    16d2:	4d 81       	ldd	r20, Y+5	; 0x05
    16d4:	5e 81       	ldd	r21, Y+6	; 0x06
    16d6:	b6 01       	movw	r22, r12
    16d8:	c5 01       	movw	r24, r10
    16da:	09 95       	icall
    16dc:	0d c0       	rjmp	.+26     	; 0x16f8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x126>
    16de:	d5 01       	movw	r26, r10
    16e0:	ed 91       	ld	r30, X+
    16e2:	fc 91       	ld	r31, X
    16e4:	04 80       	ldd	r0, Z+4	; 0x04
    16e6:	f5 81       	ldd	r31, Z+5	; 0x05
    16e8:	e0 2d       	mov	r30, r0
    16ea:	29 81       	ldd	r18, Y+1	; 0x01
    16ec:	3a 81       	ldd	r19, Y+2	; 0x02
    16ee:	a6 01       	movw	r20, r12
    16f0:	6d 81       	ldd	r22, Y+5	; 0x05
    16f2:	7e 81       	ldd	r23, Y+6	; 0x06
    16f4:	c5 01       	movw	r24, r10
    16f6:	09 95       	icall
    16f8:	62 18       	sub	r6, r2
    16fa:	73 08       	sbc	r7, r3
    16fc:	32 f4       	brpl	.+12     	; 0x170a <_ZN12Adafruit_GFX8drawLineEiiiij+0x138>
    16fe:	c0 0e       	add	r12, r16
    1700:	d1 1e       	adc	r13, r17
    1702:	2b 81       	ldd	r18, Y+3	; 0x03
    1704:	3c 81       	ldd	r19, Y+4	; 0x04
    1706:	62 0e       	add	r6, r18
    1708:	73 1e       	adc	r7, r19
    170a:	4d 81       	ldd	r20, Y+5	; 0x05
    170c:	5e 81       	ldd	r21, Y+6	; 0x06
    170e:	4f 5f       	subi	r20, 0xFF	; 255
    1710:	5f 4f       	sbci	r21, 0xFF	; 255
    1712:	5e 83       	std	Y+6, r21	; 0x06
    1714:	4d 83       	std	Y+5, r20	; 0x05
    1716:	84 16       	cp	r8, r20
    1718:	95 06       	cpc	r9, r21
    171a:	84 f6       	brge	.-96     	; 0x16bc <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    171c:	20 c0       	rjmp	.+64     	; 0x175e <_ZN12Adafruit_GFX8drawLineEiiiij+0x18c>
    171e:	d4 01       	movw	r26, r8
    1720:	2d 81       	ldd	r18, Y+5	; 0x05
    1722:	3e 81       	ldd	r19, Y+6	; 0x06
    1724:	a2 1b       	sub	r26, r18
    1726:	b3 0b       	sbc	r27, r19
    1728:	bc 83       	std	Y+4, r27	; 0x04
    172a:	ab 83       	std	Y+3, r26	; 0x03
    172c:	9c 01       	movw	r18, r24
    172e:	2c 19       	sub	r18, r12
    1730:	3d 09       	sbc	r19, r13
    1732:	19 01       	movw	r2, r18
    1734:	22 f4       	brpl	.+8      	; 0x173e <_ZN12Adafruit_GFX8drawLineEiiiij+0x16c>
    1736:	22 24       	eor	r2, r2
    1738:	33 24       	eor	r3, r3
    173a:	22 1a       	sub	r2, r18
    173c:	33 0a       	sbc	r3, r19
    173e:	6b 80       	ldd	r6, Y+3	; 0x03
    1740:	7c 80       	ldd	r7, Y+4	; 0x04
    1742:	77 20       	and	r7, r7
    1744:	1c f4       	brge	.+6      	; 0x174c <_ZN12Adafruit_GFX8drawLineEiiiij+0x17a>
    1746:	3f ef       	ldi	r19, 0xFF	; 255
    1748:	63 1a       	sub	r6, r19
    174a:	73 0a       	sbc	r7, r19
    174c:	75 94       	asr	r7
    174e:	67 94       	ror	r6
    1750:	c8 16       	cp	r12, r24
    1752:	d9 06       	cpc	r13, r25
    1754:	0c f0       	brlt	.+2      	; 0x1758 <_ZN12Adafruit_GFX8drawLineEiiiij+0x186>
    1756:	b0 cf       	rjmp	.-160    	; 0x16b8 <_ZN12Adafruit_GFX8drawLineEiiiij+0xe6>
    1758:	01 e0       	ldi	r16, 0x01	; 1
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	af cf       	rjmp	.-162    	; 0x16bc <_ZN12Adafruit_GFX8drawLineEiiiij+0xea>
    175e:	26 96       	adiw	r28, 0x06	; 6
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	3f 90       	pop	r3
    178c:	2f 90       	pop	r2
    178e:	08 95       	ret

00001790 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1790:	6f 92       	push	r6
    1792:	7f 92       	push	r7
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	ec 01       	movw	r28, r24
    17ae:	4b 01       	movw	r8, r22
    17b0:	5a 01       	movw	r10, r20
    17b2:	69 01       	movw	r12, r18
    17b4:	38 01       	movw	r6, r16
    17b6:	e8 81       	ld	r30, Y
    17b8:	f9 81       	ldd	r31, Y+1	; 0x01
    17ba:	02 84       	ldd	r0, Z+10	; 0x0a
    17bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    17be:	e0 2d       	mov	r30, r0
    17c0:	87 01       	movw	r16, r14
    17c2:	09 95       	icall
    17c4:	a5 01       	movw	r20, r10
    17c6:	46 0d       	add	r20, r6
    17c8:	57 1d       	adc	r21, r7
    17ca:	41 50       	subi	r20, 0x01	; 1
    17cc:	51 09       	sbc	r21, r1
    17ce:	e8 81       	ld	r30, Y
    17d0:	f9 81       	ldd	r31, Y+1	; 0x01
    17d2:	02 84       	ldd	r0, Z+10	; 0x0a
    17d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    17d6:	e0 2d       	mov	r30, r0
    17d8:	96 01       	movw	r18, r12
    17da:	b4 01       	movw	r22, r8
    17dc:	ce 01       	movw	r24, r28
    17de:	09 95       	icall
    17e0:	e8 81       	ld	r30, Y
    17e2:	f9 81       	ldd	r31, Y+1	; 0x01
    17e4:	00 84       	ldd	r0, Z+8	; 0x08
    17e6:	f1 85       	ldd	r31, Z+9	; 0x09
    17e8:	e0 2d       	mov	r30, r0
    17ea:	93 01       	movw	r18, r6
    17ec:	a5 01       	movw	r20, r10
    17ee:	b4 01       	movw	r22, r8
    17f0:	ce 01       	movw	r24, r28
    17f2:	09 95       	icall
    17f4:	c8 0c       	add	r12, r8
    17f6:	d9 1c       	adc	r13, r9
    17f8:	b6 01       	movw	r22, r12
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	71 09       	sbc	r23, r1
    17fe:	e8 81       	ld	r30, Y
    1800:	f9 81       	ldd	r31, Y+1	; 0x01
    1802:	00 84       	ldd	r0, Z+8	; 0x08
    1804:	f1 85       	ldd	r31, Z+9	; 0x09
    1806:	e0 2d       	mov	r30, r0
    1808:	93 01       	movw	r18, r6
    180a:	a5 01       	movw	r20, r10
    180c:	ce 01       	movw	r24, r28
    180e:	09 95       	icall
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	9f 90       	pop	r9
    1826:	8f 90       	pop	r8
    1828:	7f 90       	pop	r7
    182a:	6f 90       	pop	r6
    182c:	08 95       	ret

0000182e <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	24 0f       	add	r18, r20
    1838:	35 1f       	adc	r19, r21
    183a:	21 50       	subi	r18, 0x01	; 1
    183c:	31 09       	sbc	r19, r1
    183e:	dc 01       	movw	r26, r24
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	06 80       	ldd	r0, Z+6	; 0x06
    1846:	f7 81       	ldd	r31, Z+7	; 0x07
    1848:	e0 2d       	mov	r30, r0
    184a:	78 01       	movw	r14, r16
    184c:	89 01       	movw	r16, r18
    184e:	9b 01       	movw	r18, r22
    1850:	09 95       	icall
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	08 95       	ret

0000185c <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	26 0f       	add	r18, r22
    1866:	37 1f       	adc	r19, r23
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	31 09       	sbc	r19, r1
    186c:	dc 01       	movw	r26, r24
    186e:	ed 91       	ld	r30, X+
    1870:	fc 91       	ld	r31, X
    1872:	06 80       	ldd	r0, Z+6	; 0x06
    1874:	f7 81       	ldd	r31, Z+7	; 0x07
    1876:	e0 2d       	mov	r30, r0
    1878:	78 01       	movw	r14, r16
    187a:	8a 01       	movw	r16, r20
    187c:	09 95       	icall
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	08 95       	ret

00001888 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1888:	6f 92       	push	r6
    188a:	7f 92       	push	r7
    188c:	8f 92       	push	r8
    188e:	9f 92       	push	r9
    1890:	af 92       	push	r10
    1892:	bf 92       	push	r11
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	6c 01       	movw	r12, r24
    18a6:	eb 01       	movw	r28, r22
    18a8:	4a 01       	movw	r8, r20
    18aa:	58 01       	movw	r10, r16
    18ac:	37 01       	movw	r6, r14
    18ae:	7b 01       	movw	r14, r22
    18b0:	e2 0e       	add	r14, r18
    18b2:	f3 1e       	adc	r15, r19
    18b4:	6e 15       	cp	r22, r14
    18b6:	7f 05       	cpc	r23, r15
    18b8:	84 f4       	brge	.+32     	; 0x18da <_ZN12Adafruit_GFX8fillRectEiiiij+0x52>
    18ba:	d6 01       	movw	r26, r12
    18bc:	ed 91       	ld	r30, X+
    18be:	fc 91       	ld	r31, X
    18c0:	00 84       	ldd	r0, Z+8	; 0x08
    18c2:	f1 85       	ldd	r31, Z+9	; 0x09
    18c4:	e0 2d       	mov	r30, r0
    18c6:	83 01       	movw	r16, r6
    18c8:	95 01       	movw	r18, r10
    18ca:	a4 01       	movw	r20, r8
    18cc:	be 01       	movw	r22, r28
    18ce:	c6 01       	movw	r24, r12
    18d0:	09 95       	icall
    18d2:	21 96       	adiw	r28, 0x01	; 1
    18d4:	ce 15       	cp	r28, r14
    18d6:	df 05       	cpc	r29, r15
    18d8:	84 f3       	brlt	.-32     	; 0x18ba <_ZN12Adafruit_GFX8fillRectEiiiij+0x32>
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	9f 90       	pop	r9
    18f0:	8f 90       	pop	r8
    18f2:	7f 90       	pop	r7
    18f4:	6f 90       	pop	r6
    18f6:	08 95       	ret

000018f8 <_ZN12Adafruit_GFX10fillScreenEj>:
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	dc 01       	movw	r26, r24
    1902:	1a 96       	adiw	r26, 0x0a	; 10
    1904:	0d 91       	ld	r16, X+
    1906:	1c 91       	ld	r17, X
    1908:	1b 97       	sbiw	r26, 0x0b	; 11
    190a:	18 96       	adiw	r26, 0x08	; 8
    190c:	2d 91       	ld	r18, X+
    190e:	3c 91       	ld	r19, X
    1910:	19 97       	sbiw	r26, 0x09	; 9
    1912:	ed 91       	ld	r30, X+
    1914:	fc 91       	ld	r31, X
    1916:	06 84       	ldd	r0, Z+14	; 0x0e
    1918:	f7 85       	ldd	r31, Z+15	; 0x0f
    191a:	e0 2d       	mov	r30, r0
    191c:	7b 01       	movw	r14, r22
    191e:	40 e0       	ldi	r20, 0x00	; 0
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	70 e0       	ldi	r23, 0x00	; 0
    1926:	09 95       	icall
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	08 95       	ret

00001932 <_ZN12Adafruit_GFX13invertDisplayEh>:
    1932:	08 95       	ret

00001934 <_ZN12Adafruit_GFXC1Eii>:
    1934:	fc 01       	movw	r30, r24
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    193a:	87 e1       	ldi	r24, 0x17	; 23
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	80 83       	st	Z, r24
    1942:	75 83       	std	Z+5, r23	; 0x05
    1944:	64 83       	std	Z+4, r22	; 0x04
    1946:	57 83       	std	Z+7, r21	; 0x07
    1948:	46 83       	std	Z+6, r20	; 0x06
    194a:	71 87       	std	Z+9, r23	; 0x09
    194c:	60 87       	std	Z+8, r22	; 0x08
    194e:	53 87       	std	Z+11, r21	; 0x0b
    1950:	42 87       	std	Z+10, r20	; 0x0a
    1952:	15 8a       	std	Z+21, r1	; 0x15
    1954:	15 86       	std	Z+13, r1	; 0x0d
    1956:	14 86       	std	Z+12, r1	; 0x0c
    1958:	17 86       	std	Z+15, r1	; 0x0f
    195a:	16 86       	std	Z+14, r1	; 0x0e
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	84 8b       	std	Z+20, r24	; 0x14
    1960:	2f ef       	ldi	r18, 0xFF	; 255
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	33 8b       	std	Z+19, r19	; 0x13
    1966:	22 8b       	std	Z+18, r18	; 0x12
    1968:	31 8b       	std	Z+17, r19	; 0x11
    196a:	20 8b       	std	Z+16, r18	; 0x10
    196c:	86 8b       	std	Z+22, r24	; 0x16
    196e:	08 95       	ret

00001970 <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    1970:	2f 92       	push	r2
    1972:	3f 92       	push	r3
    1974:	4f 92       	push	r4
    1976:	5f 92       	push	r5
    1978:	6f 92       	push	r6
    197a:	7f 92       	push	r7
    197c:	8f 92       	push	r8
    197e:	9f 92       	push	r9
    1980:	af 92       	push	r10
    1982:	bf 92       	push	r11
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	61 97       	sbiw	r28, 0x11	; 17
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	cd bf       	out	0x3d, r28	; 61
    19a4:	dc 01       	movw	r26, r24
    19a6:	18 96       	adiw	r26, 0x08	; 8
    19a8:	ed 91       	ld	r30, X+
    19aa:	fc 91       	ld	r31, X
    19ac:	19 97       	sbiw	r26, 0x09	; 9
    19ae:	6e 17       	cp	r22, r30
    19b0:	7f 07       	cpc	r23, r31
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x46>
    19b4:	c3 c0       	rjmp	.+390    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    19b6:	1a 96       	adiw	r26, 0x0a	; 10
    19b8:	ed 91       	ld	r30, X+
    19ba:	fc 91       	ld	r31, X
    19bc:	1b 97       	sbiw	r26, 0x0b	; 11
    19be:	4e 17       	cp	r20, r30
    19c0:	5f 07       	cpc	r21, r31
    19c2:	0c f0       	brlt	.+2      	; 0x19c6 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x56>
    19c4:	bb c0       	rjmp	.+374    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    19c6:	ec 2d       	mov	r30, r12
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	fa 83       	std	Y+2, r31	; 0x02
    19cc:	e9 83       	std	Y+1, r30	; 0x01
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	a9 81       	ldd	r26, Y+1	; 0x01
    19d4:	ba 81       	ldd	r27, Y+2	; 0x02
    19d6:	ea 0f       	add	r30, r26
    19d8:	fb 1f       	adc	r31, r27
    19da:	ee 0f       	add	r30, r30
    19dc:	ff 1f       	adc	r31, r31
    19de:	e6 0f       	add	r30, r22
    19e0:	f7 1f       	adc	r31, r23
    19e2:	31 97       	sbiw	r30, 0x01	; 1
    19e4:	0a f4       	brpl	.+2      	; 0x19e8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    19e6:	aa c0       	rjmp	.+340    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    19e8:	fd 01       	movw	r30, r26
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e4 0f       	add	r30, r20
    19f8:	f5 1f       	adc	r31, r21
    19fa:	31 97       	sbiw	r30, 0x01	; 1
    19fc:	0a f4       	brpl	.+2      	; 0x1a00 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x90>
    19fe:	9e c0       	rjmp	.+316    	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    1a00:	cb 82       	std	Y+3, r12	; 0x03
    1a02:	fd 82       	std	Y+5, r15	; 0x05
    1a04:	ec 82       	std	Y+4, r14	; 0x04
    1a06:	18 01       	movw	r2, r16
    1a08:	5d 87       	std	Y+13, r21	; 0x0d
    1a0a:	4c 87       	std	Y+12, r20	; 0x0c
    1a0c:	5c 01       	movw	r10, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	c9 01       	movw	r24, r18
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	28 0f       	add	r18, r24
    1a1c:	39 1f       	adc	r19, r25
    1a1e:	4d 01       	movw	r8, r26
    1a20:	78 87       	std	Y+8, r23	; 0x08
    1a22:	6f 83       	std	Y+7, r22	; 0x07
    1a24:	7a 87       	std	Y+10, r23	; 0x0a
    1a26:	69 87       	std	Y+9, r22	; 0x09
    1a28:	1b 86       	std	Y+11, r1	; 0x0b
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	e6 1b       	sub	r30, r22
    1a2e:	f7 0b       	sbc	r31, r23
    1a30:	ff 87       	std	Y+15, r31	; 0x0f
    1a32:	ee 87       	std	Y+14, r30	; 0x0e
    1a34:	3a 01       	movw	r6, r20
    1a36:	f8 e0       	ldi	r31, 0x08	; 8
    1a38:	6f 0e       	add	r6, r31
    1a3a:	71 1c       	adc	r7, r1
    1a3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3e:	85 30       	cpi	r24, 0x05	; 5
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xd4>
    1a42:	72 c0       	rjmp	.+228    	; 0x1b28 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1b8>
    1a44:	ee 85       	ldd	r30, Y+14	; 0x0e
    1a46:	ff 85       	ldd	r31, Y+15	; 0x0f
    1a48:	af 81       	ldd	r26, Y+7	; 0x07
    1a4a:	b8 85       	ldd	r27, Y+8	; 0x08
    1a4c:	ea 0f       	add	r30, r26
    1a4e:	fb 1f       	adc	r31, r27
    1a50:	ea 58       	subi	r30, 0x8A	; 138
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	54 90       	lpm	r5, Z
    1a56:	69 c0       	rjmp	.+210    	; 0x1b2a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ba>
    1a58:	50 fe       	sbrs	r5, 0
    1a5a:	21 c0       	rjmp	.+66     	; 0x1a9e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x12e>
    1a5c:	bb 81       	ldd	r27, Y+3	; 0x03
    1a5e:	b1 30       	cpi	r27, 0x01	; 1
    1a60:	71 f4       	brne	.+28     	; 0x1a7e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x10e>
    1a62:	d5 01       	movw	r26, r10
    1a64:	ed 91       	ld	r30, X+
    1a66:	fc 91       	ld	r31, X
    1a68:	04 80       	ldd	r0, Z+4	; 0x04
    1a6a:	f5 81       	ldd	r31, Z+5	; 0x05
    1a6c:	e0 2d       	mov	r30, r0
    1a6e:	91 01       	movw	r18, r2
    1a70:	48 89       	ldd	r20, Y+16	; 0x10
    1a72:	59 89       	ldd	r21, Y+17	; 0x11
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	c5 01       	movw	r24, r10
    1a7a:	09 95       	icall
    1a7c:	37 c0       	rjmp	.+110    	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    1a7e:	d5 01       	movw	r26, r10
    1a80:	ed 91       	ld	r30, X+
    1a82:	fc 91       	ld	r31, X
    1a84:	06 84       	ldd	r0, Z+14	; 0x0e
    1a86:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a88:	e0 2d       	mov	r30, r0
    1a8a:	71 01       	movw	r14, r2
    1a8c:	09 81       	ldd	r16, Y+1	; 0x01
    1a8e:	1a 81       	ldd	r17, Y+2	; 0x02
    1a90:	98 01       	movw	r18, r16
    1a92:	a6 01       	movw	r20, r12
    1a94:	64 2d       	mov	r22, r4
    1a96:	7e 81       	ldd	r23, Y+6	; 0x06
    1a98:	c5 01       	movw	r24, r10
    1a9a:	09 95       	icall
    1a9c:	27 c0       	rjmp	.+78     	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    1a9e:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa0:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa2:	2e 16       	cp	r2, r30
    1aa4:	3f 06       	cpc	r3, r31
    1aa6:	11 f1       	breq	.+68     	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    1aa8:	fb 81       	ldd	r31, Y+3	; 0x03
    1aaa:	f1 30       	cpi	r31, 0x01	; 1
    1aac:	79 f4       	brne	.+30     	; 0x1acc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x15c>
    1aae:	d5 01       	movw	r26, r10
    1ab0:	ed 91       	ld	r30, X+
    1ab2:	fc 91       	ld	r31, X
    1ab4:	04 80       	ldd	r0, Z+4	; 0x04
    1ab6:	f5 81       	ldd	r31, Z+5	; 0x05
    1ab8:	e0 2d       	mov	r30, r0
    1aba:	2c 81       	ldd	r18, Y+4	; 0x04
    1abc:	3d 81       	ldd	r19, Y+5	; 0x05
    1abe:	48 89       	ldd	r20, Y+16	; 0x10
    1ac0:	59 89       	ldd	r21, Y+17	; 0x11
    1ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac4:	78 85       	ldd	r23, Y+8	; 0x08
    1ac6:	c5 01       	movw	r24, r10
    1ac8:	09 95       	icall
    1aca:	10 c0       	rjmp	.+32     	; 0x1aec <_ZN12Adafruit_GFX8drawCharEiihjjh+0x17c>
    1acc:	d5 01       	movw	r26, r10
    1ace:	ed 91       	ld	r30, X+
    1ad0:	fc 91       	ld	r31, X
    1ad2:	06 84       	ldd	r0, Z+14	; 0x0e
    1ad4:	f7 85       	ldd	r31, Z+15	; 0x0f
    1ad6:	e0 2d       	mov	r30, r0
    1ad8:	ec 80       	ldd	r14, Y+4	; 0x04
    1ada:	fd 80       	ldd	r15, Y+5	; 0x05
    1adc:	09 81       	ldd	r16, Y+1	; 0x01
    1ade:	1a 81       	ldd	r17, Y+2	; 0x02
    1ae0:	98 01       	movw	r18, r16
    1ae2:	a6 01       	movw	r20, r12
    1ae4:	64 2d       	mov	r22, r4
    1ae6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae8:	c5 01       	movw	r24, r10
    1aea:	09 95       	icall
    1aec:	56 94       	lsr	r5
    1aee:	c8 0c       	add	r12, r8
    1af0:	d9 1c       	adc	r13, r9
    1af2:	e8 89       	ldd	r30, Y+16	; 0x10
    1af4:	f9 89       	ldd	r31, Y+17	; 0x11
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	f9 8b       	std	Y+17, r31	; 0x11
    1afa:	e8 8b       	std	Y+16, r30	; 0x10
    1afc:	e6 15       	cp	r30, r6
    1afe:	f7 05       	cpc	r31, r7
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x194>
    1b02:	aa cf       	rjmp	.-172    	; 0x1a58 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe8>
    1b04:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b06:	ff 5f       	subi	r31, 0xFF	; 255
    1b08:	fb 87       	std	Y+11, r31	; 0x0b
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	88 0d       	add	r24, r8
    1b10:	99 1d       	adc	r25, r9
    1b12:	9a 87       	std	Y+10, r25	; 0x0a
    1b14:	89 87       	std	Y+9, r24	; 0x09
    1b16:	af 81       	ldd	r26, Y+7	; 0x07
    1b18:	b8 85       	ldd	r27, Y+8	; 0x08
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	b8 87       	std	Y+8, r27	; 0x08
    1b1e:	af 83       	std	Y+7, r26	; 0x07
    1b20:	f6 30       	cpi	r31, 0x06	; 6
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1b6>
    1b24:	8b cf       	rjmp	.-234    	; 0x1a3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xcc>
    1b26:	0a c0       	rjmp	.+20     	; 0x1b3c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1cc>
    1b28:	51 2c       	mov	r5, r1
    1b2a:	49 84       	ldd	r4, Y+9	; 0x09
    1b2c:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b2e:	be 83       	std	Y+6, r27	; 0x06
    1b30:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b32:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b34:	6f 01       	movw	r12, r30
    1b36:	f9 8b       	std	Y+17, r31	; 0x11
    1b38:	e8 8b       	std	Y+16, r30	; 0x10
    1b3a:	8e cf       	rjmp	.-228    	; 0x1a58 <_ZN12Adafruit_GFX8drawCharEiihjjh+0xe8>
    1b3c:	61 96       	adiw	r28, 0x11	; 17
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	6f 90       	pop	r6
    1b64:	5f 90       	pop	r5
    1b66:	4f 90       	pop	r4
    1b68:	3f 90       	pop	r3
    1b6a:	2f 90       	pop	r2
    1b6c:	08 95       	ret

00001b6e <_ZN12Adafruit_GFX5writeEh>:
    1b6e:	cf 92       	push	r12
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	6a 30       	cpi	r22, 0x0A	; 10
    1b7e:	79 f4       	brne	.+30     	; 0x1b9e <_ZN12Adafruit_GFX5writeEh+0x30>
    1b80:	fc 01       	movw	r30, r24
    1b82:	44 89       	ldd	r20, Z+20	; 0x14
    1b84:	26 85       	ldd	r18, Z+14	; 0x0e
    1b86:	37 85       	ldd	r19, Z+15	; 0x0f
    1b88:	f8 e0       	ldi	r31, 0x08	; 8
    1b8a:	4f 9f       	mul	r20, r31
    1b8c:	20 0d       	add	r18, r0
    1b8e:	31 1d       	adc	r19, r1
    1b90:	11 24       	eor	r1, r1
    1b92:	fc 01       	movw	r30, r24
    1b94:	37 87       	std	Z+15, r19	; 0x0f
    1b96:	26 87       	std	Z+14, r18	; 0x0e
    1b98:	15 86       	std	Z+13, r1	; 0x0d
    1b9a:	14 86       	std	Z+12, r1	; 0x0c
    1b9c:	3c c0       	rjmp	.+120    	; 0x1c16 <_ZN12Adafruit_GFX5writeEh+0xa8>
    1b9e:	6d 30       	cpi	r22, 0x0D	; 13
    1ba0:	d1 f1       	breq	.+116    	; 0x1c16 <_ZN12Adafruit_GFX5writeEh+0xa8>
    1ba2:	26 2f       	mov	r18, r22
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	ea 88       	ldd	r14, Y+18	; 0x12
    1ba8:	fb 88       	ldd	r15, Y+19	; 0x13
    1baa:	08 89       	ldd	r16, Y+16	; 0x10
    1bac:	19 89       	ldd	r17, Y+17	; 0x11
    1bae:	4e 85       	ldd	r20, Y+14	; 0x0e
    1bb0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1bb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bb6:	cc 88       	ldd	r12, Y+20	; 0x14
    1bb8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <_ZN12Adafruit_GFX8drawCharEiihjjh>
    1bbc:	2c 89       	ldd	r18, Y+20	; 0x14
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	82 0f       	add	r24, r18
    1bc8:	93 1f       	adc	r25, r19
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	4c 85       	ldd	r20, Y+12	; 0x0c
    1bd0:	5d 85       	ldd	r21, Y+13	; 0x0d
    1bd2:	84 0f       	add	r24, r20
    1bd4:	95 1f       	adc	r25, r21
    1bd6:	9d 87       	std	Y+13, r25	; 0x0d
    1bd8:	8c 87       	std	Y+12, r24	; 0x0c
    1bda:	4e 89       	ldd	r20, Y+22	; 0x16
    1bdc:	44 23       	and	r20, r20
    1bde:	d9 f0       	breq	.+54     	; 0x1c16 <_ZN12Adafruit_GFX5writeEh+0xa8>
    1be0:	4a ef       	ldi	r20, 0xFA	; 250
    1be2:	42 03       	mulsu	r20, r18
    1be4:	b0 01       	movw	r22, r0
    1be6:	43 9f       	mul	r20, r19
    1be8:	70 0d       	add	r23, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	48 85       	ldd	r20, Y+8	; 0x08
    1bee:	59 85       	ldd	r21, Y+9	; 0x09
    1bf0:	46 0f       	add	r20, r22
    1bf2:	57 1f       	adc	r21, r23
    1bf4:	48 17       	cp	r20, r24
    1bf6:	59 07       	cpc	r21, r25
    1bf8:	74 f4       	brge	.+28     	; 0x1c16 <_ZN12Adafruit_GFX5writeEh+0xa8>
    1bfa:	22 0f       	add	r18, r18
    1bfc:	33 1f       	adc	r19, r19
    1bfe:	22 0f       	add	r18, r18
    1c00:	33 1f       	adc	r19, r19
    1c02:	22 0f       	add	r18, r18
    1c04:	33 1f       	adc	r19, r19
    1c06:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c08:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c0a:	28 0f       	add	r18, r24
    1c0c:	39 1f       	adc	r19, r25
    1c0e:	3f 87       	std	Y+15, r19	; 0x0f
    1c10:	2e 87       	std	Y+14, r18	; 0x0e
    1c12:	1d 86       	std	Y+13, r1	; 0x0d
    1c14:	1c 86       	std	Y+12, r1	; 0x0c
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	1f 91       	pop	r17
    1c20:	0f 91       	pop	r16
    1c22:	ff 90       	pop	r15
    1c24:	ef 90       	pop	r14
    1c26:	cf 90       	pop	r12
    1c28:	08 95       	ret

00001c2a <_ZN12Adafruit_GFX9setCursorEii>:
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	75 87       	std	Z+13, r23	; 0x0d
    1c2e:	64 87       	std	Z+12, r22	; 0x0c
    1c30:	57 87       	std	Z+15, r21	; 0x0f
    1c32:	46 87       	std	Z+14, r20	; 0x0e
    1c34:	08 95       	ret

00001c36 <_ZN12Adafruit_GFX11setTextSizeEh>:
    1c36:	61 11       	cpse	r22, r1
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    1c3a:	61 e0       	ldi	r22, 0x01	; 1
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	64 8b       	std	Z+20, r22	; 0x14
    1c40:	08 95       	ret

00001c42 <_ZN12Adafruit_GFX12setTextColorEj>:
    1c42:	fc 01       	movw	r30, r24
    1c44:	73 8b       	std	Z+19, r23	; 0x13
    1c46:	62 8b       	std	Z+18, r22	; 0x12
    1c48:	71 8b       	std	Z+17, r23	; 0x11
    1c4a:	60 8b       	std	Z+16, r22	; 0x10
    1c4c:	08 95       	ret

00001c4e <_ZN12Adafruit_GFX11setTextWrapEh>:
    1c4e:	fc 01       	movw	r30, r24
    1c50:	66 8b       	std	Z+22, r22	; 0x16
    1c52:	08 95       	ret

00001c54 <_ZNK12Adafruit_GFX11getRotationEv>:
    1c54:	fc 01       	movw	r30, r24
    1c56:	85 89       	ldd	r24, Z+21	; 0x15
    1c58:	08 95       	ret

00001c5a <_ZNK12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
  return _width;
}
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	80 85       	ldd	r24, Z+8	; 0x08
    1c5e:	91 85       	ldd	r25, Z+9	; 0x09
    1c60:	08 95       	ret

00001c62 <_ZNK12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) const {
  return _height;
}
    1c62:	fc 01       	movw	r30, r24
    1c64:	82 85       	ldd	r24, Z+10	; 0x0a
    1c66:	93 85       	ldd	r25, Z+11	; 0x0b
    1c68:	08 95       	ret

00001c6a <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
	*/
	
	i2c_write(_i2caddr,control,&c,1);
   
//  }
}
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	fc 01       	movw	r30, r24
    1c70:	85 89       	ldd	r24, Z+21	; 0x15
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	71 f0       	breq	.+28     	; 0x1c92 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	e9 f0       	breq	.+58     	; 0x1cb4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x4a>
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x16>
    1c7e:	ca c0       	rjmp	.+404    	; 0x1e14 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1aa>
    1c80:	84 81       	ldd	r24, Z+4	; 0x04
    1c82:	95 81       	ldd	r25, Z+5	; 0x05
    1c84:	dc 01       	movw	r26, r24
    1c86:	a4 1b       	sub	r26, r20
    1c88:	b5 0b       	sbc	r27, r21
    1c8a:	ad 01       	movw	r20, r26
    1c8c:	41 50       	subi	r20, 0x01	; 1
    1c8e:	51 09       	sbc	r21, r1
    1c90:	25 c1       	rjmp	.+586    	; 0x1edc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x272>
    1c92:	84 81       	ldd	r24, Z+4	; 0x04
    1c94:	95 81       	ldd	r25, Z+5	; 0x05
    1c96:	dc 01       	movw	r26, r24
    1c98:	a6 1b       	sub	r26, r22
    1c9a:	b7 0b       	sbc	r27, r23
    1c9c:	bd 01       	movw	r22, r26
    1c9e:	86 81       	ldd	r24, Z+6	; 0x06
    1ca0:	97 81       	ldd	r25, Z+7	; 0x07
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	a4 1b       	sub	r26, r20
    1ca6:	b5 0b       	sbc	r27, r21
    1ca8:	ad 01       	movw	r20, r26
    1caa:	41 50       	subi	r20, 0x01	; 1
    1cac:	51 09       	sbc	r21, r1
    1cae:	62 1b       	sub	r22, r18
    1cb0:	73 0b       	sbc	r23, r19
    1cb2:	b0 c0       	rjmp	.+352    	; 0x1e14 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1aa>
    1cb4:	86 81       	ldd	r24, Z+6	; 0x06
    1cb6:	97 81       	ldd	r25, Z+7	; 0x07
    1cb8:	dc 01       	movw	r26, r24
    1cba:	a6 1b       	sub	r26, r22
    1cbc:	b7 0b       	sbc	r27, r23
    1cbe:	bd 01       	movw	r22, r26
    1cc0:	62 1b       	sub	r22, r18
    1cc2:	73 0b       	sbc	r23, r19
    1cc4:	0b c1       	rjmp	.+534    	; 0x1edc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x272>
    1cc6:	84 81       	ldd	r24, Z+4	; 0x04
    1cc8:	95 81       	ldd	r25, Z+5	; 0x05
    1cca:	48 17       	cp	r20, r24
    1ccc:	59 07       	cpc	r21, r25
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x68>
    1cd0:	2d c1       	rjmp	.+602    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1cd2:	77 23       	and	r23, r23
    1cd4:	24 f4       	brge	.+8      	; 0x1cde <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x74>
    1cd6:	26 0f       	add	r18, r22
    1cd8:	37 1f       	adc	r19, r23
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	86 81       	ldd	r24, Z+6	; 0x06
    1ce0:	97 81       	ldd	r25, Z+7	; 0x07
    1ce2:	fb 01       	movw	r30, r22
    1ce4:	e2 0f       	add	r30, r18
    1ce6:	f3 1f       	adc	r31, r19
    1ce8:	8e 17       	cp	r24, r30
    1cea:	9f 07       	cpc	r25, r31
    1cec:	1c f4       	brge	.+6      	; 0x1cf4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x8a>
    1cee:	9c 01       	movw	r18, r24
    1cf0:	26 1b       	sub	r18, r22
    1cf2:	37 0b       	sbc	r19, r23
    1cf4:	12 16       	cp	r1, r18
    1cf6:	13 06       	cpc	r1, r19
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x92>
    1cfa:	18 c1       	rjmp	.+560    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1cfc:	92 2f       	mov	r25, r18
    1cfe:	86 2f       	mov	r24, r22
    1d00:	86 95       	lsr	r24
    1d02:	86 95       	lsr	r24
    1d04:	86 95       	lsr	r24
    1d06:	b0 e8       	ldi	r27, 0x80	; 128
    1d08:	8b 9f       	mul	r24, r27
    1d0a:	40 0d       	add	r20, r0
    1d0c:	51 1d       	adc	r21, r1
    1d0e:	11 24       	eor	r1, r1
    1d10:	fa 01       	movw	r30, r20
    1d12:	e0 5f       	subi	r30, 0xF0	; 240
    1d14:	fe 4f       	sbci	r31, 0xFE	; 254
    1d16:	67 70       	andi	r22, 0x07	; 7
    1d18:	81 f1       	breq	.+96     	; 0x1d7a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x110>
    1d1a:	88 e0       	ldi	r24, 0x08	; 8
    1d1c:	86 1b       	sub	r24, r22
    1d1e:	68 2f       	mov	r22, r24
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	db 01       	movw	r26, r22
    1d24:	a8 5f       	subi	r26, 0xF8	; 248
    1d26:	be 4f       	sbci	r27, 0xFE	; 254
    1d28:	4c 91       	ld	r20, X
    1d2a:	28 17       	cp	r18, r24
    1d2c:	08 f0       	brcs	.+2      	; 0x1d30 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xc6>
    1d2e:	da c0       	rjmp	.+436    	; 0x1ee4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x27a>
    1d30:	62 1b       	sub	r22, r18
    1d32:	71 09       	sbc	r23, r1
    1d34:	2f ef       	ldi	r18, 0xFF	; 255
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xd4>
    1d3a:	35 95       	asr	r19
    1d3c:	27 95       	ror	r18
    1d3e:	6a 95       	dec	r22
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xd0>
    1d42:	42 23       	and	r20, r18
    1d44:	01 30       	cpi	r16, 0x01	; 1
    1d46:	11 05       	cpc	r17, r1
    1d48:	31 f0       	breq	.+12     	; 0x1d56 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xec>
    1d4a:	48 f0       	brcs	.+18     	; 0x1d5e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf4>
    1d4c:	02 30       	cpi	r16, 0x02	; 2
    1d4e:	11 05       	cpc	r17, r1
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xea>
    1d52:	ec c0       	rjmp	.+472    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xfe>
    1d56:	20 81       	ld	r18, Z
    1d58:	42 2b       	or	r20, r18
    1d5a:	40 83       	st	Z, r20
    1d5c:	08 c0       	rjmp	.+16     	; 0x1d6e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x104>
    1d5e:	40 95       	com	r20
    1d60:	20 81       	ld	r18, Z
    1d62:	42 23       	and	r20, r18
    1d64:	40 83       	st	Z, r20
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x104>
    1d68:	20 81       	ld	r18, Z
    1d6a:	42 27       	eor	r20, r18
    1d6c:	40 83       	st	Z, r20
    1d6e:	98 17       	cp	r25, r24
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x10a>
    1d72:	dc c0       	rjmp	.+440    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1d74:	98 1b       	sub	r25, r24
    1d76:	e0 58       	subi	r30, 0x80	; 128
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	98 30       	cpi	r25, 0x08	; 8
    1d7c:	60 f1       	brcs	.+88     	; 0x1dd6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x16c>
    1d7e:	02 30       	cpi	r16, 0x02	; 2
    1d80:	11 05       	cpc	r17, r1
    1d82:	59 f4       	brne	.+22     	; 0x1d9a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x130>
    1d84:	df 01       	movw	r26, r30
    1d86:	29 2f       	mov	r18, r25
    1d88:	8c 91       	ld	r24, X
    1d8a:	80 95       	com	r24
    1d8c:	8c 93       	st	X, r24
    1d8e:	a0 58       	subi	r26, 0x80	; 128
    1d90:	bf 4f       	sbci	r27, 0xFF	; 255
    1d92:	28 50       	subi	r18, 0x08	; 8
    1d94:	28 30       	cpi	r18, 0x08	; 8
    1d96:	c0 f7       	brcc	.-16     	; 0x1d88 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x11e>
    1d98:	b7 c0       	rjmp	.+366    	; 0x1f08 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29e>
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	01 30       	cpi	r16, 0x01	; 1
    1d9e:	11 05       	cpc	r17, r1
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x13a>
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	21 95       	neg	r18
    1da6:	df 01       	movw	r26, r30
    1da8:	89 2f       	mov	r24, r25
    1daa:	2c 93       	st	X, r18
    1dac:	a0 58       	subi	r26, 0x80	; 128
    1dae:	bf 4f       	sbci	r27, 0xFF	; 255
    1db0:	88 50       	subi	r24, 0x08	; 8
    1db2:	88 30       	cpi	r24, 0x08	; 8
    1db4:	d0 f7       	brcc	.-12     	; 0x1daa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x140>
    1db6:	28 ef       	ldi	r18, 0xF8	; 248
    1db8:	29 0f       	add	r18, r25
    1dba:	26 95       	lsr	r18
    1dbc:	26 95       	lsr	r18
    1dbe:	26 95       	lsr	r18
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	36 95       	lsr	r19
    1dc8:	32 2f       	mov	r19, r18
    1dca:	22 27       	eor	r18, r18
    1dcc:	37 95       	ror	r19
    1dce:	27 95       	ror	r18
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	97 70       	andi	r25, 0x07	; 7
    1dd6:	99 23       	and	r25, r25
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x172>
    1dda:	a8 c0       	rjmp	.+336    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1ddc:	97 70       	andi	r25, 0x07	; 7
    1dde:	a9 2f       	mov	r26, r25
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	a0 50       	subi	r26, 0x00	; 0
    1de4:	bf 4f       	sbci	r27, 0xFF	; 255
    1de6:	8c 91       	ld	r24, X
    1de8:	01 30       	cpi	r16, 0x01	; 1
    1dea:	11 05       	cpc	r17, r1
    1dec:	31 f0       	breq	.+12     	; 0x1dfa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x190>
    1dee:	48 f0       	brcs	.+18     	; 0x1e02 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x198>
    1df0:	02 30       	cpi	r16, 0x02	; 2
    1df2:	11 05       	cpc	r17, r1
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x18e>
    1df6:	9a c0       	rjmp	.+308    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1a2>
    1dfa:	90 81       	ld	r25, Z
    1dfc:	89 2b       	or	r24, r25
    1dfe:	80 83       	st	Z, r24
    1e00:	95 c0       	rjmp	.+298    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e02:	80 95       	com	r24
    1e04:	90 81       	ld	r25, Z
    1e06:	89 23       	and	r24, r25
    1e08:	80 83       	st	Z, r24
    1e0a:	90 c0       	rjmp	.+288    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e0c:	90 81       	ld	r25, Z
    1e0e:	89 27       	eor	r24, r25
    1e10:	80 83       	st	Z, r24
    1e12:	8c c0       	rjmp	.+280    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e14:	55 23       	and	r21, r21
    1e16:	0c f4       	brge	.+2      	; 0x1e1a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b0>
    1e18:	89 c0       	rjmp	.+274    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e1a:	86 81       	ldd	r24, Z+6	; 0x06
    1e1c:	97 81       	ldd	r25, Z+7	; 0x07
    1e1e:	48 17       	cp	r20, r24
    1e20:	59 07       	cpc	r21, r25
    1e22:	0c f0       	brlt	.+2      	; 0x1e26 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1bc>
    1e24:	83 c0       	rjmp	.+262    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e26:	77 23       	and	r23, r23
    1e28:	24 f4       	brge	.+8      	; 0x1e32 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1c8>
    1e2a:	26 0f       	add	r18, r22
    1e2c:	37 1f       	adc	r19, r23
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	84 81       	ldd	r24, Z+4	; 0x04
    1e34:	95 81       	ldd	r25, Z+5	; 0x05
    1e36:	fb 01       	movw	r30, r22
    1e38:	e2 0f       	add	r30, r18
    1e3a:	f3 1f       	adc	r31, r19
    1e3c:	8e 17       	cp	r24, r30
    1e3e:	9f 07       	cpc	r25, r31
    1e40:	1c f4       	brge	.+6      	; 0x1e48 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1de>
    1e42:	9c 01       	movw	r18, r24
    1e44:	26 1b       	sub	r18, r22
    1e46:	37 0b       	sbc	r19, r23
    1e48:	12 16       	cp	r1, r18
    1e4a:	13 06       	cpc	r1, r19
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e6>
    1e4e:	6e c0       	rjmp	.+220    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e50:	ca 01       	movw	r24, r20
    1e52:	55 23       	and	r21, r21
    1e54:	0c f4       	brge	.+2      	; 0x1e58 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1ee>
    1e56:	07 96       	adiw	r24, 0x07	; 7
    1e58:	95 95       	asr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	95 95       	asr	r25
    1e5e:	87 95       	ror	r24
    1e60:	95 95       	asr	r25
    1e62:	87 95       	ror	r24
    1e64:	96 95       	lsr	r25
    1e66:	98 2f       	mov	r25, r24
    1e68:	88 27       	eor	r24, r24
    1e6a:	97 95       	ror	r25
    1e6c:	87 95       	ror	r24
    1e6e:	68 0f       	add	r22, r24
    1e70:	79 1f       	adc	r23, r25
    1e72:	60 5f       	subi	r22, 0xF0	; 240
    1e74:	7e 4f       	sbci	r23, 0xFE	; 254
    1e76:	47 70       	andi	r20, 0x07	; 7
    1e78:	55 27       	eor	r21, r21
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x21a>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	4a 95       	dec	r20
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x216>
    1e88:	48 2f       	mov	r20, r24
    1e8a:	01 30       	cpi	r16, 0x01	; 1
    1e8c:	11 05       	cpc	r17, r1
    1e8e:	49 f0       	breq	.+18     	; 0x1ea2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x238>
    1e90:	90 f0       	brcs	.+36     	; 0x1eb6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x24c>
    1e92:	02 30       	cpi	r16, 0x02	; 2
    1e94:	11 05       	cpc	r17, r1
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x230>
    1e98:	49 c0       	rjmp	.+146    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1e9a:	fb 01       	movw	r30, r22
    1e9c:	62 0f       	add	r22, r18
    1e9e:	73 1f       	adc	r23, r19
    1ea0:	16 c0       	rjmp	.+44     	; 0x1ece <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x264>
    1ea2:	fb 01       	movw	r30, r22
    1ea4:	62 0f       	add	r22, r18
    1ea6:	73 1f       	adc	r23, r19
    1ea8:	80 81       	ld	r24, Z
    1eaa:	84 2b       	or	r24, r20
    1eac:	81 93       	st	Z+, r24
    1eae:	6e 17       	cp	r22, r30
    1eb0:	7f 07       	cpc	r23, r31
    1eb2:	d1 f7       	brne	.-12     	; 0x1ea8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x23e>
    1eb4:	3b c0       	rjmp	.+118    	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	90 95       	com	r25
    1eba:	fb 01       	movw	r30, r22
    1ebc:	62 0f       	add	r22, r18
    1ebe:	73 1f       	adc	r23, r19
    1ec0:	80 81       	ld	r24, Z
    1ec2:	89 23       	and	r24, r25
    1ec4:	81 93       	st	Z+, r24
    1ec6:	e6 17       	cp	r30, r22
    1ec8:	f7 07       	cpc	r31, r23
    1eca:	d1 f7       	brne	.-12     	; 0x1ec0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x256>
    1ecc:	2f c0       	rjmp	.+94     	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1ece:	80 81       	ld	r24, Z
    1ed0:	84 27       	eor	r24, r20
    1ed2:	81 93       	st	Z+, r24
    1ed4:	e6 17       	cp	r30, r22
    1ed6:	f7 07       	cpc	r31, r23
    1ed8:	d1 f7       	brne	.-12     	; 0x1ece <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x264>
    1eda:	28 c0       	rjmp	.+80     	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1edc:	55 23       	and	r21, r21
    1ede:	0c f0       	brlt	.+2      	; 0x1ee2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x278>
    1ee0:	f2 ce       	rjmp	.-540    	; 0x1cc6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x5c>
    1ee2:	24 c0       	rjmp	.+72     	; 0x1f2c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2c2>
    1ee4:	01 30       	cpi	r16, 0x01	; 1
    1ee6:	11 05       	cpc	r17, r1
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x282>
    1eea:	35 cf       	rjmp	.-406    	; 0x1d56 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xec>
    1eec:	08 f4       	brcc	.+2      	; 0x1ef0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x286>
    1eee:	37 cf       	rjmp	.-402    	; 0x1d5e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf4>
    1ef0:	02 30       	cpi	r16, 0x02	; 2
    1ef2:	11 05       	cpc	r17, r1
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28e>
    1ef6:	38 cf       	rjmp	.-400    	; 0x1d68 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xfe>
    1ef8:	3d cf       	rjmp	.-390    	; 0x1d74 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x10a>
    1efa:	97 70       	andi	r25, 0x07	; 7
    1efc:	a9 2f       	mov	r26, r25
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	a0 50       	subi	r26, 0x00	; 0
    1f02:	bf 4f       	sbci	r27, 0xFF	; 255
    1f04:	8c 91       	ld	r24, X
    1f06:	82 cf       	rjmp	.-252    	; 0x1e0c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1a2>
    1f08:	28 ef       	ldi	r18, 0xF8	; 248
    1f0a:	29 0f       	add	r18, r25
    1f0c:	26 95       	lsr	r18
    1f0e:	26 95       	lsr	r18
    1f10:	26 95       	lsr	r18
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	2f 5f       	subi	r18, 0xFF	; 255
    1f16:	3f 4f       	sbci	r19, 0xFF	; 255
    1f18:	36 95       	lsr	r19
    1f1a:	32 2f       	mov	r19, r18
    1f1c:	22 27       	eor	r18, r18
    1f1e:	37 95       	ror	r19
    1f20:	27 95       	ror	r18
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	89 2f       	mov	r24, r25
    1f28:	87 70       	andi	r24, 0x07	; 7
    1f2a:	39 f7       	brne	.-50     	; 0x1efa <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x290>
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	08 95       	ret

00001f32 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	fc 01       	movw	r30, r24
    1f38:	85 89       	ldd	r24, Z+21	; 0x15
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	71 f0       	breq	.+28     	; 0x1f5a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x28>
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	e9 f0       	breq	.+58     	; 0x1f7c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x4a>
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x16>
    1f46:	84 c0       	rjmp	.+264    	; 0x2050 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x11e>
    1f48:	84 81       	ldd	r24, Z+4	; 0x04
    1f4a:	95 81       	ldd	r25, Z+5	; 0x05
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	a4 1b       	sub	r26, r20
    1f50:	b5 0b       	sbc	r27, r21
    1f52:	ad 01       	movw	r20, r26
    1f54:	42 1b       	sub	r20, r18
    1f56:	53 0b       	sbc	r21, r19
    1f58:	24 c1       	rjmp	.+584    	; 0x21a2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x270>
    1f5a:	84 81       	ldd	r24, Z+4	; 0x04
    1f5c:	95 81       	ldd	r25, Z+5	; 0x05
    1f5e:	dc 01       	movw	r26, r24
    1f60:	a6 1b       	sub	r26, r22
    1f62:	b7 0b       	sbc	r27, r23
    1f64:	bd 01       	movw	r22, r26
    1f66:	61 50       	subi	r22, 0x01	; 1
    1f68:	71 09       	sbc	r23, r1
    1f6a:	86 81       	ldd	r24, Z+6	; 0x06
    1f6c:	97 81       	ldd	r25, Z+7	; 0x07
    1f6e:	dc 01       	movw	r26, r24
    1f70:	a4 1b       	sub	r26, r20
    1f72:	b5 0b       	sbc	r27, r21
    1f74:	ad 01       	movw	r20, r26
    1f76:	42 1b       	sub	r20, r18
    1f78:	53 0b       	sbc	r21, r19
    1f7a:	6a c0       	rjmp	.+212    	; 0x2050 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x11e>
    1f7c:	86 81       	ldd	r24, Z+6	; 0x06
    1f7e:	97 81       	ldd	r25, Z+7	; 0x07
    1f80:	dc 01       	movw	r26, r24
    1f82:	a6 1b       	sub	r26, r22
    1f84:	b7 0b       	sbc	r27, r23
    1f86:	bd 01       	movw	r22, r26
    1f88:	61 50       	subi	r22, 0x01	; 1
    1f8a:	71 09       	sbc	r23, r1
    1f8c:	0a c1       	rjmp	.+532    	; 0x21a2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x270>
    1f8e:	86 81       	ldd	r24, Z+6	; 0x06
    1f90:	97 81       	ldd	r25, Z+7	; 0x07
    1f92:	68 17       	cp	r22, r24
    1f94:	79 07       	cpc	r23, r25
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x68>
    1f98:	2c c1       	rjmp	.+600    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    1f9a:	55 23       	and	r21, r21
    1f9c:	24 f4       	brge	.+8      	; 0x1fa6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x74>
    1f9e:	24 0f       	add	r18, r20
    1fa0:	35 1f       	adc	r19, r21
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	84 81       	ldd	r24, Z+4	; 0x04
    1fa8:	95 81       	ldd	r25, Z+5	; 0x05
    1faa:	fa 01       	movw	r30, r20
    1fac:	e2 0f       	add	r30, r18
    1fae:	f3 1f       	adc	r31, r19
    1fb0:	8e 17       	cp	r24, r30
    1fb2:	9f 07       	cpc	r25, r31
    1fb4:	1c f4       	brge	.+6      	; 0x1fbc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x8a>
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	24 1b       	sub	r18, r20
    1fba:	35 0b       	sbc	r19, r21
    1fbc:	12 16       	cp	r1, r18
    1fbe:	13 06       	cpc	r1, r19
    1fc0:	0c f0       	brlt	.+2      	; 0x1fc4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x92>
    1fc2:	17 c1       	rjmp	.+558    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	77 23       	and	r23, r23
    1fc8:	0c f4       	brge	.+2      	; 0x1fcc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x9a>
    1fca:	07 96       	adiw	r24, 0x07	; 7
    1fcc:	95 95       	asr	r25
    1fce:	87 95       	ror	r24
    1fd0:	95 95       	asr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	95 95       	asr	r25
    1fd6:	87 95       	ror	r24
    1fd8:	96 95       	lsr	r25
    1fda:	98 2f       	mov	r25, r24
    1fdc:	88 27       	eor	r24, r24
    1fde:	97 95       	ror	r25
    1fe0:	87 95       	ror	r24
    1fe2:	48 0f       	add	r20, r24
    1fe4:	59 1f       	adc	r21, r25
    1fe6:	40 5f       	subi	r20, 0xF0	; 240
    1fe8:	5e 4f       	sbci	r21, 0xFE	; 254
    1fea:	cb 01       	movw	r24, r22
    1fec:	87 70       	andi	r24, 0x07	; 7
    1fee:	99 27       	eor	r25, r25
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xc8>
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	8a 95       	dec	r24
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xc4>
    1ffe:	96 2f       	mov	r25, r22
    2000:	01 30       	cpi	r16, 0x01	; 1
    2002:	11 05       	cpc	r17, r1
    2004:	49 f0       	breq	.+18     	; 0x2018 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xe6>
    2006:	90 f0       	brcs	.+36     	; 0x202c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xfa>
    2008:	02 30       	cpi	r16, 0x02	; 2
    200a:	11 05       	cpc	r17, r1
    200c:	09 f0       	breq	.+2      	; 0x2010 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xde>
    200e:	f1 c0       	rjmp	.+482    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2010:	fa 01       	movw	r30, r20
    2012:	24 0f       	add	r18, r20
    2014:	35 1f       	adc	r19, r21
    2016:	15 c0       	rjmp	.+42     	; 0x2042 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x110>
    2018:	fa 01       	movw	r30, r20
    201a:	24 0f       	add	r18, r20
    201c:	35 1f       	adc	r19, r21
    201e:	80 81       	ld	r24, Z
    2020:	89 2b       	or	r24, r25
    2022:	81 93       	st	Z+, r24
    2024:	2e 17       	cp	r18, r30
    2026:	3f 07       	cpc	r19, r31
    2028:	d1 f7       	brne	.-12     	; 0x201e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xec>
    202a:	e3 c0       	rjmp	.+454    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    202c:	60 95       	com	r22
    202e:	fa 01       	movw	r30, r20
    2030:	24 0f       	add	r18, r20
    2032:	35 1f       	adc	r19, r21
    2034:	80 81       	ld	r24, Z
    2036:	86 23       	and	r24, r22
    2038:	81 93       	st	Z+, r24
    203a:	2e 17       	cp	r18, r30
    203c:	3f 07       	cpc	r19, r31
    203e:	d1 f7       	brne	.-12     	; 0x2034 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x102>
    2040:	d8 c0       	rjmp	.+432    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2042:	80 81       	ld	r24, Z
    2044:	89 27       	eor	r24, r25
    2046:	81 93       	st	Z+, r24
    2048:	e2 17       	cp	r30, r18
    204a:	f3 07       	cpc	r31, r19
    204c:	d1 f7       	brne	.-12     	; 0x2042 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x110>
    204e:	d1 c0       	rjmp	.+418    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2050:	77 23       	and	r23, r23
    2052:	0c f4       	brge	.+2      	; 0x2056 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x124>
    2054:	ce c0       	rjmp	.+412    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2056:	84 81       	ldd	r24, Z+4	; 0x04
    2058:	95 81       	ldd	r25, Z+5	; 0x05
    205a:	68 17       	cp	r22, r24
    205c:	79 07       	cpc	r23, r25
    205e:	0c f0       	brlt	.+2      	; 0x2062 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x130>
    2060:	c8 c0       	rjmp	.+400    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2062:	55 23       	and	r21, r21
    2064:	24 f4       	brge	.+8      	; 0x206e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x13c>
    2066:	24 0f       	add	r18, r20
    2068:	35 1f       	adc	r19, r21
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	50 e0       	ldi	r21, 0x00	; 0
    206e:	86 81       	ldd	r24, Z+6	; 0x06
    2070:	97 81       	ldd	r25, Z+7	; 0x07
    2072:	fa 01       	movw	r30, r20
    2074:	e2 0f       	add	r30, r18
    2076:	f3 1f       	adc	r31, r19
    2078:	8e 17       	cp	r24, r30
    207a:	9f 07       	cpc	r25, r31
    207c:	1c f4       	brge	.+6      	; 0x2084 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x152>
    207e:	9c 01       	movw	r18, r24
    2080:	24 1b       	sub	r18, r20
    2082:	35 0b       	sbc	r19, r21
    2084:	12 16       	cp	r1, r18
    2086:	13 06       	cpc	r1, r19
    2088:	0c f0       	brlt	.+2      	; 0x208c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x15a>
    208a:	b3 c0       	rjmp	.+358    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    208c:	92 2f       	mov	r25, r18
    208e:	84 2f       	mov	r24, r20
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	86 95       	lsr	r24
    2096:	b0 e8       	ldi	r27, 0x80	; 128
    2098:	8b 9f       	mul	r24, r27
    209a:	60 0d       	add	r22, r0
    209c:	71 1d       	adc	r23, r1
    209e:	11 24       	eor	r1, r1
    20a0:	fb 01       	movw	r30, r22
    20a2:	e0 5f       	subi	r30, 0xF0	; 240
    20a4:	fe 4f       	sbci	r31, 0xFE	; 254
    20a6:	47 70       	andi	r20, 0x07	; 7
    20a8:	81 f1       	breq	.+96     	; 0x210a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1d8>
    20aa:	88 e0       	ldi	r24, 0x08	; 8
    20ac:	84 1b       	sub	r24, r20
    20ae:	68 2f       	mov	r22, r24
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	db 01       	movw	r26, r22
    20b4:	a8 5f       	subi	r26, 0xF8	; 248
    20b6:	be 4f       	sbci	r27, 0xFE	; 254
    20b8:	4c 91       	ld	r20, X
    20ba:	28 17       	cp	r18, r24
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x18e>
    20be:	75 c0       	rjmp	.+234    	; 0x21aa <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x278>
    20c0:	62 1b       	sub	r22, r18
    20c2:	71 09       	sbc	r23, r1
    20c4:	2f ef       	ldi	r18, 0xFF	; 255
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x19c>
    20ca:	35 95       	asr	r19
    20cc:	27 95       	ror	r18
    20ce:	6a 95       	dec	r22
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x198>
    20d2:	42 23       	and	r20, r18
    20d4:	01 30       	cpi	r16, 0x01	; 1
    20d6:	11 05       	cpc	r17, r1
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b4>
    20da:	48 f0       	brcs	.+18     	; 0x20ee <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1bc>
    20dc:	02 30       	cpi	r16, 0x02	; 2
    20de:	11 05       	cpc	r17, r1
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b2>
    20e2:	87 c0       	rjmp	.+270    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    20e4:	09 c0       	rjmp	.+18     	; 0x20f8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1c6>
    20e6:	20 81       	ld	r18, Z
    20e8:	42 2b       	or	r20, r18
    20ea:	40 83       	st	Z, r20
    20ec:	08 c0       	rjmp	.+16     	; 0x20fe <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1cc>
    20ee:	40 95       	com	r20
    20f0:	20 81       	ld	r18, Z
    20f2:	42 23       	and	r20, r18
    20f4:	40 83       	st	Z, r20
    20f6:	03 c0       	rjmp	.+6      	; 0x20fe <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1cc>
    20f8:	20 81       	ld	r18, Z
    20fa:	42 27       	eor	r20, r18
    20fc:	40 83       	st	Z, r20
    20fe:	98 17       	cp	r25, r24
    2100:	08 f4       	brcc	.+2      	; 0x2104 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1d2>
    2102:	77 c0       	rjmp	.+238    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2104:	98 1b       	sub	r25, r24
    2106:	e0 58       	subi	r30, 0x80	; 128
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	98 30       	cpi	r25, 0x08	; 8
    210c:	60 f1       	brcs	.+88     	; 0x2166 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x234>
    210e:	02 30       	cpi	r16, 0x02	; 2
    2110:	11 05       	cpc	r17, r1
    2112:	59 f4       	brne	.+22     	; 0x212a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f8>
    2114:	df 01       	movw	r26, r30
    2116:	29 2f       	mov	r18, r25
    2118:	8c 91       	ld	r24, X
    211a:	80 95       	com	r24
    211c:	8c 93       	st	X, r24
    211e:	a0 58       	subi	r26, 0x80	; 128
    2120:	bf 4f       	sbci	r27, 0xFF	; 255
    2122:	28 50       	subi	r18, 0x08	; 8
    2124:	28 30       	cpi	r18, 0x08	; 8
    2126:	c0 f7       	brcc	.-16     	; 0x2118 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e6>
    2128:	52 c0       	rjmp	.+164    	; 0x21ce <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x29c>
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	01 30       	cpi	r16, 0x01	; 1
    212e:	11 05       	cpc	r17, r1
    2130:	09 f0       	breq	.+2      	; 0x2134 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x202>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	21 95       	neg	r18
    2136:	df 01       	movw	r26, r30
    2138:	89 2f       	mov	r24, r25
    213a:	2c 93       	st	X, r18
    213c:	a0 58       	subi	r26, 0x80	; 128
    213e:	bf 4f       	sbci	r27, 0xFF	; 255
    2140:	88 50       	subi	r24, 0x08	; 8
    2142:	88 30       	cpi	r24, 0x08	; 8
    2144:	d0 f7       	brcc	.-12     	; 0x213a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x208>
    2146:	28 ef       	ldi	r18, 0xF8	; 248
    2148:	29 0f       	add	r18, r25
    214a:	26 95       	lsr	r18
    214c:	26 95       	lsr	r18
    214e:	26 95       	lsr	r18
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	36 95       	lsr	r19
    2158:	32 2f       	mov	r19, r18
    215a:	22 27       	eor	r18, r18
    215c:	37 95       	ror	r19
    215e:	27 95       	ror	r18
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	97 70       	andi	r25, 0x07	; 7
    2166:	99 23       	and	r25, r25
    2168:	09 f4       	brne	.+2      	; 0x216c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x23a>
    216a:	43 c0       	rjmp	.+134    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    216c:	97 70       	andi	r25, 0x07	; 7
    216e:	a9 2f       	mov	r26, r25
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	a0 50       	subi	r26, 0x00	; 0
    2174:	bf 4f       	sbci	r27, 0xFF	; 255
    2176:	8c 91       	ld	r24, X
    2178:	01 30       	cpi	r16, 0x01	; 1
    217a:	11 05       	cpc	r17, r1
    217c:	29 f0       	breq	.+10     	; 0x2188 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x256>
    217e:	40 f0       	brcs	.+16     	; 0x2190 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x25e>
    2180:	02 30       	cpi	r16, 0x02	; 2
    2182:	11 05       	cpc	r17, r1
    2184:	b1 f5       	brne	.+108    	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2186:	09 c0       	rjmp	.+18     	; 0x219a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x268>
    2188:	90 81       	ld	r25, Z
    218a:	89 2b       	or	r24, r25
    218c:	80 83       	st	Z, r24
    218e:	31 c0       	rjmp	.+98     	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    2190:	80 95       	com	r24
    2192:	90 81       	ld	r25, Z
    2194:	89 23       	and	r24, r25
    2196:	80 83       	st	Z, r24
    2198:	2c c0       	rjmp	.+88     	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    219a:	90 81       	ld	r25, Z
    219c:	89 27       	eor	r24, r25
    219e:	80 83       	st	Z, r24
    21a0:	28 c0       	rjmp	.+80     	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    21a2:	77 23       	and	r23, r23
    21a4:	0c f0       	brlt	.+2      	; 0x21a8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x276>
    21a6:	f3 ce       	rjmp	.-538    	; 0x1f8e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x5c>
    21a8:	24 c0       	rjmp	.+72     	; 0x21f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2c0>
    21aa:	01 30       	cpi	r16, 0x01	; 1
    21ac:	11 05       	cpc	r17, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x280>
    21b0:	9a cf       	rjmp	.-204    	; 0x20e6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b4>
    21b2:	08 f4       	brcc	.+2      	; 0x21b6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x284>
    21b4:	9c cf       	rjmp	.-200    	; 0x20ee <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1bc>
    21b6:	02 30       	cpi	r16, 0x02	; 2
    21b8:	11 05       	cpc	r17, r1
    21ba:	09 f4       	brne	.+2      	; 0x21be <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x28c>
    21bc:	9d cf       	rjmp	.-198    	; 0x20f8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1c6>
    21be:	a2 cf       	rjmp	.-188    	; 0x2104 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1d2>
    21c0:	97 70       	andi	r25, 0x07	; 7
    21c2:	a9 2f       	mov	r26, r25
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	a0 50       	subi	r26, 0x00	; 0
    21c8:	bf 4f       	sbci	r27, 0xFF	; 255
    21ca:	8c 91       	ld	r24, X
    21cc:	e6 cf       	rjmp	.-52     	; 0x219a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x268>
    21ce:	28 ef       	ldi	r18, 0xF8	; 248
    21d0:	29 0f       	add	r18, r25
    21d2:	26 95       	lsr	r18
    21d4:	26 95       	lsr	r18
    21d6:	26 95       	lsr	r18
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	2f 5f       	subi	r18, 0xFF	; 255
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	36 95       	lsr	r19
    21e0:	32 2f       	mov	r19, r18
    21e2:	22 27       	eor	r18, r18
    21e4:	37 95       	ror	r19
    21e6:	27 95       	ror	r18
    21e8:	e2 0f       	add	r30, r18
    21ea:	f3 1f       	adc	r31, r19
    21ec:	89 2f       	mov	r24, r25
    21ee:	87 70       	andi	r24, 0x07	; 7
    21f0:	39 f7       	brne	.-50     	; 0x21c0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x28e>
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	08 95       	ret

000021f8 <_ZN16Adafruit_SSD13069drawPixelEiij>:
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	7c 01       	movw	r14, r24
    220a:	eb 01       	movw	r28, r22
    220c:	8a 01       	movw	r16, r20
    220e:	69 01       	movw	r12, r18
    2210:	dd 23       	and	r29, r29
    2212:	0c f4       	brge	.+2      	; 0x2216 <_ZN16Adafruit_SSD13069drawPixelEiij+0x1e>
    2214:	a7 c0       	rjmp	.+334    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    2216:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <_ZNK12Adafruit_GFX5widthEv>
    221a:	c8 17       	cp	r28, r24
    221c:	d9 07       	cpc	r29, r25
    221e:	0c f0       	brlt	.+2      	; 0x2222 <_ZN16Adafruit_SSD13069drawPixelEiij+0x2a>
    2220:	a1 c0       	rjmp	.+322    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    2222:	11 23       	and	r17, r17
    2224:	0c f4       	brge	.+2      	; 0x2228 <_ZN16Adafruit_SSD13069drawPixelEiij+0x30>
    2226:	9e c0       	rjmp	.+316    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    2228:	c7 01       	movw	r24, r14
    222a:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZNK12Adafruit_GFX6heightEv>
    222e:	08 17       	cp	r16, r24
    2230:	19 07       	cpc	r17, r25
    2232:	0c f0       	brlt	.+2      	; 0x2236 <_ZN16Adafruit_SSD13069drawPixelEiij+0x3e>
    2234:	97 c0       	rjmp	.+302    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    2236:	c7 01       	movw	r24, r14
    2238:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <_ZNK12Adafruit_GFX11getRotationEv>
    223c:	82 30       	cpi	r24, 0x02	; 2
    223e:	69 f0       	breq	.+26     	; 0x225a <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    2240:	83 30       	cpi	r24, 0x03	; 3
    2242:	e1 f0       	breq	.+56     	; 0x227c <_ZN16Adafruit_SSD13069drawPixelEiij+0x84>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	19 f5       	brne	.+70     	; 0x228e <_ZN16Adafruit_SSD13069drawPixelEiij+0x96>
    2248:	f7 01       	movw	r30, r14
    224a:	84 81       	ldd	r24, Z+4	; 0x04
    224c:	95 81       	ldd	r25, Z+5	; 0x05
    224e:	80 1b       	sub	r24, r16
    2250:	91 0b       	sbc	r25, r17
    2252:	8e 01       	movw	r16, r28
    2254:	ec 01       	movw	r28, r24
    2256:	21 97       	sbiw	r28, 0x01	; 1
    2258:	1a c0       	rjmp	.+52     	; 0x228e <_ZN16Adafruit_SSD13069drawPixelEiij+0x96>
    225a:	f7 01       	movw	r30, r14
    225c:	84 81       	ldd	r24, Z+4	; 0x04
    225e:	95 81       	ldd	r25, Z+5	; 0x05
    2260:	9c 01       	movw	r18, r24
    2262:	2c 1b       	sub	r18, r28
    2264:	3d 0b       	sbc	r19, r29
    2266:	e9 01       	movw	r28, r18
    2268:	21 97       	sbiw	r28, 0x01	; 1
    226a:	86 81       	ldd	r24, Z+6	; 0x06
    226c:	97 81       	ldd	r25, Z+7	; 0x07
    226e:	fc 01       	movw	r30, r24
    2270:	e0 1b       	sub	r30, r16
    2272:	f1 0b       	sbc	r31, r17
    2274:	8f 01       	movw	r16, r30
    2276:	01 50       	subi	r16, 0x01	; 1
    2278:	11 09       	sbc	r17, r1
    227a:	09 c0       	rjmp	.+18     	; 0x228e <_ZN16Adafruit_SSD13069drawPixelEiij+0x96>
    227c:	f7 01       	movw	r30, r14
    227e:	86 81       	ldd	r24, Z+6	; 0x06
    2280:	97 81       	ldd	r25, Z+7	; 0x07
    2282:	8c 1b       	sub	r24, r28
    2284:	9d 0b       	sbc	r25, r29
    2286:	e8 01       	movw	r28, r16
    2288:	8c 01       	movw	r16, r24
    228a:	01 50       	subi	r16, 0x01	; 1
    228c:	11 09       	sbc	r17, r1
    228e:	f1 e0       	ldi	r31, 0x01	; 1
    2290:	cf 16       	cp	r12, r31
    2292:	d1 04       	cpc	r13, r1
    2294:	39 f0       	breq	.+14     	; 0x22a4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xac>
    2296:	30 f1       	brcs	.+76     	; 0x22e4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xec>
    2298:	32 e0       	ldi	r19, 0x02	; 2
    229a:	c3 16       	cp	r12, r19
    229c:	d1 04       	cpc	r13, r1
    229e:	09 f4       	brne	.+2      	; 0x22a2 <_ZN16Adafruit_SSD13069drawPixelEiij+0xaa>
    22a0:	42 c0       	rjmp	.+132    	; 0x2326 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12e>
    22a2:	60 c0       	rjmp	.+192    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    22a4:	c8 01       	movw	r24, r16
    22a6:	11 23       	and	r17, r17
    22a8:	0c f4       	brge	.+2      	; 0x22ac <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    22aa:	07 96       	adiw	r24, 0x07	; 7
    22ac:	95 95       	asr	r25
    22ae:	87 95       	ror	r24
    22b0:	95 95       	asr	r25
    22b2:	87 95       	ror	r24
    22b4:	95 95       	asr	r25
    22b6:	87 95       	ror	r24
    22b8:	96 95       	lsr	r25
    22ba:	98 2f       	mov	r25, r24
    22bc:	88 27       	eor	r24, r24
    22be:	97 95       	ror	r25
    22c0:	87 95       	ror	r24
    22c2:	c8 0f       	add	r28, r24
    22c4:	d9 1f       	adc	r29, r25
    22c6:	c0 5f       	subi	r28, 0xF0	; 240
    22c8:	de 4f       	sbci	r29, 0xFE	; 254
    22ca:	07 70       	andi	r16, 0x07	; 7
    22cc:	11 27       	eor	r17, r17
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xe0>
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	0a 95       	dec	r16
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xdc>
    22dc:	98 81       	ld	r25, Y
    22de:	89 2b       	or	r24, r25
    22e0:	88 83       	st	Y, r24
    22e2:	40 c0       	rjmp	.+128    	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    22e4:	c8 01       	movw	r24, r16
    22e6:	11 23       	and	r17, r17
    22e8:	0c f4       	brge	.+2      	; 0x22ec <_ZN16Adafruit_SSD13069drawPixelEiij+0xf4>
    22ea:	07 96       	adiw	r24, 0x07	; 7
    22ec:	95 95       	asr	r25
    22ee:	87 95       	ror	r24
    22f0:	95 95       	asr	r25
    22f2:	87 95       	ror	r24
    22f4:	95 95       	asr	r25
    22f6:	87 95       	ror	r24
    22f8:	96 95       	lsr	r25
    22fa:	98 2f       	mov	r25, r24
    22fc:	88 27       	eor	r24, r24
    22fe:	97 95       	ror	r25
    2300:	87 95       	ror	r24
    2302:	c8 0f       	add	r28, r24
    2304:	d9 1f       	adc	r29, r25
    2306:	c0 5f       	subi	r28, 0xF0	; 240
    2308:	de 4f       	sbci	r29, 0xFE	; 254
    230a:	07 70       	andi	r16, 0x07	; 7
    230c:	11 27       	eor	r17, r17
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <_ZN16Adafruit_SSD13069drawPixelEiij+0x120>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 95       	dec	r16
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <_ZN16Adafruit_SSD13069drawPixelEiij+0x11c>
    231c:	80 95       	com	r24
    231e:	98 81       	ld	r25, Y
    2320:	89 23       	and	r24, r25
    2322:	88 83       	st	Y, r24
    2324:	1f c0       	rjmp	.+62     	; 0x2364 <_ZN16Adafruit_SSD13069drawPixelEiij+0x16c>
    2326:	c8 01       	movw	r24, r16
    2328:	11 23       	and	r17, r17
    232a:	0c f4       	brge	.+2      	; 0x232e <_ZN16Adafruit_SSD13069drawPixelEiij+0x136>
    232c:	07 96       	adiw	r24, 0x07	; 7
    232e:	95 95       	asr	r25
    2330:	87 95       	ror	r24
    2332:	95 95       	asr	r25
    2334:	87 95       	ror	r24
    2336:	95 95       	asr	r25
    2338:	87 95       	ror	r24
    233a:	96 95       	lsr	r25
    233c:	98 2f       	mov	r25, r24
    233e:	88 27       	eor	r24, r24
    2340:	97 95       	ror	r25
    2342:	87 95       	ror	r24
    2344:	c8 0f       	add	r28, r24
    2346:	d9 1f       	adc	r29, r25
    2348:	c0 5f       	subi	r28, 0xF0	; 240
    234a:	de 4f       	sbci	r29, 0xFE	; 254
    234c:	07 70       	andi	r16, 0x07	; 7
    234e:	11 27       	eor	r17, r17
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 c0       	rjmp	.+4      	; 0x235a <_ZN16Adafruit_SSD13069drawPixelEiij+0x162>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	0a 95       	dec	r16
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15e>
    235e:	98 81       	ld	r25, Y
    2360:	89 27       	eor	r24, r25
    2362:	88 83       	st	Y, r24
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	df 90       	pop	r13
    2372:	cf 90       	pop	r12
    2374:	08 95       	ret

00002376 <_ZN16Adafruit_SSD1306C1Ev>:
    2376:	cf 93       	push	r28
    2378:	df 93       	push	r29
    237a:	ec 01       	movw	r28, r24
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	60 e8       	ldi	r22, 0x80	; 128
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	0e 94 9a 0c 	call	0x1934	; 0x1934 <_ZN12Adafruit_GFXC1Eii>
    2388:	8f e2       	ldi	r24, 0x2F	; 47
    238a:	93 e0       	ldi	r25, 0x03	; 3
    238c:	99 83       	std	Y+1, r25	; 0x01
    238e:	88 83       	st	Y, r24
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	89 8f       	std	Y+25, r24	; 0x19
    2394:	8d 8f       	std	Y+29, r24	; 0x1d
    2396:	8b 8f       	std	Y+27, r24	; 0x1b
    2398:	8a 8f       	std	Y+26, r24	; 0x1a
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    23a0:	cf 93       	push	r28
    23a2:	df 93       	push	r29
    23a4:	1f 92       	push	r1
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	69 83       	std	Y+1, r22	; 0x01
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	ae 01       	movw	r20, r28
    23b0:	4f 5f       	subi	r20, 0xFF	; 255
    23b2:	5f 4f       	sbci	r21, 0xFF	; 255
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	fc 01       	movw	r30, r24
    23b8:	87 89       	ldd	r24, Z+23	; 0x17
    23ba:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_Z9i2c_writehhPhh>
    23be:	0f 90       	pop	r0
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	08 95       	ret

000023c6 <_ZN16Adafruit_SSD13065beginEhhb>:
    23c6:	1f 93       	push	r17
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	ec 01       	movw	r28, r24
    23ce:	16 2f       	mov	r17, r22
    23d0:	68 8f       	std	Y+24, r22	; 0x18
    23d2:	4f 8b       	std	Y+23, r20	; 0x17
    23d4:	60 e8       	ldi	r22, 0x80	; 128
    23d6:	7a e1       	ldi	r23, 0x1A	; 26
    23d8:	86 e0       	ldi	r24, 0x06	; 6
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_Z8i2c_initm>
    23e0:	6e ea       	ldi	r22, 0xAE	; 174
    23e2:	ce 01       	movw	r24, r28
    23e4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    23e8:	65 ed       	ldi	r22, 0xD5	; 213
    23ea:	ce 01       	movw	r24, r28
    23ec:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    23f0:	60 e8       	ldi	r22, 0x80	; 128
    23f2:	ce 01       	movw	r24, r28
    23f4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    23f8:	68 ea       	ldi	r22, 0xA8	; 168
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2400:	6f e1       	ldi	r22, 0x1F	; 31
    2402:	ce 01       	movw	r24, r28
    2404:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2408:	63 ed       	ldi	r22, 0xD3	; 211
    240a:	ce 01       	movw	r24, r28
    240c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	ce 01       	movw	r24, r28
    2414:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2418:	60 e4       	ldi	r22, 0x40	; 64
    241a:	ce 01       	movw	r24, r28
    241c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2420:	6d e8       	ldi	r22, 0x8D	; 141
    2422:	ce 01       	movw	r24, r28
    2424:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2428:	11 30       	cpi	r17, 0x01	; 1
    242a:	69 f5       	brne	.+90     	; 0x2486 <_ZN16Adafruit_SSD13065beginEhhb+0xc0>
    242c:	60 e1       	ldi	r22, 0x10	; 16
    242e:	ce 01       	movw	r24, r28
    2430:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2434:	60 e2       	ldi	r22, 0x20	; 32
    2436:	ce 01       	movw	r24, r28
    2438:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	ce 01       	movw	r24, r28
    2440:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2444:	61 ea       	ldi	r22, 0xA1	; 161
    2446:	ce 01       	movw	r24, r28
    2448:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    244c:	68 ec       	ldi	r22, 0xC8	; 200
    244e:	ce 01       	movw	r24, r28
    2450:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2454:	6a ed       	ldi	r22, 0xDA	; 218
    2456:	ce 01       	movw	r24, r28
    2458:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    245c:	62 e0       	ldi	r22, 0x02	; 2
    245e:	ce 01       	movw	r24, r28
    2460:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2464:	61 e8       	ldi	r22, 0x81	; 129
    2466:	ce 01       	movw	r24, r28
    2468:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    246c:	6f e8       	ldi	r22, 0x8F	; 143
    246e:	ce 01       	movw	r24, r28
    2470:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2474:	69 ed       	ldi	r22, 0xD9	; 217
    2476:	ce 01       	movw	r24, r28
    2478:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    247c:	62 e2       	ldi	r22, 0x22	; 34
    247e:	ce 01       	movw	r24, r28
    2480:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2484:	2c c0       	rjmp	.+88     	; 0x24de <_ZN16Adafruit_SSD13065beginEhhb+0x118>
    2486:	64 e1       	ldi	r22, 0x14	; 20
    2488:	ce 01       	movw	r24, r28
    248a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    248e:	60 e2       	ldi	r22, 0x20	; 32
    2490:	ce 01       	movw	r24, r28
    2492:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	ce 01       	movw	r24, r28
    249a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    249e:	61 ea       	ldi	r22, 0xA1	; 161
    24a0:	ce 01       	movw	r24, r28
    24a2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24a6:	68 ec       	ldi	r22, 0xC8	; 200
    24a8:	ce 01       	movw	r24, r28
    24aa:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24ae:	6a ed       	ldi	r22, 0xDA	; 218
    24b0:	ce 01       	movw	r24, r28
    24b2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24b6:	62 e0       	ldi	r22, 0x02	; 2
    24b8:	ce 01       	movw	r24, r28
    24ba:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24be:	61 e8       	ldi	r22, 0x81	; 129
    24c0:	ce 01       	movw	r24, r28
    24c2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24c6:	6f e8       	ldi	r22, 0x8F	; 143
    24c8:	ce 01       	movw	r24, r28
    24ca:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24ce:	69 ed       	ldi	r22, 0xD9	; 217
    24d0:	ce 01       	movw	r24, r28
    24d2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24d6:	61 ef       	ldi	r22, 0xF1	; 241
    24d8:	ce 01       	movw	r24, r28
    24da:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24de:	6b ed       	ldi	r22, 0xDB	; 219
    24e0:	ce 01       	movw	r24, r28
    24e2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24e6:	60 e4       	ldi	r22, 0x40	; 64
    24e8:	ce 01       	movw	r24, r28
    24ea:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24ee:	64 ea       	ldi	r22, 0xA4	; 164
    24f0:	ce 01       	movw	r24, r28
    24f2:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24f6:	66 ea       	ldi	r22, 0xA6	; 166
    24f8:	ce 01       	movw	r24, r28
    24fa:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    24fe:	6f ea       	ldi	r22, 0xAF	; 175
    2500:	ce 01       	movw	r24, r28
    2502:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	1f 91       	pop	r17
    250c:	08 95       	ret

0000250e <_ZN16Adafruit_SSD130613invertDisplayEh>:
    250e:	66 23       	and	r22, r22
    2510:	21 f0       	breq	.+8      	; 0x251a <_ZN16Adafruit_SSD130613invertDisplayEh+0xc>
    2512:	67 ea       	ldi	r22, 0xA7	; 167
    2514:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2518:	08 95       	ret
    251a:	66 ea       	ldi	r22, 0xA6	; 166
    251c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2520:	08 95       	ret

00002522 <_ZN16Adafruit_SSD13063dimEh>:
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	ec 01       	movw	r28, r24
    252a:	61 11       	cpse	r22, r1
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <_ZN16Adafruit_SSD13063dimEh+0x16>
    252e:	88 8d       	ldd	r24, Y+24	; 0x18
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	21 f0       	breq	.+8      	; 0x253c <_ZN16Adafruit_SSD13063dimEh+0x1a>
    2534:	1f ec       	ldi	r17, 0xCF	; 207
    2536:	03 c0       	rjmp	.+6      	; 0x253e <_ZN16Adafruit_SSD13063dimEh+0x1c>
    2538:	10 e0       	ldi	r17, 0x00	; 0
    253a:	01 c0       	rjmp	.+2      	; 0x253e <_ZN16Adafruit_SSD13063dimEh+0x1c>
    253c:	1f e9       	ldi	r17, 0x9F	; 159
    253e:	61 e8       	ldi	r22, 0x81	; 129
    2540:	ce 01       	movw	r24, r28
    2542:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    2546:	61 2f       	mov	r22, r17
    2548:	ce 01       	movw	r24, r28
    254a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	08 95       	ret

00002556 <_ZN16Adafruit_SSD13067displayEv>:

void Adafruit_SSD1306::display(void) {
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	8c 01       	movw	r16, r24
  ssd1306_command(SSD1306_COLUMNADDR);
    2566:	61 e2       	ldi	r22, 0x21	; 33
    2568:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	c8 01       	movw	r24, r16
    2570:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
    2574:	6f e7       	ldi	r22, 0x7F	; 127
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
    257c:	62 e2       	ldi	r22, 0x22	; 34
    257e:	c8 01       	movw	r24, r16
    2580:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	c8 01       	movw	r24, r16
    2588:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
    258c:	63 e0       	ldi	r22, 0x03	; 3
    258e:	c8 01       	movw	r24, r16
    2590:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  else
  {	*/
    // save I2C bitrate
#ifndef __SAM3X8E__
    uint8_t twbrbackup = TWBR;
    2594:	e8 eb       	ldi	r30, 0xB8	; 184
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	d0 80       	ld	r13, Z
    TWBR = 12; // upgrade to 400KHz!
    259a:	8c e0       	ldi	r24, 0x0C	; 12
    259c:	80 83       	st	Z, r24
    259e:	c0 e1       	ldi	r28, 0x10	; 16
    25a0:	d1 e0       	ldi	r29, 0x01	; 1
    25a2:	0f 2e       	mov	r0, r31
    25a4:	f0 e1       	ldi	r31, 0x10	; 16
    25a6:	ef 2e       	mov	r14, r31
    25a8:	f3 e0       	ldi	r31, 0x03	; 3
    25aa:	ff 2e       	mov	r15, r31
    25ac:	f0 2d       	mov	r31, r0
		}
      
		i--;
		i2c_stop(); */
		
		i2c_write(_i2caddr,0x40,&buffer[i],16);
    25ae:	20 e1       	ldi	r18, 0x10	; 16
    25b0:	ae 01       	movw	r20, r28
    25b2:	60 e4       	ldi	r22, 0x40	; 64
    25b4:	f8 01       	movw	r30, r16
    25b6:	87 89       	ldd	r24, Z+23	; 0x17
    25b8:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_Z9i2c_writehhPhh>
    25bc:	60 96       	adiw	r28, 0x10	; 16

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i+=16)//i++) 
    25be:	ce 15       	cp	r28, r14
    25c0:	df 05       	cpc	r29, r15
    25c2:	a9 f7       	brne	.-22     	; 0x25ae <_ZN16Adafruit_SSD13067displayEv+0x58>
		
		i2c_write(_i2caddr,0x40,&buffer[i],16);
    }
	
#ifndef __SAM3X8E__
    TWBR = twbrbackup;
    25c4:	d0 92 b8 00 	sts	0x00B8, r13	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
#endif
  //}
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ff 90       	pop	r15
    25d2:	ef 90       	pop	r14
    25d4:	df 90       	pop	r13
    25d6:	08 95       	ret

000025d8 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	e0 e1       	ldi	r30, 0x10	; 16
    25de:	f1 e0       	ldi	r31, 0x01	; 1
    25e0:	df 01       	movw	r26, r30
    25e2:	9c 01       	movw	r18, r24
    25e4:	1d 92       	st	X+, r1
    25e6:	21 50       	subi	r18, 0x01	; 1
    25e8:	30 40       	sbci	r19, 0x00	; 0
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>
    25ec:	08 95       	ret

000025ee <_ZN4GPIO11parsePinMapEh>:
	*GPIO_ADD ^= (1<<pin);
}

void GPIO::setInput()
{
	*(GPIO_ADD-1) &= ~(1<<pin);
    25ee:	68 30       	cpi	r22, 0x08	; 8
    25f0:	38 f4       	brcc	.+14     	; 0x2600 <_ZN4GPIO11parsePinMapEh+0x12>
    25f2:	2b e2       	ldi	r18, 0x2B	; 43
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	fc 01       	movw	r30, r24
    25f8:	31 83       	std	Z+1, r19	; 0x01
    25fa:	20 83       	st	Z, r18
    25fc:	62 83       	std	Z+2, r22	; 0x02
    25fe:	08 95       	ret
    2600:	28 ef       	ldi	r18, 0xF8	; 248
    2602:	26 0f       	add	r18, r22
    2604:	26 30       	cpi	r18, 0x06	; 6
    2606:	38 f4       	brcc	.+14     	; 0x2616 <_ZN4GPIO11parsePinMapEh+0x28>
    2608:	45 e2       	ldi	r20, 0x25	; 37
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	fc 01       	movw	r30, r24
    260e:	51 83       	std	Z+1, r21	; 0x01
    2610:	40 83       	st	Z, r20
    2612:	22 83       	std	Z+2, r18	; 0x02
    2614:	08 95       	ret
    2616:	6e 50       	subi	r22, 0x0E	; 14
    2618:	66 30       	cpi	r22, 0x06	; 6
    261a:	30 f4       	brcc	.+12     	; 0x2628 <_ZN4GPIO11parsePinMapEh+0x3a>
    261c:	28 e2       	ldi	r18, 0x28	; 40
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	fc 01       	movw	r30, r24
    2622:	31 83       	std	Z+1, r19	; 0x01
    2624:	20 83       	st	Z, r18
    2626:	62 83       	std	Z+2, r22	; 0x02
    2628:	08 95       	ret

0000262a <_ZN4GPIO9setOutPutEv>:
    262a:	dc 01       	movw	r26, r24
    262c:	ed 91       	ld	r30, X+
    262e:	fc 91       	ld	r31, X
    2630:	11 97       	sbiw	r26, 0x01	; 1
    2632:	42 91       	ld	r20, -Z
    2634:	21 e0       	ldi	r18, 0x01	; 1
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	c9 01       	movw	r24, r18
    263a:	12 96       	adiw	r26, 0x02	; 2
    263c:	0c 90       	ld	r0, X
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <_ZN4GPIO9setOutPutEv+0x1a>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <_ZN4GPIO9setOutPutEv+0x16>
    2648:	84 2b       	or	r24, r20
    264a:	80 83       	st	Z, r24
    264c:	08 95       	ret

0000264e <_ZN4GPIO4HighEv>:
    264e:	dc 01       	movw	r26, r24
    2650:	ed 91       	ld	r30, X+
    2652:	fc 91       	ld	r31, X
    2654:	11 97       	sbiw	r26, 0x01	; 1
    2656:	40 81       	ld	r20, Z
    2658:	21 e0       	ldi	r18, 0x01	; 1
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	12 96       	adiw	r26, 0x02	; 2
    265e:	0c 90       	ld	r0, X
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <_ZN4GPIO4HighEv+0x18>
    2662:	22 0f       	add	r18, r18
    2664:	33 1f       	adc	r19, r19
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <_ZN4GPIO4HighEv+0x14>
    266a:	24 2b       	or	r18, r20
    266c:	20 83       	st	Z, r18
    266e:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN4GPIO9setOutPutEv>
    2672:	08 95       	ret

00002674 <_ZN4GPIO3LowEv>:
    2674:	dc 01       	movw	r26, r24
    2676:	ed 91       	ld	r30, X+
    2678:	fc 91       	ld	r31, X
    267a:	11 97       	sbiw	r26, 0x01	; 1
    267c:	40 81       	ld	r20, Z
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	12 96       	adiw	r26, 0x02	; 2
    2684:	0c 90       	ld	r0, X
    2686:	02 c0       	rjmp	.+4      	; 0x268c <_ZN4GPIO3LowEv+0x18>
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	0a 94       	dec	r0
    268e:	e2 f7       	brpl	.-8      	; 0x2688 <_ZN4GPIO3LowEv+0x14>
    2690:	20 95       	com	r18
    2692:	24 23       	and	r18, r20
    2694:	20 83       	st	Z, r18
    2696:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN4GPIO9setOutPutEv>
    269a:	08 95       	ret

0000269c <_ZN4GPIO6toggleEv>:
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	ec 01       	movw	r28, r24
    26a2:	0e 94 15 13 	call	0x262a	; 0x262a <_ZN4GPIO9setOutPutEv>
    26a6:	e8 81       	ld	r30, Y
    26a8:	f9 81       	ldd	r31, Y+1	; 0x01
    26aa:	20 81       	ld	r18, Z
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0a 80       	ldd	r0, Y+2	; 0x02
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <_ZN4GPIO6toggleEv+0x1c>
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	0a 94       	dec	r0
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <_ZN4GPIO6toggleEv+0x18>
    26bc:	82 27       	eor	r24, r18
    26be:	80 83       	st	Z, r24
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <_ZN4GPIO16setInputPullDownEv>:
}

void GPIO::setInputPullDown()
{
    26c6:	fc 01       	movw	r30, r24
	*(GPIO_ADD-1) &= ~(1<<pin);
    26c8:	a0 81       	ld	r26, Z
    26ca:	b1 81       	ldd	r27, Z+1	; 0x01
    26cc:	9e 91       	ld	r25, -X
    26ce:	21 e0       	ldi	r18, 0x01	; 1
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	a9 01       	movw	r20, r18
    26d4:	02 80       	ldd	r0, Z+2	; 0x02
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <_ZN4GPIO16setInputPullDownEv+0x16>
    26d8:	44 0f       	add	r20, r20
    26da:	55 1f       	adc	r21, r21
    26dc:	0a 94       	dec	r0
    26de:	e2 f7       	brpl	.-8      	; 0x26d8 <_ZN4GPIO16setInputPullDownEv+0x12>
    26e0:	84 2f       	mov	r24, r20
    26e2:	80 95       	com	r24
    26e4:	89 23       	and	r24, r25
    26e6:	8c 93       	st	X, r24
	*(GPIO_ADD) &= ~(1<<pin);
    26e8:	a0 81       	ld	r26, Z
    26ea:	b1 81       	ldd	r27, Z+1	; 0x01
    26ec:	8c 91       	ld	r24, X
    26ee:	02 80       	ldd	r0, Z+2	; 0x02
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <_ZN4GPIO16setInputPullDownEv+0x30>
    26f2:	22 0f       	add	r18, r18
    26f4:	33 1f       	adc	r19, r19
    26f6:	0a 94       	dec	r0
    26f8:	e2 f7       	brpl	.-8      	; 0x26f2 <_ZN4GPIO16setInputPullDownEv+0x2c>
    26fa:	20 95       	com	r18
    26fc:	28 23       	and	r18, r24
    26fe:	2c 93       	st	X, r18
    2700:	08 95       	ret

00002702 <_ZN4GPIO14setInputPullUpEv>:
}

void GPIO::setInputPullUp()
{
    2702:	fc 01       	movw	r30, r24
	*(GPIO_ADD-1) &= ~(1<<pin);
    2704:	a0 81       	ld	r26, Z
    2706:	b1 81       	ldd	r27, Z+1	; 0x01
    2708:	9e 91       	ld	r25, -X
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	a9 01       	movw	r20, r18
    2710:	02 80       	ldd	r0, Z+2	; 0x02
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <_ZN4GPIO14setInputPullUpEv+0x16>
    2714:	44 0f       	add	r20, r20
    2716:	55 1f       	adc	r21, r21
    2718:	0a 94       	dec	r0
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <_ZN4GPIO14setInputPullUpEv+0x12>
    271c:	84 2f       	mov	r24, r20
    271e:	80 95       	com	r24
    2720:	89 23       	and	r24, r25
    2722:	8c 93       	st	X, r24
	*(GPIO_ADD) |= (1<<pin);
    2724:	a0 81       	ld	r26, Z
    2726:	b1 81       	ldd	r27, Z+1	; 0x01
    2728:	8c 91       	ld	r24, X
    272a:	02 80       	ldd	r0, Z+2	; 0x02
    272c:	02 c0       	rjmp	.+4      	; 0x2732 <_ZN4GPIO14setInputPullUpEv+0x30>
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	0a 94       	dec	r0
    2734:	e2 f7       	brpl	.-8      	; 0x272e <_ZN4GPIO14setInputPullUpEv+0x2c>
    2736:	28 2b       	or	r18, r24
    2738:	2c 93       	st	X, r18
    273a:	08 95       	ret

0000273c <_ZN4GPIO8getStateEv>:
}

bool GPIO::getState()
{
	return (*(GPIO_ADD-2) & (1<<pin)); //PIN register address is always PORT_reg_address-2 for respective ports
    273c:	dc 01       	movw	r26, r24
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	11 97       	sbiw	r26, 0x01	; 1
    2744:	32 97       	sbiw	r30, 0x02	; 2
    2746:	20 81       	ld	r18, Z
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	f9 01       	movw	r30, r18
    274c:	12 96       	adiw	r26, 0x02	; 2
    274e:	0c 90       	ld	r0, X
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <_ZN4GPIO8getStateEv+0x1a>
    2752:	f5 95       	asr	r31
    2754:	e7 95       	ror	r30
    2756:	0a 94       	dec	r0
    2758:	e2 f7       	brpl	.-8      	; 0x2752 <_ZN4GPIO8getStateEv+0x16>
    275a:	cf 01       	movw	r24, r30
}
    275c:	81 70       	andi	r24, 0x01	; 1
    275e:	08 95       	ret

00002760 <_ZN4GPIOC1Eh>:


GPIO::GPIO(uint8_t GPIO_PIN_NUM)
{
	parsePinMap(GPIO_PIN_NUM);
    2760:	0e 94 f7 12 	call	0x25ee	; 0x25ee <_ZN4GPIO11parsePinMapEh>
    2764:	08 95       	ret

00002766 <_ZN14HardwareSerial9availableEv>:
}

uint8_t HardwareSerial::getStatusSpaces()
{
	return ex_blanks;
}
    2766:	fc 01       	movw	r30, r24
    2768:	24 85       	ldd	r18, Z+12	; 0x0c
    276a:	35 85       	ldd	r19, Z+13	; 0x0d
    276c:	f9 01       	movw	r30, r18
    276e:	e0 5c       	subi	r30, 0xC0	; 192
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	32 96       	adiw	r30, 0x02	; 2
    2778:	20 81       	ld	r18, Z
    277a:	31 81       	ldd	r19, Z+1	; 0x01
    277c:	82 1b       	sub	r24, r18
    277e:	93 0b       	sbc	r25, r19
    2780:	8f 73       	andi	r24, 0x3F	; 63
    2782:	99 27       	eor	r25, r25
    2784:	08 95       	ret

00002786 <_ZN14HardwareSerial4peekEv>:
    2786:	fc 01       	movw	r30, r24
    2788:	84 85       	ldd	r24, Z+12	; 0x0c
    278a:	95 85       	ldd	r25, Z+13	; 0x0d
    278c:	fc 01       	movw	r30, r24
    278e:	e0 5c       	subi	r30, 0xC0	; 192
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	40 81       	ld	r20, Z
    2794:	51 81       	ldd	r21, Z+1	; 0x01
    2796:	32 96       	adiw	r30, 0x02	; 2
    2798:	20 81       	ld	r18, Z
    279a:	31 81       	ldd	r19, Z+1	; 0x01
    279c:	42 17       	cp	r20, r18
    279e:	53 07       	cpc	r21, r19
    27a0:	41 f0       	breq	.+16     	; 0x27b2 <_ZN14HardwareSerial4peekEv+0x2c>
    27a2:	20 81       	ld	r18, Z
    27a4:	31 81       	ldd	r19, Z+1	; 0x01
    27a6:	fc 01       	movw	r30, r24
    27a8:	e2 0f       	add	r30, r18
    27aa:	f3 1f       	adc	r31, r19
    27ac:	80 81       	ld	r24, Z
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	08 95       	ret
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	9f ef       	ldi	r25, 0xFF	; 255
    27b6:	08 95       	ret

000027b8 <_ZN14HardwareSerial4readEv>:
    27b8:	fc 01       	movw	r30, r24
    27ba:	84 85       	ldd	r24, Z+12	; 0x0c
    27bc:	95 85       	ldd	r25, Z+13	; 0x0d
    27be:	fc 01       	movw	r30, r24
    27c0:	e0 5c       	subi	r30, 0xC0	; 192
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	40 81       	ld	r20, Z
    27c6:	51 81       	ldd	r21, Z+1	; 0x01
    27c8:	32 96       	adiw	r30, 0x02	; 2
    27ca:	20 81       	ld	r18, Z
    27cc:	31 81       	ldd	r19, Z+1	; 0x01
    27ce:	42 17       	cp	r20, r18
    27d0:	53 07       	cpc	r21, r19
    27d2:	81 f0       	breq	.+32     	; 0x27f4 <_ZN14HardwareSerial4readEv+0x3c>
    27d4:	20 81       	ld	r18, Z
    27d6:	31 81       	ldd	r19, Z+1	; 0x01
    27d8:	dc 01       	movw	r26, r24
    27da:	a2 0f       	add	r26, r18
    27dc:	b3 1f       	adc	r27, r19
    27de:	8c 91       	ld	r24, X
    27e0:	20 81       	ld	r18, Z
    27e2:	31 81       	ldd	r19, Z+1	; 0x01
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	2f 73       	andi	r18, 0x3F	; 63
    27ea:	33 27       	eor	r19, r19
    27ec:	31 83       	std	Z+1, r19	; 0x01
    27ee:	20 83       	st	Z, r18
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	08 95       	ret
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	08 95       	ret

000027fa <_ZN14HardwareSerial5flushEv>:
    27fa:	dc 01       	movw	r26, r24
    27fc:	1e 96       	adiw	r26, 0x0e	; 14
    27fe:	ed 91       	ld	r30, X+
    2800:	fc 91       	ld	r31, X
    2802:	1f 97       	sbiw	r26, 0x0f	; 15
    2804:	df 01       	movw	r26, r30
    2806:	a0 5c       	subi	r26, 0xC0	; 192
    2808:	bf 4f       	sbci	r27, 0xFF	; 255
    280a:	ee 5b       	subi	r30, 0xBE	; 190
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	2d 91       	ld	r18, X+
    2810:	3c 91       	ld	r19, X
    2812:	11 97       	sbiw	r26, 0x01	; 1
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	28 17       	cp	r18, r24
    281a:	39 07       	cpc	r19, r25
    281c:	c1 f7       	brne	.-16     	; 0x280e <_ZN14HardwareSerial5flushEv+0x14>
    281e:	08 95       	ret

00002820 <_ZN14HardwareSerial5writeEh>:
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
    282a:	8a a1       	ldd	r24, Y+34	; 0x22
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	b9 f1       	breq	.+110    	; 0x289e <_ZN14HardwareSerial5writeEh+0x7e>
    2830:	0e 85       	ldd	r16, Y+14	; 0x0e
    2832:	1f 85       	ldd	r17, Y+15	; 0x0f
    2834:	f8 01       	movw	r30, r16
    2836:	e0 5c       	subi	r30, 0xC0	; 192
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	01 90       	ld	r0, Z+
    283c:	f0 81       	ld	r31, Z
    283e:	e0 2d       	mov	r30, r0
    2840:	31 96       	adiw	r30, 0x01	; 1
    2842:	ef 73       	andi	r30, 0x3F	; 63
    2844:	ff 27       	eor	r31, r31
    2846:	d8 01       	movw	r26, r16
    2848:	ae 5b       	subi	r26, 0xBE	; 190
    284a:	bf 4f       	sbci	r27, 0xFF	; 255
    284c:	7e 2f       	mov	r23, r30
    284e:	9f 2f       	mov	r25, r31
    2850:	4d 91       	ld	r20, X+
    2852:	5c 91       	ld	r21, X
    2854:	11 97       	sbiw	r26, 0x01	; 1
    2856:	27 2f       	mov	r18, r23
    2858:	39 2f       	mov	r19, r25
    285a:	4e 17       	cp	r20, r30
    285c:	5f 07       	cpc	r21, r31
    285e:	c1 f3       	breq	.-16     	; 0x2850 <_ZN14HardwareSerial5writeEh+0x30>
    2860:	f8 01       	movw	r30, r16
    2862:	e0 5c       	subi	r30, 0xC0	; 192
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	f8 01       	movw	r30, r16
    286c:	e8 0f       	add	r30, r24
    286e:	f9 1f       	adc	r31, r25
    2870:	60 83       	st	Z, r22
    2872:	ee 85       	ldd	r30, Y+14	; 0x0e
    2874:	ff 85       	ldd	r31, Y+15	; 0x0f
    2876:	e0 5c       	subi	r30, 0xC0	; 192
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	31 83       	std	Z+1, r19	; 0x01
    287c:	20 83       	st	Z, r18
    287e:	ee 89       	ldd	r30, Y+22	; 0x16
    2880:	ff 89       	ldd	r31, Y+23	; 0x17
    2882:	20 81       	ld	r18, Z
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0d 8c       	ldd	r0, Y+29	; 0x1d
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <_ZN14HardwareSerial5writeEh+0x70>
    288c:	88 0f       	add	r24, r24
    288e:	99 1f       	adc	r25, r25
    2890:	0a 94       	dec	r0
    2892:	e2 f7       	brpl	.-8      	; 0x288c <_ZN14HardwareSerial5writeEh+0x6c>
    2894:	82 2b       	or	r24, r18
    2896:	80 83       	st	Z, r24
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <_ZN14HardwareSerial5writeEh+0x82>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	08 95       	ret

000028ac <_Z11serialEventv>:
    28ac:	08 95       	ret

000028ae <__vector_18>:
    28ae:	1f 92       	push	r1
    28b0:	0f 92       	push	r0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	0f 92       	push	r0
    28b6:	11 24       	eor	r1, r1
    28b8:	2f 93       	push	r18
    28ba:	3f 93       	push	r19
    28bc:	4f 93       	push	r20
    28be:	5f 93       	push	r21
    28c0:	6f 93       	push	r22
    28c2:	7f 93       	push	r23
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
    28c8:	af 93       	push	r26
    28ca:	bf 93       	push	r27
    28cc:	cf 93       	push	r28
    28ce:	ef 93       	push	r30
    28d0:	ff 93       	push	r31
    28d2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    28d6:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <__data_end+0x20>
    28da:	88 23       	and	r24, r24
    28dc:	99 f0       	breq	.+38     	; 0x2904 <__vector_18+0x56>
    28de:	cd 30       	cpi	r28, 0x0D	; 13
    28e0:	59 f4       	brne	.+22     	; 0x28f8 <__vector_18+0x4a>
    28e2:	6d e0       	ldi	r22, 0x0D	; 13
    28e4:	88 ea       	ldi	r24, 0xA8	; 168
    28e6:	93 e0       	ldi	r25, 0x03	; 3
    28e8:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN14HardwareSerial5writeEh>
    28ec:	6a e0       	ldi	r22, 0x0A	; 10
    28ee:	88 ea       	ldi	r24, 0xA8	; 168
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN14HardwareSerial5writeEh>
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <__vector_18+0x5a>
    28f8:	6c 2f       	mov	r22, r28
    28fa:	88 ea       	ldi	r24, 0xA8	; 168
    28fc:	93 e0       	ldi	r25, 0x03	; 3
    28fe:	0e 94 10 14 	call	0x2820	; 0x2820 <_ZN14HardwareSerial5writeEh>
    2902:	06 c0       	rjmp	.+12     	; 0x2910 <__vector_18+0x62>
    2904:	cd 30       	cpi	r28, 0x0D	; 13
    2906:	21 f4       	brne	.+8      	; 0x2910 <__vector_18+0x62>
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <__data_end+0x1f>
    290e:	07 c0       	rjmp	.+14     	; 0x291e <__vector_18+0x70>
    2910:	c0 32       	cpi	r28, 0x20	; 32
    2912:	29 f4       	brne	.+10     	; 0x291e <__vector_18+0x70>
    2914:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <__data_end+0x21>
    2918:	81 11       	cpse	r24, r1
    291a:	56 c0       	rjmp	.+172    	; 0x29c8 <__vector_18+0x11a>
    291c:	32 c0       	rjmp	.+100    	; 0x2982 <__vector_18+0xd4>
    291e:	cf 37       	cpi	r28, 0x7F	; 127
    2920:	81 f5       	brne	.+96     	; 0x2982 <__vector_18+0xd4>
    2922:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <backspace_det>
    2926:	88 23       	and	r24, r24
    2928:	61 f1       	breq	.+88     	; 0x2982 <__vector_18+0xd4>
    292a:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <overflow_count>
    292e:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <overflow_count+0x1>
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	31 f0       	breq	.+12     	; 0x2942 <__vector_18+0x94>
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <overflow_count+0x1>
    293c:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <overflow_count>
    2940:	43 c0       	rjmp	.+134    	; 0x29c8 <__vector_18+0x11a>
    2942:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <rx_buffer+0x40>
    2946:	30 91 52 04 	lds	r19, 0x0452	; 0x800452 <rx_buffer+0x41>
    294a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <rx_buffer+0x42>
    294e:	90 91 54 04 	lds	r25, 0x0454	; 0x800454 <rx_buffer+0x43>
    2952:	28 17       	cp	r18, r24
    2954:	39 07       	cpc	r19, r25
    2956:	c1 f1       	breq	.+112    	; 0x29c8 <__vector_18+0x11a>
    2958:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <rx_buffer+0x40>
    295c:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <rx_buffer+0x41>
    2960:	89 2b       	or	r24, r25
    2962:	39 f4       	brne	.+14     	; 0x2972 <__vector_18+0xc4>
    2964:	8f e3       	ldi	r24, 0x3F	; 63
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	90 93 52 04 	sts	0x0452, r25	; 0x800452 <rx_buffer+0x41>
    296c:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <rx_buffer+0x40>
    2970:	2b c0       	rjmp	.+86     	; 0x29c8 <__vector_18+0x11a>
    2972:	e1 e5       	ldi	r30, 0x51	; 81
    2974:	f4 e0       	ldi	r31, 0x04	; 4
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
    2980:	23 c0       	rjmp	.+70     	; 0x29c8 <__vector_18+0x11a>
    2982:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <rx_buffer+0x40>
    2986:	90 91 52 04 	lds	r25, 0x0452	; 0x800452 <rx_buffer+0x41>
    298a:	20 91 53 04 	lds	r18, 0x0453	; 0x800453 <rx_buffer+0x42>
    298e:	30 91 54 04 	lds	r19, 0x0454	; 0x800454 <rx_buffer+0x43>
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	8f 73       	andi	r24, 0x3F	; 63
    2996:	99 27       	eor	r25, r25
    2998:	28 17       	cp	r18, r24
    299a:	39 07       	cpc	r19, r25
    299c:	61 f0       	breq	.+24     	; 0x29b6 <__vector_18+0x108>
    299e:	a1 e5       	ldi	r26, 0x51	; 81
    29a0:	b4 e0       	ldi	r27, 0x04	; 4
    29a2:	ed 91       	ld	r30, X+
    29a4:	fc 91       	ld	r31, X
    29a6:	11 97       	sbiw	r26, 0x01	; 1
    29a8:	ef 5e       	subi	r30, 0xEF	; 239
    29aa:	fb 4f       	sbci	r31, 0xFB	; 251
    29ac:	c0 83       	st	Z, r28
    29ae:	11 96       	adiw	r26, 0x01	; 1
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	09 c0       	rjmp	.+18     	; 0x29c8 <__vector_18+0x11a>
    29b6:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <overflow_count>
    29ba:	90 91 cc 03 	lds	r25, 0x03CC	; 0x8003cc <overflow_count+0x1>
    29be:	01 96       	adiw	r24, 0x01	; 1
    29c0:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <overflow_count+0x1>
    29c4:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <overflow_count>
    29c8:	ff 91       	pop	r31
    29ca:	ef 91       	pop	r30
    29cc:	cf 91       	pop	r28
    29ce:	bf 91       	pop	r27
    29d0:	af 91       	pop	r26
    29d2:	9f 91       	pop	r25
    29d4:	8f 91       	pop	r24
    29d6:	7f 91       	pop	r23
    29d8:	6f 91       	pop	r22
    29da:	5f 91       	pop	r21
    29dc:	4f 91       	pop	r20
    29de:	3f 91       	pop	r19
    29e0:	2f 91       	pop	r18
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	0f 90       	pop	r0
    29e8:	1f 90       	pop	r1
    29ea:	18 95       	reti

000029ec <_Z14serialEventRunv>:
    29ec:	88 ea       	ldi	r24, 0xA8	; 168
    29ee:	93 e0       	ldi	r25, 0x03	; 3
    29f0:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN14HardwareSerial9availableEv>
    29f4:	89 2b       	or	r24, r25
    29f6:	11 f0       	breq	.+4      	; 0x29fc <_Z14serialEventRunv+0x10>
    29f8:	0e 94 56 14 	call	0x28ac	; 0x28ac <_Z11serialEventv>
    29fc:	08 95       	ret

000029fe <__vector_19>:
    29fe:	1f 92       	push	r1
    2a00:	0f 92       	push	r0
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	0f 92       	push	r0
    2a06:	11 24       	eor	r1, r1
    2a08:	2f 93       	push	r18
    2a0a:	3f 93       	push	r19
    2a0c:	8f 93       	push	r24
    2a0e:	9f 93       	push	r25
    2a10:	af 93       	push	r26
    2a12:	bf 93       	push	r27
    2a14:	ef 93       	push	r30
    2a16:	ff 93       	push	r31
    2a18:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <tx_buffer+0x40>
    2a1c:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <tx_buffer+0x41>
    2a20:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <tx_buffer+0x42>
    2a24:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <tx_buffer+0x43>
    2a28:	28 17       	cp	r18, r24
    2a2a:	39 07       	cpc	r19, r25
    2a2c:	31 f4       	brne	.+12     	; 0x2a3a <__vector_19+0x3c>
    2a2e:	e1 ec       	ldi	r30, 0xC1	; 193
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	8f 7d       	andi	r24, 0xDF	; 223
    2a36:	80 83       	st	Z, r24
    2a38:	10 c0       	rjmp	.+32     	; 0x2a5a <__vector_19+0x5c>
    2a3a:	ef e0       	ldi	r30, 0x0F	; 15
    2a3c:	f4 e0       	ldi	r31, 0x04	; 4
    2a3e:	a0 81       	ld	r26, Z
    2a40:	b1 81       	ldd	r27, Z+1	; 0x01
    2a42:	a3 53       	subi	r26, 0x33	; 51
    2a44:	bc 4f       	sbci	r27, 0xFC	; 252
    2a46:	2c 91       	ld	r18, X
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	8f 73       	andi	r24, 0x3F	; 63
    2a50:	99 27       	eor	r25, r25
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	80 83       	st	Z, r24
    2a56:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2a5a:	ff 91       	pop	r31
    2a5c:	ef 91       	pop	r30
    2a5e:	bf 91       	pop	r27
    2a60:	af 91       	pop	r26
    2a62:	9f 91       	pop	r25
    2a64:	8f 91       	pop	r24
    2a66:	3f 91       	pop	r19
    2a68:	2f 91       	pop	r18
    2a6a:	0f 90       	pop	r0
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	0f 90       	pop	r0
    2a70:	1f 90       	pop	r1
    2a72:	18 95       	reti

00002a74 <_ZN14HardwareSerial3endEv>:
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	ec 01       	movw	r28, r24
    2a7a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2a7c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2a7e:	df 01       	movw	r26, r30
    2a80:	a0 5c       	subi	r26, 0xC0	; 192
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	ee 5b       	subi	r30, 0xBE	; 190
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	4d 91       	ld	r20, X+
    2a8a:	5c 91       	ld	r21, X
    2a8c:	11 97       	sbiw	r26, 0x01	; 1
    2a8e:	20 81       	ld	r18, Z
    2a90:	31 81       	ldd	r19, Z+1	; 0x01
    2a92:	42 17       	cp	r20, r18
    2a94:	53 07       	cpc	r21, r19
    2a96:	c1 f7       	brne	.-16     	; 0x2a88 <_ZN14HardwareSerial3endEv+0x14>
    2a98:	ee 89       	ldd	r30, Y+22	; 0x16
    2a9a:	ff 89       	ldd	r31, Y+23	; 0x17
    2a9c:	30 81       	ld	r19, Z
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	0a 8c       	ldd	r0, Y+26	; 0x1a
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <_ZN14HardwareSerial3endEv+0x38>
    2aa8:	44 0f       	add	r20, r20
    2aaa:	55 1f       	adc	r21, r21
    2aac:	0a 94       	dec	r0
    2aae:	e2 f7       	brpl	.-8      	; 0x2aa8 <_ZN14HardwareSerial3endEv+0x34>
    2ab0:	24 2f       	mov	r18, r20
    2ab2:	20 95       	com	r18
    2ab4:	23 23       	and	r18, r19
    2ab6:	20 83       	st	Z, r18
    2ab8:	ee 89       	ldd	r30, Y+22	; 0x16
    2aba:	ff 89       	ldd	r31, Y+23	; 0x17
    2abc:	30 81       	ld	r19, Z
    2abe:	ac 01       	movw	r20, r24
    2ac0:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <_ZN14HardwareSerial3endEv+0x54>
    2ac4:	44 0f       	add	r20, r20
    2ac6:	55 1f       	adc	r21, r21
    2ac8:	0a 94       	dec	r0
    2aca:	e2 f7       	brpl	.-8      	; 0x2ac4 <_ZN14HardwareSerial3endEv+0x50>
    2acc:	24 2f       	mov	r18, r20
    2ace:	20 95       	com	r18
    2ad0:	23 23       	and	r18, r19
    2ad2:	20 83       	st	Z, r18
    2ad4:	ee 89       	ldd	r30, Y+22	; 0x16
    2ad6:	ff 89       	ldd	r31, Y+23	; 0x17
    2ad8:	30 81       	ld	r19, Z
    2ada:	ac 01       	movw	r20, r24
    2adc:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <_ZN14HardwareSerial3endEv+0x70>
    2ae0:	44 0f       	add	r20, r20
    2ae2:	55 1f       	adc	r21, r21
    2ae4:	0a 94       	dec	r0
    2ae6:	e2 f7       	brpl	.-8      	; 0x2ae0 <_ZN14HardwareSerial3endEv+0x6c>
    2ae8:	24 2f       	mov	r18, r20
    2aea:	20 95       	com	r18
    2aec:	23 23       	and	r18, r19
    2aee:	20 83       	st	Z, r18
    2af0:	ee 89       	ldd	r30, Y+22	; 0x16
    2af2:	ff 89       	ldd	r31, Y+23	; 0x17
    2af4:	20 81       	ld	r18, Z
    2af6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <_ZN14HardwareSerial3endEv+0x8a>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	0a 94       	dec	r0
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <_ZN14HardwareSerial3endEv+0x86>
    2b02:	80 95       	com	r24
    2b04:	82 23       	and	r24, r18
    2b06:	80 83       	st	Z, r24
    2b08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	ee 5b       	subi	r30, 0xBE	; 190
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	20 81       	ld	r18, Z
    2b14:	31 81       	ldd	r19, Z+1	; 0x01
    2b16:	32 97       	sbiw	r30, 0x02	; 2
    2b18:	31 83       	std	Z+1, r19	; 0x01
    2b1a:	20 83       	st	Z, r18
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <_ZN14HardwareSerial16crStatusDetectedEv>:
    2b22:	fc 01       	movw	r30, r24
    2b24:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b26:	88 23       	and	r24, r24
    2b28:	11 f0       	breq	.+4      	; 0x2b2e <_ZN14HardwareSerial16crStatusDetectedEv+0xc>
    2b2a:	17 8e       	std	Z+31, r1	; 0x1f
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	08 95       	ret

00002b30 <_ZN14HardwareSerial10enableEchoEv>:
    2b30:	21 e0       	ldi	r18, 0x01	; 1
    2b32:	fc 01       	movw	r30, r24
    2b34:	20 a3       	std	Z+32, r18	; 0x20
    2b36:	08 95       	ret

00002b38 <_ZN14HardwareSerial11disableEchoEv>:
    2b38:	fc 01       	movw	r30, r24
    2b3a:	10 a2       	std	Z+32, r1	; 0x20
    2b3c:	08 95       	ret

00002b3e <_ZN14HardwareSerial13inWhiteSpacesEv>:
    2b3e:	fc 01       	movw	r30, r24
    2b40:	11 a2       	std	Z+33, r1	; 0x21
    2b42:	08 95       	ret

00002b44 <_ZN14HardwareSerial13exWhiteSpacesEv>:
    2b44:	21 e0       	ldi	r18, 0x01	; 1
    2b46:	fc 01       	movw	r30, r24
    2b48:	21 a3       	std	Z+33, r18	; 0x21
    2b4a:	08 95       	ret

00002b4c <_ZN14HardwareSerial15snoopModeEnableEv>:

#endif

#ifdef SERIAL_SNOOP_ENABLE
void HardwareSerial::snoopModeEnable()
{
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ec 01       	movw	r28, r24
	flush();		//wait until data in Transmit buffer is transmitted
    2b52:	e8 81       	ld	r30, Y
    2b54:	f9 81       	ldd	r31, Y+1	; 0x01
    2b56:	02 84       	ldd	r0, Z+10	; 0x0a
    2b58:	f3 85       	ldd	r31, Z+11	; 0x0b
    2b5a:	e0 2d       	mov	r30, r0
    2b5c:	09 95       	icall
	cbi(*_ucsrb, _txen);		//disable TX
    2b5e:	ee 89       	ldd	r30, Y+22	; 0x16
    2b60:	ff 89       	ldd	r31, Y+23	; 0x17
    2b62:	30 81       	ld	r19, Z
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	ac 01       	movw	r20, r24
    2b6a:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <_ZN14HardwareSerial15snoopModeEnableEv+0x26>
    2b6e:	44 0f       	add	r20, r20
    2b70:	55 1f       	adc	r21, r21
    2b72:	0a 94       	dec	r0
    2b74:	e2 f7       	brpl	.-8      	; 0x2b6e <_ZN14HardwareSerial15snoopModeEnableEv+0x22>
    2b76:	24 2f       	mov	r18, r20
    2b78:	20 95       	com	r18
    2b7a:	23 23       	and	r18, r19
    2b7c:	20 83       	st	Z, r18
	cbi(*_ucsrb, _udrie);		//disable UDRE IRQ
    2b7e:	ee 89       	ldd	r30, Y+22	; 0x16
    2b80:	ff 89       	ldd	r31, Y+23	; 0x17
    2b82:	20 81       	ld	r18, Z
    2b84:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <_ZN14HardwareSerial15snoopModeEnableEv+0x40>
    2b88:	88 0f       	add	r24, r24
    2b8a:	99 1f       	adc	r25, r25
    2b8c:	0a 94       	dec	r0
    2b8e:	e2 f7       	brpl	.-8      	; 0x2b88 <_ZN14HardwareSerial15snoopModeEnableEv+0x3c>
    2b90:	80 95       	com	r24
    2b92:	82 23       	and	r24, r18
    2b94:	80 83       	st	Z, r24
	snoop_status = SNOOP_ENABLE;
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	8a a3       	std	Y+34, r24	; 0x22
}
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	08 95       	ret

00002ba0 <_ZN14HardwareSerial16snoopModeDisableEv>:

void HardwareSerial::snoopModeDisable()
{
    2ba0:	fc 01       	movw	r30, r24
	snoop_status = SNOOP_DISABLE;
    2ba2:	12 a2       	std	Z+34, r1	; 0x22
	sbi(*_ucsrb, _txen);		//Enable TX., we don't need to enable UDRIE IRQ because it will enabled by Serial.write().
    2ba4:	a6 89       	ldd	r26, Z+22	; 0x16
    2ba6:	b7 89       	ldd	r27, Z+23	; 0x17
    2ba8:	4c 91       	ld	r20, X
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	c9 01       	movw	r24, r18
    2bb0:	03 8c       	ldd	r0, Z+27	; 0x1b
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <_ZN14HardwareSerial16snoopModeDisableEv+0x18>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	0a 94       	dec	r0
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <_ZN14HardwareSerial16snoopModeDisableEv+0x14>
    2bbc:	84 2b       	or	r24, r20
    2bbe:	8c 93       	st	X, r24
    2bc0:	08 95       	ret

00002bc2 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    2bc2:	cf 92       	push	r12
    2bc4:	df 92       	push	r13
    2bc6:	ef 92       	push	r14
    2bc8:	ff 92       	push	r15
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	ec 01       	movw	r28, r24
    2bd0:	6a 01       	movw	r12, r20
    2bd2:	7b 01       	movw	r14, r22

#ifdef SERIAL_REMOVE_SPACE		//neutron mods

void HardwareSerial::inWhiteSpaces()
{
	ex_blanks = 0;
    2bd4:	19 a2       	std	Y+33, r1	; 0x21
	ate_enabled = 1;
}

void HardwareSerial::disableEcho()
{
	ate_enabled = 0;
    2bd6:	18 a2       	std	Y+32, r1	; 0x20
	
	#endif
	
	#ifdef SERIAL_SNOOP_ENABLE
	
	snoopModeDisable();
    2bd8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN14HardwareSerial16snoopModeDisableEv>
  }
#endif

try_again:
  
  if (use_u2x) {
    2bdc:	c1 14       	cp	r12, r1
    2bde:	81 ee       	ldi	r24, 0xE1	; 225
    2be0:	d8 06       	cpc	r13, r24
    2be2:	e1 04       	cpc	r14, r1
    2be4:	f1 04       	cpc	r15, r1
    2be6:	09 f1       	breq	.+66     	; 0x2c2a <_ZN14HardwareSerial5beginEm+0x68>
    *_ucsra = 1 << _u2x;
    2be8:	ec 89       	ldd	r30, Y+20	; 0x14
    2bea:	fd 89       	ldd	r31, Y+21	; 0x15
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <_ZN14HardwareSerial5beginEm+0x36>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <_ZN14HardwareSerial5beginEm+0x32>
    2bfc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	79 e0       	ldi	r23, 0x09	; 9
    2c02:	8d e3       	ldi	r24, 0x3D	; 61
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a7 01       	movw	r20, r14
    2c08:	96 01       	movw	r18, r12
    2c0a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__udivmodsi4>
    2c0e:	da 01       	movw	r26, r20
    2c10:	c9 01       	movw	r24, r18
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	a1 09       	sbc	r26, r1
    2c16:	b1 09       	sbc	r27, r1
    2c18:	b6 95       	lsr	r27
    2c1a:	a7 95       	ror	r26
    2c1c:	97 95       	ror	r25
    2c1e:	87 95       	ror	r24
    2c20:	9c 01       	movw	r18, r24
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2c22:	21 15       	cp	r18, r1
    2c24:	80 e1       	ldi	r24, 0x10	; 16
    2c26:	38 07       	cpc	r19, r24
    2c28:	a8 f0       	brcs	.+42     	; 0x2c54 <_ZN14HardwareSerial5beginEm+0x92>
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    2c2a:	ec 89       	ldd	r30, Y+20	; 0x14
    2c2c:	fd 89       	ldd	r31, Y+21	; 0x15
    2c2e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2c30:	60 e8       	ldi	r22, 0x80	; 128
    2c32:	74 e8       	ldi	r23, 0x84	; 132
    2c34:	8e e1       	ldi	r24, 0x1E	; 30
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a7 01       	movw	r20, r14
    2c3a:	96 01       	movw	r18, r12
    2c3c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__udivmodsi4>
    2c40:	da 01       	movw	r26, r20
    2c42:	c9 01       	movw	r24, r18
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	a1 09       	sbc	r26, r1
    2c48:	b1 09       	sbc	r27, r1
    2c4a:	b6 95       	lsr	r27
    2c4c:	a7 95       	ror	r26
    2c4e:	97 95       	ror	r25
    2c50:	87 95       	ror	r24
    2c52:	9c 01       	movw	r18, r24
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2c54:	e8 89       	ldd	r30, Y+16	; 0x10
    2c56:	f9 89       	ldd	r31, Y+17	; 0x11
    2c58:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2c5a:	ea 89       	ldd	r30, Y+18	; 0x12
    2c5c:	fb 89       	ldd	r31, Y+19	; 0x13
    2c5e:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    2c60:	ee 89       	ldd	r30, Y+22	; 0x16
    2c62:	ff 89       	ldd	r31, Y+23	; 0x17
    2c64:	40 81       	ld	r20, Z
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 01       	movw	r18, r24
    2c6c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <_ZN14HardwareSerial5beginEm+0xb2>
    2c70:	22 0f       	add	r18, r18
    2c72:	33 1f       	adc	r19, r19
    2c74:	0a 94       	dec	r0
    2c76:	e2 f7       	brpl	.-8      	; 0x2c70 <_ZN14HardwareSerial5beginEm+0xae>
    2c78:	24 2b       	or	r18, r20
    2c7a:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
    2c7c:	ee 89       	ldd	r30, Y+22	; 0x16
    2c7e:	ff 89       	ldd	r31, Y+23	; 0x17
    2c80:	40 81       	ld	r20, Z
    2c82:	9c 01       	movw	r18, r24
    2c84:	0b 8c       	ldd	r0, Y+27	; 0x1b
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <_ZN14HardwareSerial5beginEm+0xca>
    2c88:	22 0f       	add	r18, r18
    2c8a:	33 1f       	adc	r19, r19
    2c8c:	0a 94       	dec	r0
    2c8e:	e2 f7       	brpl	.-8      	; 0x2c88 <_ZN14HardwareSerial5beginEm+0xc6>
    2c90:	24 2b       	or	r18, r20
    2c92:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
    2c94:	ee 89       	ldd	r30, Y+22	; 0x16
    2c96:	ff 89       	ldd	r31, Y+23	; 0x17
    2c98:	40 81       	ld	r20, Z
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <_ZN14HardwareSerial5beginEm+0xe2>
    2ca0:	22 0f       	add	r18, r18
    2ca2:	33 1f       	adc	r19, r19
    2ca4:	0a 94       	dec	r0
    2ca6:	e2 f7       	brpl	.-8      	; 0x2ca0 <_ZN14HardwareSerial5beginEm+0xde>
    2ca8:	24 2b       	or	r18, r20
    2caa:	20 83       	st	Z, r18
  cbi(*_ucsrb, _udrie);
    2cac:	ee 89       	ldd	r30, Y+22	; 0x16
    2cae:	ff 89       	ldd	r31, Y+23	; 0x17
    2cb0:	20 81       	ld	r18, Z
    2cb2:	0d 8c       	ldd	r0, Y+29	; 0x1d
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <_ZN14HardwareSerial5beginEm+0xf8>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	0a 94       	dec	r0
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <_ZN14HardwareSerial5beginEm+0xf4>
    2cbe:	80 95       	com	r24
    2cc0:	82 23       	and	r24, r18
    2cc2:	80 83       	st	Z, r24
	cr_status=1;
}

void HardwareSerial::crStatusClear()
{
	cr_status=0;
    2cc4:	1f 8e       	std	Y+31, r1	; 0x1f
  
  #ifdef SERIAL_CR_DETECT
	crStatusClear(); //neutron mods
  #endif
  
}
    2cc6:	df 91       	pop	r29
    2cc8:	cf 91       	pop	r28
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	cf 90       	pop	r12
    2cd2:	08 95       	ret

00002cd4 <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2cd4:	e8 ea       	ldi	r30, 0xA8	; 168
    2cd6:	f3 e0       	ldi	r31, 0x03	; 3
    2cd8:	13 82       	std	Z+3, r1	; 0x03
    2cda:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2cdc:	88 ee       	ldi	r24, 0xE8	; 232
    2cde:	93 e0       	ldi	r25, 0x03	; 3
    2ce0:	a0 e0       	ldi	r26, 0x00	; 0
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	84 83       	std	Z+4, r24	; 0x04
    2ce6:	95 83       	std	Z+5, r25	; 0x05
    2ce8:	a6 83       	std	Z+6, r26	; 0x06
    2cea:	b7 83       	std	Z+7, r27	; 0x07

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2cec:	87 e4       	ldi	r24, 0x47	; 71
    2cee:	93 e0       	ldi	r25, 0x03	; 3
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    2cf4:	81 e1       	ldi	r24, 0x11	; 17
    2cf6:	94 e0       	ldi	r25, 0x04	; 4
    2cf8:	95 87       	std	Z+13, r25	; 0x0d
    2cfa:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    2cfc:	8d ec       	ldi	r24, 0xCD	; 205
    2cfe:	93 e0       	ldi	r25, 0x03	; 3
    2d00:	97 87       	std	Z+15, r25	; 0x0f
    2d02:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    2d04:	85 ec       	ldi	r24, 0xC5	; 197
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	91 8b       	std	Z+17, r25	; 0x11
    2d0a:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    2d0c:	84 ec       	ldi	r24, 0xC4	; 196
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	93 8b       	std	Z+19, r25	; 0x13
    2d12:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    2d14:	80 ec       	ldi	r24, 0xC0	; 192
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	95 8b       	std	Z+21, r25	; 0x15
    2d1a:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    2d1c:	81 ec       	ldi	r24, 0xC1	; 193
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	97 8b       	std	Z+23, r25	; 0x17
    2d22:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    2d24:	86 ec       	ldi	r24, 0xC6	; 198
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	91 8f       	std	Z+25, r25	; 0x19
    2d2a:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    2d2c:	84 e0       	ldi	r24, 0x04	; 4
    2d2e:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    2d34:	87 e0       	ldi	r24, 0x07	; 7
    2d36:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    2d38:	85 e0       	ldi	r24, 0x05	; 5
    2d3a:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	86 8f       	std	Z+30, r24	; 0x1e
    2d40:	08 95       	ret

00002d42 <_Z8i2c_initm>:


void i2c_stop()
{
	//transmit a stop condition.
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    2d42:	9b 01       	movw	r18, r22
    2d44:	ac 01       	movw	r20, r24
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	74 e2       	ldi	r23, 0x24	; 36
    2d4a:	84 ef       	ldi	r24, 0xF4	; 244
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__udivmodsi4>
    2d52:	da 01       	movw	r26, r20
    2d54:	c9 01       	movw	r24, r18
    2d56:	40 97       	sbiw	r24, 0x10	; 16
    2d58:	a1 09       	sbc	r26, r1
    2d5a:	b1 09       	sbc	r27, r1
    2d5c:	ac 01       	movw	r20, r24
    2d5e:	bd 01       	movw	r22, r26
    2d60:	76 95       	lsr	r23
    2d62:	67 95       	ror	r22
    2d64:	57 95       	ror	r21
    2d66:	47 95       	ror	r20
    2d68:	4f 3f       	cpi	r20, 0xFF	; 255
    2d6a:	51 05       	cpc	r21, r1
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <_Z8i2c_initm+0x2e>
    2d6e:	48 f4       	brcc	.+18     	; 0x2d82 <_Z8i2c_initm+0x40>
    2d70:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2d74:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d7e:	ca 01       	movw	r24, r20
    2d80:	08 95       	ret
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	08 95       	ret

00002d88 <_Z9i2c_startv>:
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	84 ea       	ldi	r24, 0xA4	; 164
    2d92:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d96:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2d9a:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <time_stamp>
    2d9e:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <time_stamp+0x1>
    2da2:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <time_stamp+0x2>
    2da6:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <time_stamp+0x3>
    2daa:	cc eb       	ldi	r28, 0xBC	; 188
    2dac:	d0 e0       	ldi	r29, 0x00	; 0
    2dae:	88 81       	ld	r24, Y
    2db0:	88 23       	and	r24, r24
    2db2:	e4 f0       	brlt	.+56     	; 0x2dec <_Z9i2c_startv+0x64>
    2db4:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2db8:	00 91 55 04 	lds	r16, 0x0455	; 0x800455 <time_stamp>
    2dbc:	10 91 56 04 	lds	r17, 0x0456	; 0x800456 <time_stamp+0x1>
    2dc0:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <time_stamp+0x2>
    2dc4:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <time_stamp+0x3>
    2dc8:	ab 01       	movw	r20, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	40 1b       	sub	r20, r16
    2dce:	51 0b       	sbc	r21, r17
    2dd0:	62 0b       	sbc	r22, r18
    2dd2:	73 0b       	sbc	r23, r19
    2dd4:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timeout_val>
    2dd8:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timeout_val+0x1>
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	84 17       	cp	r24, r20
    2de2:	95 07       	cpc	r25, r21
    2de4:	a6 07       	cpc	r26, r22
    2de6:	b7 07       	cpc	r27, r23
    2de8:	10 f7       	brcc	.-60     	; 0x2dae <_Z9i2c_startv+0x26>
    2dea:	09 c0       	rjmp	.+18     	; 0x2dfe <_Z9i2c_startv+0x76>
    2dec:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2df0:	28 7f       	andi	r18, 0xF8	; 248
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	28 30       	cpi	r18, 0x08	; 8
    2df8:	21 f0       	breq	.+8      	; 0x2e02 <_Z9i2c_startv+0x7a>
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <_Z9i2c_startv+0x7a>
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	08 95       	ret

00002e0c <_Z13i2c_rep_startv>:
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	84 ea       	ldi	r24, 0xA4	; 164
    2e16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e1a:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2e1e:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <time_stamp>
    2e22:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <time_stamp+0x1>
    2e26:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <time_stamp+0x2>
    2e2a:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <time_stamp+0x3>
    2e2e:	cc eb       	ldi	r28, 0xBC	; 188
    2e30:	d0 e0       	ldi	r29, 0x00	; 0
    2e32:	88 81       	ld	r24, Y
    2e34:	88 23       	and	r24, r24
    2e36:	e4 f0       	brlt	.+56     	; 0x2e70 <_Z13i2c_rep_startv+0x64>
    2e38:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2e3c:	00 91 55 04 	lds	r16, 0x0455	; 0x800455 <time_stamp>
    2e40:	10 91 56 04 	lds	r17, 0x0456	; 0x800456 <time_stamp+0x1>
    2e44:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <time_stamp+0x2>
    2e48:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <time_stamp+0x3>
    2e4c:	ab 01       	movw	r20, r22
    2e4e:	bc 01       	movw	r22, r24
    2e50:	40 1b       	sub	r20, r16
    2e52:	51 0b       	sbc	r21, r17
    2e54:	62 0b       	sbc	r22, r18
    2e56:	73 0b       	sbc	r23, r19
    2e58:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timeout_val>
    2e5c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timeout_val+0x1>
    2e60:	a0 e0       	ldi	r26, 0x00	; 0
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	84 17       	cp	r24, r20
    2e66:	95 07       	cpc	r25, r21
    2e68:	a6 07       	cpc	r26, r22
    2e6a:	b7 07       	cpc	r27, r23
    2e6c:	10 f7       	brcc	.-60     	; 0x2e32 <_Z13i2c_rep_startv+0x26>
    2e6e:	09 c0       	rjmp	.+18     	; 0x2e82 <_Z13i2c_rep_startv+0x76>
    2e70:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2e74:	28 7f       	andi	r18, 0xF8	; 248
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	20 31       	cpi	r18, 0x10	; 16
    2e7c:	21 f0       	breq	.+8      	; 0x2e86 <_Z13i2c_rep_startv+0x7a>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <_Z13i2c_rep_startv+0x7a>
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	df 91       	pop	r29
    2e88:	cf 91       	pop	r28
    2e8a:	1f 91       	pop	r17
    2e8c:	0f 91       	pop	r16
    2e8e:	08 95       	ret

00002e90 <_Z12i2c_transmith>:
	//then it could be an illegal case.
}


unsigned char i2c_transmit(unsigned char data)
{
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
	
	do{

		TWDR = data;
    2e98:	ab eb       	ldi	r26, 0xBB	; 187
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0

	}while(TWCR & (1<<TWWC)); //load the data into TWDR and also check if any write collision
    2e9c:	ec eb       	ldi	r30, 0xBC	; 188
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
unsigned char i2c_transmit(unsigned char data)
{
	
	do{

		TWDR = data;
    2ea0:	8c 93       	st	X, r24

	}while(TWCR & (1<<TWWC)); //load the data into TWDR and also check if any write collision
    2ea2:	90 81       	ld	r25, Z


unsigned char i2c_transmit(unsigned char data)
{
	
	do{
    2ea4:	93 fd       	sbrc	r25, 3
    2ea6:	fc cf       	rjmp	.-8      	; 0x2ea0 <_Z12i2c_transmith+0x10>
	//then there is no need of this.

	//Write collision occurs when we try to write data to TWDR when TWINT is low.
	//The TWWC flag is cleared automatically on writing to TWDR when TWINT is high.

	TWCR = (1<<TWINT) | (1<<TWEN); //Clear the TWINT flag and keep I2C unit enabled
    2ea8:	84 e8       	ldi	r24, 0x84	; 132
    2eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	//so that data is transmitted in the next cycle.

	time_stamp=millis();
    2eae:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2eb2:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <time_stamp>
    2eb6:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <time_stamp+0x1>
    2eba:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <time_stamp+0x2>
    2ebe:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <time_stamp+0x3>
	
	while(!(TWCR & (1<<TWINT))) //wait until operation is complete by polling TWINT flag.
    2ec2:	cc eb       	ldi	r28, 0xBC	; 188
    2ec4:	d0 e0       	ldi	r29, 0x00	; 0
    2ec6:	88 81       	ld	r24, Y
    2ec8:	88 23       	and	r24, r24
    2eca:	e4 f0       	brlt	.+56     	; 0x2f04 <_Z12i2c_transmith+0x74>
	{
		if((millis()-time_stamp)>timeout_val)
    2ecc:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2ed0:	00 91 55 04 	lds	r16, 0x0455	; 0x800455 <time_stamp>
    2ed4:	10 91 56 04 	lds	r17, 0x0456	; 0x800456 <time_stamp+0x1>
    2ed8:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <time_stamp+0x2>
    2edc:	30 91 58 04 	lds	r19, 0x0458	; 0x800458 <time_stamp+0x3>
    2ee0:	ab 01       	movw	r20, r22
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	40 1b       	sub	r20, r16
    2ee6:	51 0b       	sbc	r21, r17
    2ee8:	62 0b       	sbc	r22, r18
    2eea:	73 0b       	sbc	r23, r19
    2eec:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timeout_val>
    2ef0:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timeout_val+0x1>
    2ef4:	a0 e0       	ldi	r26, 0x00	; 0
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	84 17       	cp	r24, r20
    2efa:	95 07       	cpc	r25, r21
    2efc:	a6 07       	cpc	r26, r22
    2efe:	b7 07       	cpc	r27, r23
    2f00:	10 f7       	brcc	.-60     	; 0x2ec6 <_Z12i2c_transmith+0x36>
    2f02:	04 c0       	rjmp	.+8      	; 0x2f0c <_Z12i2c_transmith+0x7c>
		{
			return 2; //device timed out, take care of error handling in the calling function.
		}
	}

	return (TWSR & 0xf8); //return the status code
    2f04:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2f08:	88 7f       	andi	r24, 0xF8	; 248
    2f0a:	01 c0       	rjmp	.+2      	; 0x2f0e <_Z12i2c_transmith+0x7e>
	
	while(!(TWCR & (1<<TWINT))) //wait until operation is complete by polling TWINT flag.
	{
		if((millis()-time_stamp)>timeout_val)
		{
			return 2; //device timed out, take care of error handling in the calling function.
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	return (TWSR & 0xf8); //return the status code
}
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	08 95       	ret

00002f18 <_Z11i2c_receivehPh>:


unsigned char i2c_receive(unsigned char acknowledge, uint8_t *data)
{
    2f18:	cf 92       	push	r12
    2f1a:	df 92       	push	r13
    2f1c:	ef 92       	push	r14
    2f1e:	ff 92       	push	r15
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	8b 01       	movw	r16, r22
	if(acknowledge) //if it is the last byte then send a NACK
    2f2a:	88 23       	and	r24, r24
    2f2c:	21 f0       	breq	.+8      	; 0x2f36 <_Z11i2c_receivehPh+0x1e>
		TWCR = (1<<TWEN) | (1<<TWINT);
    2f2e:	84 e8       	ldi	r24, 0x84	; 132
    2f30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2f34:	03 c0       	rjmp	.+6      	; 0x2f3c <_Z11i2c_receivehPh+0x24>
	else //if it is not the last byte Transmit a ACK
		TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);
    2f36:	84 ec       	ldi	r24, 0xC4	; 196
    2f38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	time_stamp=millis();
    2f3c:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2f40:	60 93 55 04 	sts	0x0455, r22	; 0x800455 <time_stamp>
    2f44:	70 93 56 04 	sts	0x0456, r23	; 0x800456 <time_stamp+0x1>
    2f48:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <time_stamp+0x2>
    2f4c:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <time_stamp+0x3>
	
	while(!(TWCR & (1<<TWINT))) //wait until operation is complete by polling TWINT flag.
    2f50:	cc eb       	ldi	r28, 0xBC	; 188
    2f52:	d0 e0       	ldi	r29, 0x00	; 0
    2f54:	88 81       	ld	r24, Y
    2f56:	88 23       	and	r24, r24
    2f58:	e4 f0       	brlt	.+56     	; 0x2f92 <_Z11i2c_receivehPh+0x7a>
	{
		if((millis()-time_stamp)>timeout_val)
    2f5a:	0e 94 15 29 	call	0x522a	; 0x522a <millis>
    2f5e:	c0 90 55 04 	lds	r12, 0x0455	; 0x800455 <time_stamp>
    2f62:	d0 90 56 04 	lds	r13, 0x0456	; 0x800456 <time_stamp+0x1>
    2f66:	e0 90 57 04 	lds	r14, 0x0457	; 0x800457 <time_stamp+0x2>
    2f6a:	f0 90 58 04 	lds	r15, 0x0458	; 0x800458 <time_stamp+0x3>
    2f6e:	ab 01       	movw	r20, r22
    2f70:	bc 01       	movw	r22, r24
    2f72:	4c 19       	sub	r20, r12
    2f74:	5d 09       	sbc	r21, r13
    2f76:	6e 09       	sbc	r22, r14
    2f78:	7f 09       	sbc	r23, r15
    2f7a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <timeout_val>
    2f7e:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <timeout_val+0x1>
    2f82:	a0 e0       	ldi	r26, 0x00	; 0
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	84 17       	cp	r24, r20
    2f88:	95 07       	cpc	r25, r21
    2f8a:	a6 07       	cpc	r26, r22
    2f8c:	b7 07       	cpc	r27, r23
    2f8e:	10 f7       	brcc	.-60     	; 0x2f54 <_Z11i2c_receivehPh+0x3c>
    2f90:	06 c0       	rjmp	.+12     	; 0x2f9e <_Z11i2c_receivehPh+0x86>
		{
			return 2; //device timed out, take care of error handling in the calling function.
		}
	}
	
	*data = TWDR;
    2f92:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f96:	f8 01       	movw	r30, r16
    2f98:	80 83       	st	Z, r24
	return 1;
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	01 c0       	rjmp	.+2      	; 0x2fa0 <_Z11i2c_receivehPh+0x88>
	
	while(!(TWCR & (1<<TWINT))) //wait until operation is complete by polling TWINT flag.
	{
		if((millis()-time_stamp)>timeout_val)
		{
			return 2; //device timed out, take care of error handling in the calling function.
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	
	*data = TWDR;
	return 1;
}
    2fa0:	df 91       	pop	r29
    2fa2:	cf 91       	pop	r28
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	08 95       	ret

00002fb2 <_Z12i2c_tx_sla_rh>:


unsigned char i2c_tx_sla_r(unsigned char address)
{
	//Transmit the 7 bit address by appending 1 at the end
	return i2c_transmit((address<<1) | (1<<0)); //and return the status code
    2fb2:	88 0f       	add	r24, r24
    2fb4:	81 60       	ori	r24, 0x01	; 1
    2fb6:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z12i2c_transmith>
}
    2fba:	08 95       	ret

00002fbc <_Z12i2c_tx_sla_wh>:

unsigned char i2c_tx_sla_w(unsigned char address)
{
	//Transmit the 7 bit address by appending 0 at the end
	return i2c_transmit(address<<1); //and return the status code
    2fbc:	88 0f       	add	r24, r24
    2fbe:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z12i2c_transmith>
}
    2fc2:	08 95       	ret

00002fc4 <_Z9i2c_writehhPhh>:


uint8_t i2c_write(uint8_t address, uint8_t reg, uint8_t *data, uint8_t bytes)
{
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	d8 2f       	mov	r29, r24
    2fd2:	c6 2f       	mov	r28, r22
    2fd4:	7a 01       	movw	r14, r20
    2fd6:	12 2f       	mov	r17, r18
		i2c_start();
    2fd8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_Z9i2c_startv>
		
		i2c_tx_sla_w(address);
    2fdc:	8d 2f       	mov	r24, r29
    2fde:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_Z12i2c_tx_sla_wh>
		
		i2c_transmit(reg);
    2fe2:	8c 2f       	mov	r24, r28
    2fe4:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z12i2c_transmith>
		
		for(uint8_t i=0;i<bytes;i++)
    2fe8:	11 23       	and	r17, r17
    2fea:	71 f0       	breq	.+28     	; 0x3008 <_Z9i2c_writehhPhh+0x44>
    2fec:	e7 01       	movw	r28, r14
    2fee:	11 50       	subi	r17, 0x01	; 1
    2ff0:	01 2f       	mov	r16, r17
    2ff2:	10 e0       	ldi	r17, 0x00	; 0
    2ff4:	0f 5f       	subi	r16, 0xFF	; 255
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	0e 0d       	add	r16, r14
    2ffa:	1f 1d       	adc	r17, r15
		{
			i2c_transmit(data[i]);
    2ffc:	89 91       	ld	r24, Y+
    2ffe:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z12i2c_transmith>
		
		i2c_tx_sla_w(address);
		
		i2c_transmit(reg);
		
		for(uint8_t i=0;i<bytes;i++)
    3002:	c0 17       	cp	r28, r16
    3004:	d1 07       	cpc	r29, r17
    3006:	d1 f7       	brne	.-12     	; 0x2ffc <_Z9i2c_writehhPhh+0x38>


void i2c_stop()
{
	//transmit a stop condition.
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    3008:	84 e9       	ldi	r24, 0x94	; 148
    300a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
	
		i2c_stop();
	
	return 1; //return 2 if timed-out
}
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	08 95       	ret

0000301e <_Z8i2c_readhhPhh>:


uint8_t i2c_read(uint8_t address, uint8_t reg, uint8_t *data, uint8_t bytes)
{
    301e:	cf 92       	push	r12
    3020:	df 92       	push	r13
    3022:	ef 92       	push	r14
    3024:	ff 92       	push	r15
    3026:	0f 93       	push	r16
    3028:	1f 93       	push	r17
    302a:	cf 93       	push	r28
    302c:	df 93       	push	r29
    302e:	c8 2f       	mov	r28, r24
    3030:	d6 2f       	mov	r29, r22
    3032:	d4 2e       	mov	r13, r20
    3034:	f5 2e       	mov	r15, r21
    3036:	e2 2e       	mov	r14, r18
		i2c_start();
    3038:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_Z9i2c_startv>
		
		i2c_tx_sla_w(address);
    303c:	8c 2f       	mov	r24, r28
    303e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_Z12i2c_tx_sla_wh>
	
		i2c_transmit(reg);
    3042:	8d 2f       	mov	r24, r29
    3044:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_Z12i2c_transmith>
	
		i2c_rep_start();
    3048:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <_Z13i2c_rep_startv>
			
		i2c_tx_sla_r(address);
    304c:	8c 2f       	mov	r24, r28
    304e:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <_Z12i2c_tx_sla_rh>
			
		for(uint8_t i=0;i<bytes;i++)
    3052:	ee 20       	and	r14, r14
    3054:	09 f1       	breq	.+66     	; 0x3098 <_Z8i2c_readhhPhh+0x7a>
    3056:	0d 2d       	mov	r16, r13
    3058:	1f 2d       	mov	r17, r15
    305a:	cc 24       	eor	r12, r12
    305c:	ca 94       	dec	r12
    305e:	ce 0c       	add	r12, r14
    3060:	d1 2c       	mov	r13, r1
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	c8 1a       	sub	r12, r24
    3066:	d8 0a       	sbc	r13, r24
    3068:	c0 e0       	ldi	r28, 0x00	; 0
    306a:	d0 e0       	ldi	r29, 0x00	; 0
		{
			if(i!=bytes-1)
    306c:	f1 2c       	mov	r15, r1
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	e8 1a       	sub	r14, r24
    3072:	f1 08       	sbc	r15, r1
    3074:	ec 16       	cp	r14, r28
    3076:	fd 06       	cpc	r15, r29
    3078:	29 f0       	breq	.+10     	; 0x3084 <_Z8i2c_readhhPhh+0x66>
			{
				i2c_receive(ACK,&data[i]);
    307a:	b8 01       	movw	r22, r16
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <_Z11i2c_receivehPh>
    3082:	04 c0       	rjmp	.+8      	; 0x308c <_Z8i2c_readhhPhh+0x6e>
			}
			else
			{
				i2c_receive(NACK,&data[i]);
    3084:	b8 01       	movw	r22, r16
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <_Z11i2c_receivehPh>
    308c:	21 96       	adiw	r28, 0x01	; 1
    308e:	0f 5f       	subi	r16, 0xFF	; 255
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
	
		i2c_rep_start();
			
		i2c_tx_sla_r(address);
			
		for(uint8_t i=0;i<bytes;i++)
    3092:	cc 15       	cp	r28, r12
    3094:	dd 05       	cpc	r29, r13
    3096:	71 f7       	brne	.-36     	; 0x3074 <_Z8i2c_readhhPhh+0x56>


void i2c_stop()
{
	//transmit a stop condition.
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    3098:	84 e9       	ldi	r24, 0x94	; 148
    309a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		}
			
		i2c_stop();
	
	return 1;//return 2 if timed-out	
}
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	08 95       	ret

000030b2 <_Z8i2c_pingh>:

uint8_t i2c_ping( uint8_t address )
{
    30b2:	cf 93       	push	r28
    30b4:	c8 2f       	mov	r28, r24
	uint8_t response;
	i2c_start();
    30b6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <_Z9i2c_startv>
	if (i2c_tx_sla_w(address) == TW_MT_SLA_ACK)		//if the device ACKs on trying to write to that address
    30ba:	8c 2f       	mov	r24, r28
    30bc:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <_Z12i2c_tx_sla_wh>


void i2c_stop()
{
	//transmit a stop condition.
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    30c0:	94 e9       	ldi	r25, 0x94	; 148
    30c2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	{
		response = 0;
	}
	i2c_stop();
	
	return response;
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	88 31       	cpi	r24, 0x18	; 24
    30ca:	09 f0       	breq	.+2      	; 0x30ce <_Z8i2c_pingh+0x1c>
    30cc:	90 e0       	ldi	r25, 0x00	; 0
	
}
    30ce:	89 2f       	mov	r24, r25
    30d0:	cf 91       	pop	r28
    30d2:	08 95       	ret

000030d4 <loop>:
	count++;
	if(count==20)
	{
		lcd.clearDisplay();
		lcd.setCursor(0,0);
		count=0;
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <analog_stream_flag>
    30dc:	81 11       	cpse	r24, r1
    30de:	09 c0       	rjmp	.+18     	; 0x30f2 <loop+0x1e>
    30e0:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <digital_stream_flag>
    30e4:	81 11       	cpse	r24, r1
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <loop+0x1e>
    30e8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <port_stream>
    30ec:	88 23       	and	r24, r24
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <loop+0x1e>
    30f0:	22 c1       	rjmp	.+580    	; 0x3336 <loop+0x262>
    30f2:	8f eb       	ldi	r24, 0xBF	; 191
    30f4:	94 e0       	ldi	r25, 0x04	; 4
    30f6:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	50 e0       	ldi	r21, 0x00	; 0
    30fe:	60 e0       	ldi	r22, 0x00	; 0
    3100:	70 e0       	ldi	r23, 0x00	; 0
    3102:	8f eb       	ldi	r24, 0xBF	; 191
    3104:	94 e0       	ldi	r25, 0x04	; 4
    3106:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	8f eb       	ldi	r24, 0xBF	; 191
    3110:	94 e0       	ldi	r25, 0x04	; 4
    3112:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN12Adafruit_GFX12setTextColorEj>
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	8f eb       	ldi	r24, 0xBF	; 191
    311a:	94 e0       	ldi	r25, 0x04	; 4
    311c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
    3120:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <digital_stream_flag>
    3124:	88 23       	and	r24, r24
    3126:	09 f4       	brne	.+2      	; 0x312a <loop+0x56>
    3128:	44 c0       	rjmp	.+136    	; 0x31b2 <loop+0xde>
    312a:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <digital_stream_pin>
    312e:	0e 94 cf 2a 	call	0x559e	; 0x559e <digitalRead>
    3132:	c8 2f       	mov	r28, r24
    3134:	4a e0       	ldi	r20, 0x0A	; 10
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	68 2f       	mov	r22, r24
    313a:	88 ea       	ldi	r24, 0xA8	; 168
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    3142:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <analog_stream_flag>
    3146:	81 11       	cpse	r24, r1
    3148:	04 c0       	rjmp	.+8      	; 0x3152 <loop+0x7e>
    314a:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <port_stream>
    314e:	88 23       	and	r24, r24
    3150:	31 f0       	breq	.+12     	; 0x315e <loop+0x8a>
    3152:	6c e2       	ldi	r22, 0x2C	; 44
    3154:	88 ea       	ldi	r24, 0xA8	; 168
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    315c:	06 c0       	rjmp	.+12     	; 0x316a <loop+0x96>
    315e:	63 e5       	ldi	r22, 0x53	; 83
    3160:	73 e0       	ldi	r23, 0x03	; 3
    3162:	88 ea       	ldi	r24, 0xA8	; 168
    3164:	93 e0       	ldi	r25, 0x03	; 3
    3166:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
    316a:	40 e0       	ldi	r20, 0x00	; 0
    316c:	50 e0       	ldi	r21, 0x00	; 0
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	8f eb       	ldi	r24, 0xBF	; 191
    3174:	94 e0       	ldi	r25, 0x04	; 4
    3176:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    317a:	64 e4       	ldi	r22, 0x44	; 68
    317c:	8f eb       	ldi	r24, 0xBF	; 191
    317e:	94 e0       	ldi	r25, 0x04	; 4
    3180:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    3184:	4a e0       	ldi	r20, 0x0A	; 10
    3186:	50 e0       	ldi	r21, 0x00	; 0
    3188:	60 91 7b 04 	lds	r22, 0x047B	; 0x80047b <digital_stream_pin>
    318c:	8f eb       	ldi	r24, 0xBF	; 191
    318e:	94 e0       	ldi	r25, 0x04	; 4
    3190:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    3194:	40 e1       	ldi	r20, 0x10	; 16
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	60 e0       	ldi	r22, 0x00	; 0
    319a:	70 e0       	ldi	r23, 0x00	; 0
    319c:	8f eb       	ldi	r24, 0xBF	; 191
    319e:	94 e0       	ldi	r25, 0x04	; 4
    31a0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    31a4:	4a e0       	ldi	r20, 0x0A	; 10
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	6c 2f       	mov	r22, r28
    31aa:	8f eb       	ldi	r24, 0xBF	; 191
    31ac:	94 e0       	ldi	r25, 0x04	; 4
    31ae:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    31b2:	80 91 7c 04 	lds	r24, 0x047C	; 0x80047c <analog_stream_flag>
    31b6:	88 23       	and	r24, r24
    31b8:	09 f4       	brne	.+2      	; 0x31bc <loop+0xe8>
    31ba:	43 c0       	rjmp	.+134    	; 0x3242 <loop+0x16e>
    31bc:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <analog_stream_pin>
    31c0:	0e 94 ba 29 	call	0x5374	; 0x5374 <analogRead>
    31c4:	ec 01       	movw	r28, r24
    31c6:	4a e0       	ldi	r20, 0x0A	; 10
    31c8:	50 e0       	ldi	r21, 0x00	; 0
    31ca:	bc 01       	movw	r22, r24
    31cc:	88 ea       	ldi	r24, 0xA8	; 168
    31ce:	93 e0       	ldi	r25, 0x03	; 3
    31d0:	0e 94 4b 2c 	call	0x5896	; 0x5896 <_ZN5Print5printEji>
    31d4:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <port_stream>
    31d8:	88 23       	and	r24, r24
    31da:	31 f0       	breq	.+12     	; 0x31e8 <loop+0x114>
    31dc:	6c e2       	ldi	r22, 0x2C	; 44
    31de:	88 ea       	ldi	r24, 0xA8	; 168
    31e0:	93 e0       	ldi	r25, 0x03	; 3
    31e2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    31e6:	06 c0       	rjmp	.+12     	; 0x31f4 <loop+0x120>
    31e8:	63 e5       	ldi	r22, 0x53	; 83
    31ea:	73 e0       	ldi	r23, 0x03	; 3
    31ec:	88 ea       	ldi	r24, 0xA8	; 168
    31ee:	93 e0       	ldi	r25, 0x03	; 3
    31f0:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	60 e3       	ldi	r22, 0x30	; 48
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	8f eb       	ldi	r24, 0xBF	; 191
    31fe:	94 e0       	ldi	r25, 0x04	; 4
    3200:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3204:	61 e4       	ldi	r22, 0x41	; 65
    3206:	8f eb       	ldi	r24, 0xBF	; 191
    3208:	94 e0       	ldi	r25, 0x04	; 4
    320a:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    320e:	60 91 7d 04 	lds	r22, 0x047D	; 0x80047d <analog_stream_pin>
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	6e 50       	subi	r22, 0x0E	; 14
    3216:	71 09       	sbc	r23, r1
    3218:	4a e0       	ldi	r20, 0x0A	; 10
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	8f eb       	ldi	r24, 0xBF	; 191
    321e:	94 e0       	ldi	r25, 0x04	; 4
    3220:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN5Print5printEii>
    3224:	40 e1       	ldi	r20, 0x10	; 16
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	64 e2       	ldi	r22, 0x24	; 36
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	8f eb       	ldi	r24, 0xBF	; 191
    322e:	94 e0       	ldi	r25, 0x04	; 4
    3230:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3234:	4a e0       	ldi	r20, 0x0A	; 10
    3236:	50 e0       	ldi	r21, 0x00	; 0
    3238:	be 01       	movw	r22, r28
    323a:	8f eb       	ldi	r24, 0xBF	; 191
    323c:	94 e0       	ldi	r25, 0x04	; 4
    323e:	0e 94 4b 2c 	call	0x5896	; 0x5896 <_ZN5Print5printEji>
    3242:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <port_stream>
    3246:	81 30       	cpi	r24, 0x01	; 1
    3248:	29 f5       	brne	.+74     	; 0x3294 <loop+0x1c0>
    324a:	63 b1       	in	r22, 0x03	; 3
    324c:	40 e1       	ldi	r20, 0x10	; 16
    324e:	50 e0       	ldi	r21, 0x00	; 0
    3250:	88 ea       	ldi	r24, 0xA8	; 168
    3252:	93 e0       	ldi	r25, 0x03	; 3
    3254:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	50 e0       	ldi	r21, 0x00	; 0
    325c:	60 e6       	ldi	r22, 0x60	; 96
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	8f eb       	ldi	r24, 0xBF	; 191
    3262:	94 e0       	ldi	r25, 0x04	; 4
    3264:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3268:	66 e5       	ldi	r22, 0x56	; 86
    326a:	73 e0       	ldi	r23, 0x03	; 3
    326c:	8f eb       	ldi	r24, 0xBF	; 191
    326e:	94 e0       	ldi	r25, 0x04	; 4
    3270:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
    3274:	40 e1       	ldi	r20, 0x10	; 16
    3276:	50 e0       	ldi	r21, 0x00	; 0
    3278:	60 e6       	ldi	r22, 0x60	; 96
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	8f eb       	ldi	r24, 0xBF	; 191
    327e:	94 e0       	ldi	r25, 0x04	; 4
    3280:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3284:	63 b1       	in	r22, 0x03	; 3
    3286:	40 e1       	ldi	r20, 0x10	; 16
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	8f eb       	ldi	r24, 0xBF	; 191
    328c:	94 e0       	ldi	r25, 0x04	; 4
    328e:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    3292:	4d c0       	rjmp	.+154    	; 0x332e <loop+0x25a>
    3294:	82 30       	cpi	r24, 0x02	; 2
    3296:	29 f5       	brne	.+74     	; 0x32e2 <loop+0x20e>
    3298:	66 b1       	in	r22, 0x06	; 6
    329a:	40 e1       	ldi	r20, 0x10	; 16
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	88 ea       	ldi	r24, 0xA8	; 168
    32a0:	93 e0       	ldi	r25, 0x03	; 3
    32a2:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	50 e0       	ldi	r21, 0x00	; 0
    32aa:	60 e6       	ldi	r22, 0x60	; 96
    32ac:	70 e0       	ldi	r23, 0x00	; 0
    32ae:	8f eb       	ldi	r24, 0xBF	; 191
    32b0:	94 e0       	ldi	r25, 0x04	; 4
    32b2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    32b6:	69 e5       	ldi	r22, 0x59	; 89
    32b8:	73 e0       	ldi	r23, 0x03	; 3
    32ba:	8f eb       	ldi	r24, 0xBF	; 191
    32bc:	94 e0       	ldi	r25, 0x04	; 4
    32be:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
    32c2:	40 e1       	ldi	r20, 0x10	; 16
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	60 e6       	ldi	r22, 0x60	; 96
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	8f eb       	ldi	r24, 0xBF	; 191
    32cc:	94 e0       	ldi	r25, 0x04	; 4
    32ce:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    32d2:	66 b1       	in	r22, 0x06	; 6
    32d4:	40 e1       	ldi	r20, 0x10	; 16
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	8f eb       	ldi	r24, 0xBF	; 191
    32da:	94 e0       	ldi	r25, 0x04	; 4
    32dc:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    32e0:	26 c0       	rjmp	.+76     	; 0x332e <loop+0x25a>
    32e2:	83 30       	cpi	r24, 0x03	; 3
    32e4:	21 f5       	brne	.+72     	; 0x332e <loop+0x25a>
    32e6:	69 b1       	in	r22, 0x09	; 9
    32e8:	40 e1       	ldi	r20, 0x10	; 16
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	88 ea       	ldi	r24, 0xA8	; 168
    32ee:	93 e0       	ldi	r25, 0x03	; 3
    32f0:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
    32f4:	40 e0       	ldi	r20, 0x00	; 0
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	60 e6       	ldi	r22, 0x60	; 96
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	8f eb       	ldi	r24, 0xBF	; 191
    32fe:	94 e0       	ldi	r25, 0x04	; 4
    3300:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3304:	6c e5       	ldi	r22, 0x5C	; 92
    3306:	73 e0       	ldi	r23, 0x03	; 3
    3308:	8f eb       	ldi	r24, 0xBF	; 191
    330a:	94 e0       	ldi	r25, 0x04	; 4
    330c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
    3310:	40 e1       	ldi	r20, 0x10	; 16
    3312:	50 e0       	ldi	r21, 0x00	; 0
    3314:	60 e6       	ldi	r22, 0x60	; 96
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	8f eb       	ldi	r24, 0xBF	; 191
    331a:	94 e0       	ldi	r25, 0x04	; 4
    331c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    3320:	69 b1       	in	r22, 0x09	; 9
    3322:	40 e1       	ldi	r20, 0x10	; 16
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	8f eb       	ldi	r24, 0xBF	; 191
    3328:	94 e0       	ldi	r25, 0x04	; 4
    332a:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
    332e:	8f eb       	ldi	r24, 0xBF	; 191
    3330:	94 e0       	ldi	r25, 0x04	; 4
    3332:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	08 95       	ret

0000333c <_Z19i2c_internal_pullupb>:
    333c:	1f 93       	push	r17
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	00 d0       	rcall	.+0      	; 0x3344 <_Z19i2c_internal_pullupb+0x8>
    3344:	00 d0       	rcall	.+0      	; 0x3346 <_Z19i2c_internal_pullupb+0xa>
    3346:	00 d0       	rcall	.+0      	; 0x3348 <_Z19i2c_internal_pullupb+0xc>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	18 2f       	mov	r17, r24
    334e:	62 e1       	ldi	r22, 0x12	; 18
    3350:	ce 01       	movw	r24, r28
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
    3358:	63 e1       	ldi	r22, 0x13	; 19
    335a:	ce 01       	movw	r24, r28
    335c:	04 96       	adiw	r24, 0x04	; 4
    335e:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
    3362:	11 23       	and	r17, r17
    3364:	49 f0       	breq	.+18     	; 0x3378 <_Z19i2c_internal_pullupb+0x3c>
    3366:	ce 01       	movw	r24, r28
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN4GPIO14setInputPullUpEv>
    336e:	ce 01       	movw	r24, r28
    3370:	04 96       	adiw	r24, 0x04	; 4
    3372:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN4GPIO14setInputPullUpEv>
    3376:	08 c0       	rjmp	.+16     	; 0x3388 <_Z19i2c_internal_pullupb+0x4c>
    3378:	ce 01       	movw	r24, r28
    337a:	01 96       	adiw	r24, 0x01	; 1
    337c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN4GPIO16setInputPullDownEv>
    3380:	ce 01       	movw	r24, r28
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN4GPIO16setInputPullDownEv>
    3388:	26 96       	adiw	r28, 0x06	; 6
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	08 95       	ret

0000339c <_Z12initPlatformv>:
    339c:	0e 94 7c 29 	call	0x52f8	; 0x52f8 <init>
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	51 ee       	ldi	r21, 0xE1	; 225
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	88 ea       	ldi	r24, 0xA8	; 168
    33aa:	93 e0       	ldi	r25, 0x03	; 3
    33ac:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <_ZN14HardwareSerial5beginEm>
    33b0:	63 e3       	ldi	r22, 0x33	; 51
    33b2:	74 e1       	ldi	r23, 0x14	; 20
    33b4:	88 ea       	ldi	r24, 0xA8	; 168
    33b6:	93 e0       	ldi	r25, 0x03	; 3
    33b8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	0e 94 9e 19 	call	0x333c	; 0x333c <_Z19i2c_internal_pullupb>
    33c2:	21 e0       	ldi	r18, 0x01	; 1
    33c4:	4c e3       	ldi	r20, 0x3C	; 60
    33c6:	62 e0       	ldi	r22, 0x02	; 2
    33c8:	8f eb       	ldi	r24, 0xBF	; 191
    33ca:	94 e0       	ldi	r25, 0x04	; 4
    33cc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN16Adafruit_SSD13065beginEhhb>
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	8f eb       	ldi	r24, 0xBF	; 191
    33d4:	94 e0       	ldi	r25, 0x04	; 4
    33d6:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZN16Adafruit_SSD13063dimEh>
    33da:	8f eb       	ldi	r24, 0xBF	; 191
    33dc:	94 e0       	ldi	r25, 0x04	; 4
    33de:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    33e2:	40 e0       	ldi	r20, 0x00	; 0
    33e4:	50 e0       	ldi	r21, 0x00	; 0
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	8f eb       	ldi	r24, 0xBF	; 191
    33ec:	94 e0       	ldi	r25, 0x04	; 4
    33ee:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    33f2:	61 e0       	ldi	r22, 0x01	; 1
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	8f eb       	ldi	r24, 0xBF	; 191
    33f8:	94 e0       	ldi	r25, 0x04	; 4
    33fa:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN12Adafruit_GFX12setTextColorEj>
    33fe:	61 e0       	ldi	r22, 0x01	; 1
    3400:	8f eb       	ldi	r24, 0xBF	; 191
    3402:	94 e0       	ldi	r25, 0x04	; 4
    3404:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN12Adafruit_GFX11setTextWrapEh>
    3408:	62 e0       	ldi	r22, 0x02	; 2
    340a:	8f eb       	ldi	r24, 0xBF	; 191
    340c:	94 e0       	ldi	r25, 0x04	; 4
    340e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
    3412:	6a e2       	ldi	r22, 0x2A	; 42
    3414:	74 e1       	ldi	r23, 0x14	; 20
    3416:	8f eb       	ldi	r24, 0xBF	; 191
    3418:	94 e0       	ldi	r25, 0x04	; 4
    341a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    341e:	6f e1       	ldi	r22, 0x1F	; 31
    3420:	74 e1       	ldi	r23, 0x14	; 20
    3422:	8f eb       	ldi	r24, 0xBF	; 191
    3424:	94 e0       	ldi	r25, 0x04	; 4
    3426:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    342a:	8f eb       	ldi	r24, 0xBF	; 191
    342c:	94 e0       	ldi	r25, 0x04	; 4
    342e:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    3432:	08 95       	ret

00003434 <__vector_2>:
    3434:	1f 92       	push	r1
    3436:	0f 92       	push	r0
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	0f 92       	push	r0
    343c:	11 24       	eor	r1, r1
    343e:	0f 90       	pop	r0
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	0f 90       	pop	r0
    3444:	1f 90       	pop	r1
    3446:	18 95       	reti

00003448 <__vector_1>:
    3448:	1f 92       	push	r1
    344a:	0f 92       	push	r0
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	0f 92       	push	r0
    3450:	11 24       	eor	r1, r1
    3452:	0f 90       	pop	r0
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	0f 90       	pop	r0
    3458:	1f 90       	pop	r1
    345a:	18 95       	reti

0000345c <_Z7replyOKv>:
    345c:	6f e5       	ldi	r22, 0x5F	; 95
    345e:	73 e0       	ldi	r23, 0x03	; 3
    3460:	88 ea       	ldi	r24, 0xA8	; 168
    3462:	93 e0       	ldi	r25, 0x03	; 3
    3464:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
    3468:	08 95       	ret

0000346a <_Z8isPwmPinh>:
    346a:	83 30       	cpi	r24, 0x03	; 3
    346c:	59 f0       	breq	.+22     	; 0x3484 <_Z8isPwmPinh+0x1a>
    346e:	9b ef       	ldi	r25, 0xFB	; 251
    3470:	98 0f       	add	r25, r24
    3472:	92 30       	cpi	r25, 0x02	; 2
    3474:	48 f0       	brcs	.+18     	; 0x3488 <_Z8isPwmPinh+0x1e>
    3476:	97 ef       	ldi	r25, 0xF7	; 247
    3478:	98 0f       	add	r25, r24
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	93 30       	cpi	r25, 0x03	; 3
    347e:	28 f0       	brcs	.+10     	; 0x348a <_Z8isPwmPinh+0x20>
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	08 95       	ret
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	08 95       	ret
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	08 95       	ret

0000348c <_Z12watchDog_offv>:
    348c:	a8 95       	wdr
    348e:	04 b6       	in	r0, 0x34	; 52
    3490:	03 fe       	sbrs	r0, 3
    3492:	03 c0       	rjmp	.+6      	; 0x349a <_Z12watchDog_offv+0xe>
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <last_rst_was_by_wdt>
    349a:	84 b7       	in	r24, 0x34	; 52
    349c:	87 7f       	andi	r24, 0xF7	; 247
    349e:	84 bf       	out	0x34, r24	; 52
    34a0:	e0 e6       	ldi	r30, 0x60	; 96
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	88 61       	ori	r24, 0x18	; 24
    34a8:	80 83       	st	Z, r24
    34aa:	80 e8       	ldi	r24, 0x80	; 128
    34ac:	80 83       	st	Z, r24
    34ae:	08 95       	ret

000034b0 <_Z16resetSysUsingWDTv>:
    34b0:	f8 94       	cli
    34b2:	e0 e6       	ldi	r30, 0x60	; 96
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	88 61       	ori	r24, 0x18	; 24
    34ba:	80 83       	st	Z, r24
    34bc:	88 e8       	ldi	r24, 0x88	; 136
    34be:	80 83       	st	Z, r24
    34c0:	2f ef       	ldi	r18, 0xFF	; 255
    34c2:	80 e7       	ldi	r24, 0x70	; 112
    34c4:	92 e0       	ldi	r25, 0x02	; 2
    34c6:	21 50       	subi	r18, 0x01	; 1
    34c8:	80 40       	sbci	r24, 0x00	; 0
    34ca:	90 40       	sbci	r25, 0x00	; 0
    34cc:	e1 f7       	brne	.-8      	; 0x34c6 <_Z16resetSysUsingWDTv+0x16>
    34ce:	00 c0       	rjmp	.+0      	; 0x34d0 <_Z16resetSysUsingWDTv+0x20>
    34d0:	00 00       	nop
    34d2:	08 95       	ret

000034d4 <_Z5usagev>:
    34d4:	6f e7       	ldi	r22, 0x7F	; 127
    34d6:	7f e0       	ldi	r23, 0x0F	; 15
    34d8:	88 ea       	ldi	r24, 0xA8	; 168
    34da:	93 e0       	ldi	r25, 0x03	; 3
    34dc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    34e0:	66 e6       	ldi	r22, 0x66	; 102
    34e2:	7f e0       	ldi	r23, 0x0F	; 15
    34e4:	88 ea       	ldi	r24, 0xA8	; 168
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    34ec:	6e e4       	ldi	r22, 0x4E	; 78
    34ee:	7f e0       	ldi	r23, 0x0F	; 15
    34f0:	88 ea       	ldi	r24, 0xA8	; 168
    34f2:	93 e0       	ldi	r25, 0x03	; 3
    34f4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    34f8:	64 e3       	ldi	r22, 0x34	; 52
    34fa:	7f e0       	ldi	r23, 0x0F	; 15
    34fc:	88 ea       	ldi	r24, 0xA8	; 168
    34fe:	93 e0       	ldi	r25, 0x03	; 3
    3500:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3504:	62 e1       	ldi	r22, 0x12	; 18
    3506:	7f e0       	ldi	r23, 0x0F	; 15
    3508:	88 ea       	ldi	r24, 0xA8	; 168
    350a:	93 e0       	ldi	r25, 0x03	; 3
    350c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3510:	61 ef       	ldi	r22, 0xF1	; 241
    3512:	7e e0       	ldi	r23, 0x0E	; 14
    3514:	88 ea       	ldi	r24, 0xA8	; 168
    3516:	93 e0       	ldi	r25, 0x03	; 3
    3518:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    351c:	62 ec       	ldi	r22, 0xC2	; 194
    351e:	7e e0       	ldi	r23, 0x0E	; 14
    3520:	88 ea       	ldi	r24, 0xA8	; 168
    3522:	93 e0       	ldi	r25, 0x03	; 3
    3524:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3528:	60 e7       	ldi	r22, 0x70	; 112
    352a:	7e e0       	ldi	r23, 0x0E	; 14
    352c:	88 ea       	ldi	r24, 0xA8	; 168
    352e:	93 e0       	ldi	r25, 0x03	; 3
    3530:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3534:	6f e4       	ldi	r22, 0x4F	; 79
    3536:	7e e0       	ldi	r23, 0x0E	; 14
    3538:	88 ea       	ldi	r24, 0xA8	; 168
    353a:	93 e0       	ldi	r25, 0x03	; 3
    353c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3540:	65 e0       	ldi	r22, 0x05	; 5
    3542:	7e e0       	ldi	r23, 0x0E	; 14
    3544:	88 ea       	ldi	r24, 0xA8	; 168
    3546:	93 e0       	ldi	r25, 0x03	; 3
    3548:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    354c:	60 ee       	ldi	r22, 0xE0	; 224
    354e:	7d e0       	ldi	r23, 0x0D	; 13
    3550:	88 ea       	ldi	r24, 0xA8	; 168
    3552:	93 e0       	ldi	r25, 0x03	; 3
    3554:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3558:	64 ea       	ldi	r22, 0xA4	; 164
    355a:	7d e0       	ldi	r23, 0x0D	; 13
    355c:	88 ea       	ldi	r24, 0xA8	; 168
    355e:	93 e0       	ldi	r25, 0x03	; 3
    3560:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3564:	6a e6       	ldi	r22, 0x6A	; 106
    3566:	7d e0       	ldi	r23, 0x0D	; 13
    3568:	88 ea       	ldi	r24, 0xA8	; 168
    356a:	93 e0       	ldi	r25, 0x03	; 3
    356c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3570:	64 e1       	ldi	r22, 0x14	; 20
    3572:	7d e0       	ldi	r23, 0x0D	; 13
    3574:	88 ea       	ldi	r24, 0xA8	; 168
    3576:	93 e0       	ldi	r25, 0x03	; 3
    3578:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    357c:	67 ef       	ldi	r22, 0xF7	; 247
    357e:	7c e0       	ldi	r23, 0x0C	; 12
    3580:	88 ea       	ldi	r24, 0xA8	; 168
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3588:	6e ec       	ldi	r22, 0xCE	; 206
    358a:	7c e0       	ldi	r23, 0x0C	; 12
    358c:	88 ea       	ldi	r24, 0xA8	; 168
    358e:	93 e0       	ldi	r25, 0x03	; 3
    3590:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3594:	66 e8       	ldi	r22, 0x86	; 134
    3596:	7c e0       	ldi	r23, 0x0C	; 12
    3598:	88 ea       	ldi	r24, 0xA8	; 168
    359a:	93 e0       	ldi	r25, 0x03	; 3
    359c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35a0:	6a e5       	ldi	r22, 0x5A	; 90
    35a2:	7c e0       	ldi	r23, 0x0C	; 12
    35a4:	88 ea       	ldi	r24, 0xA8	; 168
    35a6:	93 e0       	ldi	r25, 0x03	; 3
    35a8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35ac:	64 e2       	ldi	r22, 0x24	; 36
    35ae:	7c e0       	ldi	r23, 0x0C	; 12
    35b0:	88 ea       	ldi	r24, 0xA8	; 168
    35b2:	93 e0       	ldi	r25, 0x03	; 3
    35b4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35b8:	6f ea       	ldi	r22, 0xAF	; 175
    35ba:	7b e0       	ldi	r23, 0x0B	; 11
    35bc:	88 ea       	ldi	r24, 0xA8	; 168
    35be:	93 e0       	ldi	r25, 0x03	; 3
    35c0:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35c4:	63 e4       	ldi	r22, 0x43	; 67
    35c6:	7b e0       	ldi	r23, 0x0B	; 11
    35c8:	88 ea       	ldi	r24, 0xA8	; 168
    35ca:	93 e0       	ldi	r25, 0x03	; 3
    35cc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35d0:	65 e1       	ldi	r22, 0x15	; 21
    35d2:	7b e0       	ldi	r23, 0x0B	; 11
    35d4:	88 ea       	ldi	r24, 0xA8	; 168
    35d6:	93 e0       	ldi	r25, 0x03	; 3
    35d8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35dc:	6f ed       	ldi	r22, 0xDF	; 223
    35de:	7a e0       	ldi	r23, 0x0A	; 10
    35e0:	88 ea       	ldi	r24, 0xA8	; 168
    35e2:	93 e0       	ldi	r25, 0x03	; 3
    35e4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35e8:	65 e8       	ldi	r22, 0x85	; 133
    35ea:	7a e0       	ldi	r23, 0x0A	; 10
    35ec:	88 ea       	ldi	r24, 0xA8	; 168
    35ee:	93 e0       	ldi	r25, 0x03	; 3
    35f0:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    35f4:	69 e1       	ldi	r22, 0x19	; 25
    35f6:	7a e0       	ldi	r23, 0x0A	; 10
    35f8:	88 ea       	ldi	r24, 0xA8	; 168
    35fa:	93 e0       	ldi	r25, 0x03	; 3
    35fc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3600:	6b ee       	ldi	r22, 0xEB	; 235
    3602:	79 e0       	ldi	r23, 0x09	; 9
    3604:	88 ea       	ldi	r24, 0xA8	; 168
    3606:	93 e0       	ldi	r25, 0x03	; 3
    3608:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    360c:	65 ec       	ldi	r22, 0xC5	; 197
    360e:	79 e0       	ldi	r23, 0x09	; 9
    3610:	88 ea       	ldi	r24, 0xA8	; 168
    3612:	93 e0       	ldi	r25, 0x03	; 3
    3614:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3618:	68 ea       	ldi	r22, 0xA8	; 168
    361a:	79 e0       	ldi	r23, 0x09	; 9
    361c:	88 ea       	ldi	r24, 0xA8	; 168
    361e:	93 e0       	ldi	r25, 0x03	; 3
    3620:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3624:	69 e8       	ldi	r22, 0x89	; 137
    3626:	79 e0       	ldi	r23, 0x09	; 9
    3628:	88 ea       	ldi	r24, 0xA8	; 168
    362a:	93 e0       	ldi	r25, 0x03	; 3
    362c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3630:	61 e6       	ldi	r22, 0x61	; 97
    3632:	79 e0       	ldi	r23, 0x09	; 9
    3634:	88 ea       	ldi	r24, 0xA8	; 168
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    363c:	68 e3       	ldi	r22, 0x38	; 56
    363e:	79 e0       	ldi	r23, 0x09	; 9
    3640:	88 ea       	ldi	r24, 0xA8	; 168
    3642:	93 e0       	ldi	r25, 0x03	; 3
    3644:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3648:	65 e1       	ldi	r22, 0x15	; 21
    364a:	79 e0       	ldi	r23, 0x09	; 9
    364c:	88 ea       	ldi	r24, 0xA8	; 168
    364e:	93 e0       	ldi	r25, 0x03	; 3
    3650:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3654:	61 ef       	ldi	r22, 0xF1	; 241
    3656:	78 e0       	ldi	r23, 0x08	; 8
    3658:	88 ea       	ldi	r24, 0xA8	; 168
    365a:	93 e0       	ldi	r25, 0x03	; 3
    365c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3660:	69 ec       	ldi	r22, 0xC9	; 201
    3662:	78 e0       	ldi	r23, 0x08	; 8
    3664:	88 ea       	ldi	r24, 0xA8	; 168
    3666:	93 e0       	ldi	r25, 0x03	; 3
    3668:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    366c:	64 ea       	ldi	r22, 0xA4	; 164
    366e:	78 e0       	ldi	r23, 0x08	; 8
    3670:	88 ea       	ldi	r24, 0xA8	; 168
    3672:	93 e0       	ldi	r25, 0x03	; 3
    3674:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3678:	68 e8       	ldi	r22, 0x88	; 136
    367a:	78 e0       	ldi	r23, 0x08	; 8
    367c:	88 ea       	ldi	r24, 0xA8	; 168
    367e:	93 e0       	ldi	r25, 0x03	; 3
    3680:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3684:	67 e1       	ldi	r22, 0x17	; 23
    3686:	78 e0       	ldi	r23, 0x08	; 8
    3688:	88 ea       	ldi	r24, 0xA8	; 168
    368a:	93 e0       	ldi	r25, 0x03	; 3
    368c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3690:	6e ee       	ldi	r22, 0xEE	; 238
    3692:	77 e0       	ldi	r23, 0x07	; 7
    3694:	88 ea       	ldi	r24, 0xA8	; 168
    3696:	93 e0       	ldi	r25, 0x03	; 3
    3698:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    369c:	64 e7       	ldi	r22, 0x74	; 116
    369e:	77 e0       	ldi	r23, 0x07	; 7
    36a0:	88 ea       	ldi	r24, 0xA8	; 168
    36a2:	93 e0       	ldi	r25, 0x03	; 3
    36a4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36a8:	64 e5       	ldi	r22, 0x54	; 84
    36aa:	77 e0       	ldi	r23, 0x07	; 7
    36ac:	88 ea       	ldi	r24, 0xA8	; 168
    36ae:	93 e0       	ldi	r25, 0x03	; 3
    36b0:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36b4:	6c e1       	ldi	r22, 0x1C	; 28
    36b6:	77 e0       	ldi	r23, 0x07	; 7
    36b8:	88 ea       	ldi	r24, 0xA8	; 168
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36c0:	66 eb       	ldi	r22, 0xB6	; 182
    36c2:	76 e0       	ldi	r23, 0x06	; 6
    36c4:	88 ea       	ldi	r24, 0xA8	; 168
    36c6:	93 e0       	ldi	r25, 0x03	; 3
    36c8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36cc:	69 e7       	ldi	r22, 0x79	; 121
    36ce:	76 e0       	ldi	r23, 0x06	; 6
    36d0:	88 ea       	ldi	r24, 0xA8	; 168
    36d2:	93 e0       	ldi	r25, 0x03	; 3
    36d4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36d8:	6a e3       	ldi	r22, 0x3A	; 58
    36da:	76 e0       	ldi	r23, 0x06	; 6
    36dc:	88 ea       	ldi	r24, 0xA8	; 168
    36de:	93 e0       	ldi	r25, 0x03	; 3
    36e0:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    36e4:	08 95       	ret

000036e6 <_Z10showPinOutv>:
    36e6:	8f eb       	ldi	r24, 0xBF	; 191
    36e8:	94 e0       	ldi	r25, 0x04	; 4
    36ea:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	50 e0       	ldi	r21, 0x00	; 0
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	8f eb       	ldi	r24, 0xBF	; 191
    36f8:	94 e0       	ldi	r25, 0x04	; 4
    36fa:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    36fe:	61 e0       	ldi	r22, 0x01	; 1
    3700:	8f eb       	ldi	r24, 0xBF	; 191
    3702:	94 e0       	ldi	r25, 0x04	; 4
    3704:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
    3708:	64 e2       	ldi	r22, 0x24	; 36
    370a:	76 e0       	ldi	r23, 0x06	; 6
    370c:	8f eb       	ldi	r24, 0xBF	; 191
    370e:	94 e0       	ldi	r25, 0x04	; 4
    3710:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3714:	62 e1       	ldi	r22, 0x12	; 18
    3716:	76 e0       	ldi	r23, 0x06	; 6
    3718:	8f eb       	ldi	r24, 0xBF	; 191
    371a:	94 e0       	ldi	r25, 0x04	; 4
    371c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3720:	6c ef       	ldi	r22, 0xFC	; 252
    3722:	75 e0       	ldi	r23, 0x05	; 5
    3724:	8f eb       	ldi	r24, 0xBF	; 191
    3726:	94 e0       	ldi	r25, 0x04	; 4
    3728:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    372c:	8f eb       	ldi	r24, 0xBF	; 191
    372e:	94 e0       	ldi	r25, 0x04	; 4
    3730:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    3734:	08 95       	ret

00003736 <_Z14stop_streamingv>:
    3736:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <port_stream>
    373a:	10 92 7a 04 	sts	0x047A, r1	; 0x80047a <digital_stream_flag>
    373e:	10 92 7c 04 	sts	0x047C, r1	; 0x80047c <analog_stream_flag>
    3742:	8f eb       	ldi	r24, 0xBF	; 191
    3744:	94 e0       	ldi	r25, 0x04	; 4
    3746:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	8f eb       	ldi	r24, 0xBF	; 191
    3754:	94 e0       	ldi	r25, 0x04	; 4
    3756:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
    375a:	62 e0       	ldi	r22, 0x02	; 2
    375c:	8f eb       	ldi	r24, 0xBF	; 191
    375e:	94 e0       	ldi	r25, 0x04	; 4
    3760:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	70 e0       	ldi	r23, 0x00	; 0
    3768:	8f eb       	ldi	r24, 0xBF	; 191
    376a:	94 e0       	ldi	r25, 0x04	; 4
    376c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN12Adafruit_GFX12setTextColorEj>
    3770:	62 ef       	ldi	r22, 0xF2	; 242
    3772:	75 e0       	ldi	r23, 0x05	; 5
    3774:	8f eb       	ldi	r24, 0xBF	; 191
    3776:	94 e0       	ldi	r25, 0x04	; 4
    3778:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    377c:	69 ee       	ldi	r22, 0xE9	; 233
    377e:	75 e0       	ldi	r23, 0x05	; 5
    3780:	8f eb       	ldi	r24, 0xBF	; 191
    3782:	94 e0       	ldi	r25, 0x04	; 4
    3784:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    3788:	8f eb       	ldi	r24, 0xBF	; 191
    378a:	94 e0       	ldi	r25, 0x04	; 4
    378c:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    3790:	67 ed       	ldi	r22, 0xD7	; 215
    3792:	75 e0       	ldi	r23, 0x05	; 5
    3794:	88 ea       	ldi	r24, 0xA8	; 168
    3796:	93 e0       	ldi	r25, 0x03	; 3
    3798:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    379c:	08 95       	ret

0000379e <_Z8getParamPchh>:
    379e:	fc 01       	movw	r30, r24
    37a0:	40 31       	cpi	r20, 0x10	; 16
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <_Z8getParamPchh+0x8>
    37a4:	48 c0       	rjmp	.+144    	; 0x3836 <_Z8getParamPchh+0x98>
    37a6:	20 81       	ld	r18, Z
    37a8:	80 ed       	ldi	r24, 0xD0	; 208
    37aa:	82 0f       	add	r24, r18
    37ac:	8a 30       	cpi	r24, 0x0A	; 10
    37ae:	20 f4       	brcc	.+8      	; 0x37b8 <_Z8getParamPchh+0x1a>
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	20 53       	subi	r18, 0x30	; 48
    37b4:	31 09       	sbc	r19, r1
    37b6:	08 c0       	rjmp	.+16     	; 0x37c8 <_Z8getParamPchh+0x2a>
    37b8:	8f e9       	ldi	r24, 0x9F	; 159
    37ba:	82 0f       	add	r24, r18
    37bc:	86 30       	cpi	r24, 0x06	; 6
    37be:	08 f0       	brcs	.+2      	; 0x37c2 <_Z8getParamPchh+0x24>
    37c0:	95 c0       	rjmp	.+298    	; 0x38ec <_Z8getParamPchh+0x14e>
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	27 55       	subi	r18, 0x57	; 87
    37c6:	31 09       	sbc	r19, r1
    37c8:	81 81       	ldd	r24, Z+1	; 0x01
    37ca:	8d 32       	cpi	r24, 0x2D	; 45
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <_Z8getParamPchh+0x32>
    37ce:	91 c0       	rjmp	.+290    	; 0x38f2 <_Z8getParamPchh+0x154>
    37d0:	98 2f       	mov	r25, r24
    37d2:	9f 7d       	andi	r25, 0xDF	; 223
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <_Z8getParamPchh+0x3a>
    37d6:	90 c0       	rjmp	.+288    	; 0x38f8 <_Z8getParamPchh+0x15a>
    37d8:	86 17       	cp	r24, r22
    37da:	09 f4       	brne	.+2      	; 0x37de <_Z8getParamPchh+0x40>
    37dc:	90 c0       	rjmp	.+288    	; 0x38fe <_Z8getParamPchh+0x160>
    37de:	90 ed       	ldi	r25, 0xD0	; 208
    37e0:	98 0f       	add	r25, r24
    37e2:	9a 30       	cpi	r25, 0x0A	; 10
    37e4:	58 f4       	brcc	.+22     	; 0x37fc <_Z8getParamPchh+0x5e>
    37e6:	22 95       	swap	r18
    37e8:	32 95       	swap	r19
    37ea:	30 7f       	andi	r19, 0xF0	; 240
    37ec:	32 27       	eor	r19, r18
    37ee:	20 7f       	andi	r18, 0xF0	; 240
    37f0:	32 27       	eor	r19, r18
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	c0 97       	sbiw	r24, 0x30	; 48
    37f6:	28 0f       	add	r18, r24
    37f8:	39 1f       	adc	r19, r25
    37fa:	10 c0       	rjmp	.+32     	; 0x381c <_Z8getParamPchh+0x7e>
    37fc:	9f e9       	ldi	r25, 0x9F	; 159
    37fe:	98 0f       	add	r25, r24
    3800:	96 30       	cpi	r25, 0x06	; 6
    3802:	08 f0       	brcs	.+2      	; 0x3806 <_Z8getParamPchh+0x68>
    3804:	7f c0       	rjmp	.+254    	; 0x3904 <_Z8getParamPchh+0x166>
    3806:	22 95       	swap	r18
    3808:	32 95       	swap	r19
    380a:	30 7f       	andi	r19, 0xF0	; 240
    380c:	32 27       	eor	r19, r18
    380e:	20 7f       	andi	r18, 0xF0	; 240
    3810:	32 27       	eor	r19, r18
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	87 55       	subi	r24, 0x57	; 87
    3816:	91 09       	sbc	r25, r1
    3818:	28 0f       	add	r18, r24
    381a:	39 1f       	adc	r19, r25
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	8d 32       	cpi	r24, 0x2D	; 45
    3820:	09 f4       	brne	.+2      	; 0x3824 <_Z8getParamPchh+0x86>
    3822:	73 c0       	rjmp	.+230    	; 0x390a <_Z8getParamPchh+0x16c>
    3824:	98 2f       	mov	r25, r24
    3826:	9f 7d       	andi	r25, 0xDF	; 223
    3828:	09 f4       	brne	.+2      	; 0x382c <_Z8getParamPchh+0x8e>
    382a:	72 c0       	rjmp	.+228    	; 0x3910 <_Z8getParamPchh+0x172>
    382c:	68 13       	cpse	r22, r24
    382e:	73 c0       	rjmp	.+230    	; 0x3916 <_Z8getParamPchh+0x178>
    3830:	82 2f       	mov	r24, r18
    3832:	93 2f       	mov	r25, r19
    3834:	08 95       	ret
    3836:	4a 30       	cpi	r20, 0x0A	; 10
    3838:	09 f0       	breq	.+2      	; 0x383c <_Z8getParamPchh+0x9e>
    383a:	70 c0       	rjmp	.+224    	; 0x391c <_Z8getParamPchh+0x17e>
    383c:	20 81       	ld	r18, Z
    383e:	80 ed       	ldi	r24, 0xD0	; 208
    3840:	82 0f       	add	r24, r18
    3842:	8a 30       	cpi	r24, 0x0A	; 10
    3844:	08 f0       	brcs	.+2      	; 0x3848 <_Z8getParamPchh+0xaa>
    3846:	6d c0       	rjmp	.+218    	; 0x3922 <_Z8getParamPchh+0x184>
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	20 53       	subi	r18, 0x30	; 48
    384c:	31 09       	sbc	r19, r1
    384e:	81 81       	ldd	r24, Z+1	; 0x01
    3850:	8d 32       	cpi	r24, 0x2D	; 45
    3852:	09 f4       	brne	.+2      	; 0x3856 <_Z8getParamPchh+0xb8>
    3854:	69 c0       	rjmp	.+210    	; 0x3928 <_Z8getParamPchh+0x18a>
    3856:	98 2f       	mov	r25, r24
    3858:	9f 7d       	andi	r25, 0xDF	; 223
    385a:	09 f4       	brne	.+2      	; 0x385e <_Z8getParamPchh+0xc0>
    385c:	68 c0       	rjmp	.+208    	; 0x392e <_Z8getParamPchh+0x190>
    385e:	68 17       	cp	r22, r24
    3860:	09 f4       	brne	.+2      	; 0x3864 <_Z8getParamPchh+0xc6>
    3862:	68 c0       	rjmp	.+208    	; 0x3934 <_Z8getParamPchh+0x196>
    3864:	90 ed       	ldi	r25, 0xD0	; 208
    3866:	98 0f       	add	r25, r24
    3868:	9a 30       	cpi	r25, 0x0A	; 10
    386a:	08 f0       	brcs	.+2      	; 0x386e <_Z8getParamPchh+0xd0>
    386c:	66 c0       	rjmp	.+204    	; 0x393a <_Z8getParamPchh+0x19c>
    386e:	a9 01       	movw	r20, r18
    3870:	44 0f       	add	r20, r20
    3872:	55 1f       	adc	r21, r21
    3874:	22 0f       	add	r18, r18
    3876:	33 1f       	adc	r19, r19
    3878:	22 0f       	add	r18, r18
    387a:	33 1f       	adc	r19, r19
    387c:	22 0f       	add	r18, r18
    387e:	33 1f       	adc	r19, r19
    3880:	42 0f       	add	r20, r18
    3882:	53 1f       	adc	r21, r19
    3884:	28 2f       	mov	r18, r24
    3886:	30 e0       	ldi	r19, 0x00	; 0
    3888:	20 53       	subi	r18, 0x30	; 48
    388a:	31 09       	sbc	r19, r1
    388c:	24 0f       	add	r18, r20
    388e:	35 1f       	adc	r19, r21
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	8d 32       	cpi	r24, 0x2D	; 45
    3894:	09 f4       	brne	.+2      	; 0x3898 <_Z8getParamPchh+0xfa>
    3896:	54 c0       	rjmp	.+168    	; 0x3940 <_Z8getParamPchh+0x1a2>
    3898:	98 2f       	mov	r25, r24
    389a:	9f 7d       	andi	r25, 0xDF	; 223
    389c:	09 f4       	brne	.+2      	; 0x38a0 <_Z8getParamPchh+0x102>
    389e:	53 c0       	rjmp	.+166    	; 0x3946 <_Z8getParamPchh+0x1a8>
    38a0:	68 17       	cp	r22, r24
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <_Z8getParamPchh+0x108>
    38a4:	53 c0       	rjmp	.+166    	; 0x394c <_Z8getParamPchh+0x1ae>
    38a6:	90 ed       	ldi	r25, 0xD0	; 208
    38a8:	98 0f       	add	r25, r24
    38aa:	9a 30       	cpi	r25, 0x0A	; 10
    38ac:	08 f0       	brcs	.+2      	; 0x38b0 <_Z8getParamPchh+0x112>
    38ae:	51 c0       	rjmp	.+162    	; 0x3952 <_Z8getParamPchh+0x1b4>
    38b0:	a9 01       	movw	r20, r18
    38b2:	44 0f       	add	r20, r20
    38b4:	55 1f       	adc	r21, r21
    38b6:	22 0f       	add	r18, r18
    38b8:	33 1f       	adc	r19, r19
    38ba:	22 0f       	add	r18, r18
    38bc:	33 1f       	adc	r19, r19
    38be:	22 0f       	add	r18, r18
    38c0:	33 1f       	adc	r19, r19
    38c2:	24 0f       	add	r18, r20
    38c4:	35 1f       	adc	r19, r21
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	c0 97       	sbiw	r24, 0x30	; 48
    38ca:	28 0f       	add	r18, r24
    38cc:	39 1f       	adc	r19, r25
    38ce:	83 81       	ldd	r24, Z+3	; 0x03
    38d0:	8d 32       	cpi	r24, 0x2D	; 45
    38d2:	29 f0       	breq	.+10     	; 0x38de <_Z8getParamPchh+0x140>
    38d4:	98 2f       	mov	r25, r24
    38d6:	9f 7d       	andi	r25, 0xDF	; 223
    38d8:	11 f0       	breq	.+4      	; 0x38de <_Z8getParamPchh+0x140>
    38da:	68 13       	cpse	r22, r24
    38dc:	3d c0       	rjmp	.+122    	; 0x3958 <_Z8getParamPchh+0x1ba>
    38de:	2f 3f       	cpi	r18, 0xFF	; 255
    38e0:	31 05       	cpc	r19, r1
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <_Z8getParamPchh+0x148>
    38e4:	e4 f5       	brge	.+120    	; 0x395e <_Z8getParamPchh+0x1c0>
    38e6:	82 2f       	mov	r24, r18
    38e8:	93 2f       	mov	r25, r19
    38ea:	08 95       	ret
    38ec:	8f ef       	ldi	r24, 0xFF	; 255
    38ee:	9f ef       	ldi	r25, 0xFF	; 255
    38f0:	08 95       	ret
    38f2:	82 2f       	mov	r24, r18
    38f4:	93 2f       	mov	r25, r19
    38f6:	08 95       	ret
    38f8:	82 2f       	mov	r24, r18
    38fa:	93 2f       	mov	r25, r19
    38fc:	08 95       	ret
    38fe:	82 2f       	mov	r24, r18
    3900:	93 2f       	mov	r25, r19
    3902:	08 95       	ret
    3904:	8f ef       	ldi	r24, 0xFF	; 255
    3906:	9f ef       	ldi	r25, 0xFF	; 255
    3908:	08 95       	ret
    390a:	82 2f       	mov	r24, r18
    390c:	93 2f       	mov	r25, r19
    390e:	08 95       	ret
    3910:	82 2f       	mov	r24, r18
    3912:	93 2f       	mov	r25, r19
    3914:	08 95       	ret
    3916:	8f ef       	ldi	r24, 0xFF	; 255
    3918:	9f ef       	ldi	r25, 0xFF	; 255
    391a:	08 95       	ret
    391c:	8f ef       	ldi	r24, 0xFF	; 255
    391e:	9f ef       	ldi	r25, 0xFF	; 255
    3920:	08 95       	ret
    3922:	8f ef       	ldi	r24, 0xFF	; 255
    3924:	9f ef       	ldi	r25, 0xFF	; 255
    3926:	08 95       	ret
    3928:	82 2f       	mov	r24, r18
    392a:	93 2f       	mov	r25, r19
    392c:	08 95       	ret
    392e:	82 2f       	mov	r24, r18
    3930:	93 2f       	mov	r25, r19
    3932:	08 95       	ret
    3934:	82 2f       	mov	r24, r18
    3936:	93 2f       	mov	r25, r19
    3938:	08 95       	ret
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	9f ef       	ldi	r25, 0xFF	; 255
    393e:	08 95       	ret
    3940:	82 2f       	mov	r24, r18
    3942:	93 2f       	mov	r25, r19
    3944:	08 95       	ret
    3946:	82 2f       	mov	r24, r18
    3948:	93 2f       	mov	r25, r19
    394a:	08 95       	ret
    394c:	82 2f       	mov	r24, r18
    394e:	93 2f       	mov	r25, r19
    3950:	08 95       	ret
    3952:	8f ef       	ldi	r24, 0xFF	; 255
    3954:	9f ef       	ldi	r25, 0xFF	; 255
    3956:	08 95       	ret
    3958:	8f ef       	ldi	r24, 0xFF	; 255
    395a:	9f ef       	ldi	r25, 0xFF	; 255
    395c:	08 95       	ret
    395e:	8f ef       	ldi	r24, 0xFF	; 255
    3960:	9f ef       	ldi	r25, 0xFF	; 255
    3962:	08 95       	ret

00003964 <_Z12populateDataPchhh>:
    3964:	ef 92       	push	r14
    3966:	ff 92       	push	r15
    3968:	0f 93       	push	r16
    396a:	1f 93       	push	r17
    396c:	cf 93       	push	r28
    396e:	df 93       	push	r29
    3970:	ec 01       	movw	r28, r24
    3972:	e6 2e       	mov	r14, r22
    3974:	04 2f       	mov	r16, r20
    3976:	f2 2e       	mov	r15, r18
    3978:	6c e2       	ldi	r22, 0x2C	; 44
    397a:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    397e:	f1 10       	cpse	r15, r1
    3980:	03 c0       	rjmp	.+6      	; 0x3988 <_Z12populateDataPchhh+0x24>
    3982:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <i2c_cmd_structure+0x4>
    3986:	05 c0       	rjmp	.+10     	; 0x3992 <_Z12populateDataPchhh+0x2e>
    3988:	21 e0       	ldi	r18, 0x01	; 1
    398a:	f2 12       	cpse	r15, r18
    398c:	4a c0       	rjmp	.+148    	; 0x3a22 <_Z12populateDataPchhh+0xbe>
    398e:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <spi_cmd_structure+0x2>
    3992:	01 96       	adiw	r24, 0x01	; 1
    3994:	09 f4       	brne	.+2      	; 0x3998 <_Z12populateDataPchhh+0x34>
    3996:	47 c0       	rjmp	.+142    	; 0x3a26 <_Z12populateDataPchhh+0xc2>
    3998:	ee 20       	and	r14, r14
    399a:	09 f4       	brne	.+2      	; 0x399e <_Z12populateDataPchhh+0x3a>
    399c:	46 c0       	rjmp	.+140    	; 0x3a2a <_Z12populateDataPchhh+0xc6>
    399e:	10 e0       	ldi	r17, 0x00	; 0
    39a0:	06 c0       	rjmp	.+12     	; 0x39ae <_Z12populateDataPchhh+0x4a>
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <_Z12populateDataPchhh+0x44>
    39a6:	43 c0       	rjmp	.+134    	; 0x3a2e <_Z12populateDataPchhh+0xca>
    39a8:	e1 16       	cp	r14, r17
    39aa:	09 f4       	brne	.+2      	; 0x39ae <_Z12populateDataPchhh+0x4a>
    39ac:	42 c0       	rjmp	.+132    	; 0x3a32 <_Z12populateDataPchhh+0xce>
    39ae:	00 31       	cpi	r16, 0x10	; 16
    39b0:	81 f4       	brne	.+32     	; 0x39d2 <_Z12populateDataPchhh+0x6e>
    39b2:	88 81       	ld	r24, Y
    39b4:	8c 32       	cpi	r24, 0x2C	; 44
    39b6:	59 f0       	breq	.+22     	; 0x39ce <_Z12populateDataPchhh+0x6a>
    39b8:	88 23       	and	r24, r24
    39ba:	49 f0       	breq	.+18     	; 0x39ce <_Z12populateDataPchhh+0x6a>
    39bc:	fe 01       	movw	r30, r28
    39be:	31 96       	adiw	r30, 0x01	; 1
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <_Z12populateDataPchhh+0x62>
    39c2:	99 23       	and	r25, r25
    39c4:	21 f0       	breq	.+8      	; 0x39ce <_Z12populateDataPchhh+0x6a>
    39c6:	ef 01       	movw	r28, r30
    39c8:	91 91       	ld	r25, Z+
    39ca:	9c 32       	cpi	r25, 0x2C	; 44
    39cc:	d1 f7       	brne	.-12     	; 0x39c2 <_Z12populateDataPchhh+0x5e>
    39ce:	21 96       	adiw	r28, 0x01	; 1
    39d0:	11 c0       	rjmp	.+34     	; 0x39f4 <_Z12populateDataPchhh+0x90>
    39d2:	0a 30       	cpi	r16, 0x0A	; 10
    39d4:	79 f4       	brne	.+30     	; 0x39f4 <_Z12populateDataPchhh+0x90>
    39d6:	88 81       	ld	r24, Y
    39d8:	8c 32       	cpi	r24, 0x2C	; 44
    39da:	59 f0       	breq	.+22     	; 0x39f2 <_Z12populateDataPchhh+0x8e>
    39dc:	88 23       	and	r24, r24
    39de:	49 f0       	breq	.+18     	; 0x39f2 <_Z12populateDataPchhh+0x8e>
    39e0:	fe 01       	movw	r30, r28
    39e2:	31 96       	adiw	r30, 0x01	; 1
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <_Z12populateDataPchhh+0x86>
    39e6:	99 23       	and	r25, r25
    39e8:	21 f0       	breq	.+8      	; 0x39f2 <_Z12populateDataPchhh+0x8e>
    39ea:	ef 01       	movw	r28, r30
    39ec:	91 91       	ld	r25, Z+
    39ee:	9c 32       	cpi	r25, 0x2C	; 44
    39f0:	d1 f7       	brne	.-12     	; 0x39e6 <_Z12populateDataPchhh+0x82>
    39f2:	21 96       	adiw	r28, 0x01	; 1
    39f4:	1f 5f       	subi	r17, 0xFF	; 255
    39f6:	40 2f       	mov	r20, r16
    39f8:	6c e2       	ldi	r22, 0x2C	; 44
    39fa:	ce 01       	movw	r24, r28
    39fc:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3a00:	f1 10       	cpse	r15, r1
    3a02:	06 c0       	rjmp	.+12     	; 0x3a10 <_Z12populateDataPchhh+0xac>
    3a04:	e1 2f       	mov	r30, r17
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	e6 5a       	subi	r30, 0xA6	; 166
    3a0a:	fb 4f       	sbci	r31, 0xFB	; 251
    3a0c:	84 83       	std	Z+4, r24	; 0x04
    3a0e:	c9 cf       	rjmp	.-110    	; 0x39a2 <_Z12populateDataPchhh+0x3e>
    3a10:	21 e0       	ldi	r18, 0x01	; 1
    3a12:	f2 12       	cpse	r15, r18
    3a14:	10 c0       	rjmp	.+32     	; 0x3a36 <_Z12populateDataPchhh+0xd2>
    3a16:	e1 2f       	mov	r30, r17
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	e9 59       	subi	r30, 0x99	; 153
    3a1c:	fb 4f       	sbci	r31, 0xFB	; 251
    3a1e:	82 83       	std	Z+2, r24	; 0x02
    3a20:	c0 cf       	rjmp	.-128    	; 0x39a2 <_Z12populateDataPchhh+0x3e>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	09 c0       	rjmp	.+18     	; 0x3a38 <_Z12populateDataPchhh+0xd4>
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	07 c0       	rjmp	.+14     	; 0x3a38 <_Z12populateDataPchhh+0xd4>
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	05 c0       	rjmp	.+10     	; 0x3a38 <_Z12populateDataPchhh+0xd4>
    3a2e:	81 2f       	mov	r24, r17
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <_Z12populateDataPchhh+0xd4>
    3a32:	8e 2d       	mov	r24, r14
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <_Z12populateDataPchhh+0xd4>
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	ef 90       	pop	r14
    3a44:	08 95       	ret

00003a46 <_Z13parse_spi_cmdPch>:
    3a46:	ff 92       	push	r15
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
    3a4c:	cf 93       	push	r28
    3a4e:	df 93       	push	r29
    3a50:	8c 01       	movw	r16, r24
    3a52:	f6 2e       	mov	r15, r22
    3a54:	62 e6       	ldi	r22, 0x62	; 98
    3a56:	73 e0       	ldi	r23, 0x03	; 3
    3a58:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	b9 f0       	breq	.+46     	; 0x3a8e <_Z13parse_spi_cmdPch+0x48>
    3a60:	ec 01       	movw	r28, r24
    3a62:	22 96       	adiw	r28, 0x02	; 2
    3a64:	43 e0       	ldi	r20, 0x03	; 3
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	65 e6       	ldi	r22, 0x65	; 101
    3a6a:	73 e0       	ldi	r23, 0x03	; 3
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <strncmp>
    3a72:	89 2b       	or	r24, r25
    3a74:	71 f0       	breq	.+28     	; 0x3a92 <_Z13parse_spi_cmdPch+0x4c>
    3a76:	43 e0       	ldi	r20, 0x03	; 3
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	69 e6       	ldi	r22, 0x69	; 105
    3a7c:	73 e0       	ldi	r23, 0x03	; 3
    3a7e:	ce 01       	movw	r24, r28
    3a80:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <strncmp>
    3a84:	89 2b       	or	r24, r25
    3a86:	09 f0       	breq	.+2      	; 0x3a8a <_Z13parse_spi_cmdPch+0x44>
    3a88:	0a c1       	rjmp	.+532    	; 0x3c9e <_Z13parse_spi_cmdPch+0x258>
    3a8a:	ca e0       	ldi	r28, 0x0A	; 10
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <_Z13parse_spi_cmdPch+0x4e>
    3a8e:	c0 e1       	ldi	r28, 0x10	; 16
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <_Z13parse_spi_cmdPch+0x4e>
    3a92:	c0 e1       	ldi	r28, 0x10	; 16
    3a94:	c0 93 71 04 	sts	0x0471, r28	; 0x800471 <spi_cmd_structure+0xa>
    3a98:	f1 10       	cpse	r15, r1
    3a9a:	28 c0       	rjmp	.+80     	; 0x3aec <_Z13parse_spi_cmdPch+0xa6>
    3a9c:	6d e6       	ldi	r22, 0x6D	; 109
    3a9e:	73 e0       	ldi	r23, 0x03	; 3
    3aa0:	c8 01       	movw	r24, r16
    3aa2:	09 96       	adiw	r24, 0x09	; 9
    3aa4:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	09 f4       	brne	.+2      	; 0x3aae <_Z13parse_spi_cmdPch+0x68>
    3aac:	fa c0       	rjmp	.+500    	; 0x3ca2 <_Z13parse_spi_cmdPch+0x25c>
    3aae:	4c 2f       	mov	r20, r28
    3ab0:	6d e2       	ldi	r22, 0x2D	; 45
    3ab2:	02 96       	adiw	r24, 0x02	; 2
    3ab4:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    3aba:	2f ef       	ldi	r18, 0xFF	; 255
    3abc:	92 07       	cpc	r25, r18
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <_Z13parse_spi_cmdPch+0x7c>
    3ac0:	f2 c0       	rjmp	.+484    	; 0x3ca6 <_Z13parse_spi_cmdPch+0x260>
    3ac2:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <spi_cmd_structure>
    3ac6:	60 e7       	ldi	r22, 0x70	; 112
    3ac8:	73 e0       	ldi	r23, 0x03	; 3
    3aca:	c8 01       	movw	r24, r16
    3acc:	08 96       	adiw	r24, 0x08	; 8
    3ace:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <_Z13parse_spi_cmdPch+0x92>
    3ad6:	e9 c0       	rjmp	.+466    	; 0x3caa <_Z13parse_spi_cmdPch+0x264>
    3ad8:	21 e0       	ldi	r18, 0x01	; 1
    3ada:	4c 2f       	mov	r20, r28
    3adc:	68 e0       	ldi	r22, 0x08	; 8
    3ade:	02 96       	adiw	r24, 0x02	; 2
    3ae0:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z12populateDataPchhh>
    3ae4:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <spi_cmd_structure+0x1>
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	ec c0       	rjmp	.+472    	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	f8 12       	cpse	r15, r24
    3af0:	17 c0       	rjmp	.+46     	; 0x3b20 <_Z13parse_spi_cmdPch+0xda>
    3af2:	6d e6       	ldi	r22, 0x6D	; 109
    3af4:	73 e0       	ldi	r23, 0x03	; 3
    3af6:	c8 01       	movw	r24, r16
    3af8:	08 96       	adiw	r24, 0x08	; 8
    3afa:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3afe:	00 97       	sbiw	r24, 0x00	; 0
    3b00:	09 f4       	brne	.+2      	; 0x3b04 <_Z13parse_spi_cmdPch+0xbe>
    3b02:	d5 c0       	rjmp	.+426    	; 0x3cae <_Z13parse_spi_cmdPch+0x268>
    3b04:	4c 2f       	mov	r20, r28
    3b06:	6d e2       	ldi	r22, 0x2D	; 45
    3b08:	02 96       	adiw	r24, 0x02	; 2
    3b0a:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b10:	ef ef       	ldi	r30, 0xFF	; 255
    3b12:	9e 07       	cpc	r25, r30
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <_Z13parse_spi_cmdPch+0xd2>
    3b16:	cd c0       	rjmp	.+410    	; 0x3cb2 <_Z13parse_spi_cmdPch+0x26c>
    3b18:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <spi_cmd_structure>
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	d2 c0       	rjmp	.+420    	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3b20:	f2 e0       	ldi	r31, 0x02	; 2
    3b22:	ff 12       	cpse	r15, r31
    3b24:	c8 c0       	rjmp	.+400    	; 0x3cb6 <_Z13parse_spi_cmdPch+0x270>
    3b26:	e2 e7       	ldi	r30, 0x72	; 114
    3b28:	f4 e0       	ldi	r31, 0x04	; 4
    3b2a:	82 e0       	ldi	r24, 0x02	; 2
    3b2c:	81 83       	std	Z+1, r24	; 0x01
    3b2e:	8a e0       	ldi	r24, 0x0A	; 10
    3b30:	80 83       	st	Z, r24
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	83 83       	std	Z+3, r24	; 0x03
    3b36:	12 82       	std	Z+2, r1	; 0x02
    3b38:	14 82       	std	Z+4, r1	; 0x04
    3b3a:	06 5f       	subi	r16, 0xF6	; 246
    3b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3e:	63 e7       	ldi	r22, 0x73	; 115
    3b40:	73 e0       	ldi	r23, 0x03	; 3
    3b42:	c8 01       	movw	r24, r16
    3b44:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	19 f1       	breq	.+70     	; 0x3b92 <_Z13parse_spi_cmdPch+0x14c>
    3b4c:	4c 2f       	mov	r20, r28
    3b4e:	6d e2       	ldi	r22, 0x2D	; 45
    3b50:	02 96       	adiw	r24, 0x02	; 2
    3b52:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3b56:	8f 3f       	cpi	r24, 0xFF	; 255
    3b58:	2f ef       	ldi	r18, 0xFF	; 255
    3b5a:	92 07       	cpc	r25, r18
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <_Z13parse_spi_cmdPch+0x11a>
    3b5e:	ad c0       	rjmp	.+346    	; 0x3cba <_Z13parse_spi_cmdPch+0x274>
    3b60:	25 ef       	ldi	r18, 0xF5	; 245
    3b62:	28 0f       	add	r18, r24
    3b64:	23 30       	cpi	r18, 0x03	; 3
    3b66:	50 f0       	brcs	.+20     	; 0x3b7c <_Z13parse_spi_cmdPch+0x136>
    3b68:	2e ee       	ldi	r18, 0xEE	; 238
    3b6a:	28 0f       	add	r18, r24
    3b6c:	22 30       	cpi	r18, 0x02	; 2
    3b6e:	30 f0       	brcs	.+12     	; 0x3b7c <_Z13parse_spi_cmdPch+0x136>
    3b70:	82 30       	cpi	r24, 0x02	; 2
    3b72:	20 f0       	brcs	.+8      	; 0x3b7c <_Z13parse_spi_cmdPch+0x136>
    3b74:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <spi_config>
    3b78:	d1 e0       	ldi	r29, 0x01	; 1
    3b7a:	0c c0       	rjmp	.+24     	; 0x3b94 <_Z13parse_spi_cmdPch+0x14e>
    3b7c:	8a e0       	ldi	r24, 0x0A	; 10
    3b7e:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <spi_config>
    3b82:	63 eb       	ldi	r22, 0xB3	; 179
    3b84:	75 e0       	ldi	r23, 0x05	; 5
    3b86:	88 ea       	ldi	r24, 0xA8	; 168
    3b88:	93 e0       	ldi	r25, 0x03	; 3
    3b8a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	99 c0       	rjmp	.+306    	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3b92:	d0 e0       	ldi	r29, 0x00	; 0
    3b94:	66 e7       	ldi	r22, 0x76	; 118
    3b96:	73 e0       	ldi	r23, 0x03	; 3
    3b98:	c8 01       	movw	r24, r16
    3b9a:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3b9e:	00 97       	sbiw	r24, 0x00	; 0
    3ba0:	e9 f1       	breq	.+122    	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3ba2:	4c 2f       	mov	r20, r28
    3ba4:	6d e2       	ldi	r22, 0x2D	; 45
    3ba6:	02 96       	adiw	r24, 0x02	; 2
    3ba8:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3bac:	8f 3f       	cpi	r24, 0xFF	; 255
    3bae:	ef ef       	ldi	r30, 0xFF	; 255
    3bb0:	9e 07       	cpc	r25, r30
    3bb2:	09 f4       	brne	.+2      	; 0x3bb6 <_Z13parse_spi_cmdPch+0x170>
    3bb4:	84 c0       	rjmp	.+264    	; 0x3cbe <_Z13parse_spi_cmdPch+0x278>
    3bb6:	80 93 73 04 	sts	0x0473, r24	; 0x800473 <spi_config+0x1>
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	31 97       	sbiw	r30, 0x01	; 1
    3bc0:	e7 30       	cpi	r30, 0x07	; 7
    3bc2:	f1 05       	cpc	r31, r1
    3bc4:	10 f5       	brcc	.+68     	; 0x3c0a <_Z13parse_spi_cmdPch+0x1c4>
    3bc6:	ec 5c       	subi	r30, 0xCC	; 204
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	0c 94 63 2d 	jmp	0x5ac6	; 0x5ac6 <__tablejump2__>
    3bce:	84 e0       	ldi	r24, 0x04	; 4
    3bd0:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3bd4:	d1 e0       	ldi	r29, 0x01	; 1
    3bd6:	22 c0       	rjmp	.+68     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3bd8:	85 e0       	ldi	r24, 0x05	; 5
    3bda:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3bde:	d1 e0       	ldi	r29, 0x01	; 1
    3be0:	1d c0       	rjmp	.+58     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3be8:	d1 e0       	ldi	r29, 0x01	; 1
    3bea:	18 c0       	rjmp	.+48     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3bec:	86 e0       	ldi	r24, 0x06	; 6
    3bee:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3bf2:	d1 e0       	ldi	r29, 0x01	; 1
    3bf4:	13 c0       	rjmp	.+38     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3bf6:	82 e0       	ldi	r24, 0x02	; 2
    3bf8:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3bfc:	d1 e0       	ldi	r29, 0x01	; 1
    3bfe:	0e c0       	rjmp	.+28     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3c00:	83 e0       	ldi	r24, 0x03	; 3
    3c02:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <spi_config+0x4>
    3c06:	d1 e0       	ldi	r29, 0x01	; 1
    3c08:	09 c0       	rjmp	.+18     	; 0x3c1c <_Z13parse_spi_cmdPch+0x1d6>
    3c0a:	6e e9       	ldi	r22, 0x9E	; 158
    3c0c:	75 e0       	ldi	r23, 0x05	; 5
    3c0e:	88 ea       	ldi	r24, 0xA8	; 168
    3c10:	93 e0       	ldi	r25, 0x03	; 3
    3c12:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	55 c0       	rjmp	.+170    	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3c1a:	d1 e0       	ldi	r29, 0x01	; 1
    3c1c:	69 e7       	ldi	r22, 0x79	; 121
    3c1e:	73 e0       	ldi	r23, 0x03	; 3
    3c20:	c8 01       	movw	r24, r16
    3c22:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3c26:	00 97       	sbiw	r24, 0x00	; 0
    3c28:	d9 f0       	breq	.+54     	; 0x3c60 <_Z13parse_spi_cmdPch+0x21a>
    3c2a:	4c 2f       	mov	r20, r28
    3c2c:	6d e2       	ldi	r22, 0x2D	; 45
    3c2e:	02 96       	adiw	r24, 0x02	; 2
    3c30:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3c34:	8f 3f       	cpi	r24, 0xFF	; 255
    3c36:	ff ef       	ldi	r31, 0xFF	; 255
    3c38:	9f 07       	cpc	r25, r31
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <_Z13parse_spi_cmdPch+0x1f8>
    3c3c:	42 c0       	rjmp	.+132    	; 0x3cc2 <_Z13parse_spi_cmdPch+0x27c>
    3c3e:	84 30       	cpi	r24, 0x04	; 4
    3c40:	50 f0       	brcs	.+20     	; 0x3c56 <_Z13parse_spi_cmdPch+0x210>
    3c42:	10 92 74 04 	sts	0x0474, r1	; 0x800474 <spi_config+0x2>
    3c46:	6a e8       	ldi	r22, 0x8A	; 138
    3c48:	75 e0       	ldi	r23, 0x05	; 5
    3c4a:	88 ea       	ldi	r24, 0xA8	; 168
    3c4c:	93 e0       	ldi	r25, 0x03	; 3
    3c4e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	37 c0       	rjmp	.+110    	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3c56:	88 0f       	add	r24, r24
    3c58:	88 0f       	add	r24, r24
    3c5a:	80 93 74 04 	sts	0x0474, r24	; 0x800474 <spi_config+0x2>
    3c5e:	d1 e0       	ldi	r29, 0x01	; 1
    3c60:	6c e7       	ldi	r22, 0x7C	; 124
    3c62:	73 e0       	ldi	r23, 0x03	; 3
    3c64:	c8 01       	movw	r24, r16
    3c66:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3c6a:	00 97       	sbiw	r24, 0x00	; 0
    3c6c:	99 f0       	breq	.+38     	; 0x3c94 <_Z13parse_spi_cmdPch+0x24e>
    3c6e:	fc 01       	movw	r30, r24
    3c70:	82 81       	ldd	r24, Z+2	; 0x02
    3c72:	8d 36       	cpi	r24, 0x6D	; 109
    3c74:	71 f0       	breq	.+28     	; 0x3c92 <_Z13parse_spi_cmdPch+0x24c>
    3c76:	8c 36       	cpi	r24, 0x6C	; 108
    3c78:	21 f4       	brne	.+8      	; 0x3c82 <_Z13parse_spi_cmdPch+0x23c>
    3c7a:	10 92 75 04 	sts	0x0475, r1	; 0x800475 <spi_config+0x3>
    3c7e:	d1 e0       	ldi	r29, 0x01	; 1
    3c80:	09 c0       	rjmp	.+18     	; 0x3c94 <_Z13parse_spi_cmdPch+0x24e>
    3c82:	61 e7       	ldi	r22, 0x71	; 113
    3c84:	75 e0       	ldi	r23, 0x05	; 5
    3c86:	88 ea       	ldi	r24, 0xA8	; 168
    3c88:	93 e0       	ldi	r25, 0x03	; 3
    3c8a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    3c8e:	80 e0       	ldi	r24, 0x00	; 0
    3c90:	19 c0       	rjmp	.+50     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3c92:	d1 e0       	ldi	r29, 0x01	; 1
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	d1 11       	cpse	r29, r1
    3c98:	15 c0       	rjmp	.+42     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	13 c0       	rjmp	.+38     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	11 c0       	rjmp	.+34     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	0f c0       	rjmp	.+30     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	0d c0       	rjmp	.+26     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3caa:	80 e0       	ldi	r24, 0x00	; 0
    3cac:	0b c0       	rjmp	.+22     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	09 c0       	rjmp	.+18     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	07 c0       	rjmp	.+14     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	05 c0       	rjmp	.+10     	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	03 c0       	rjmp	.+6      	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	01 c0       	rjmp	.+2      	; 0x3cc4 <_Z13parse_spi_cmdPch+0x27e>
    3cc2:	80 e0       	ldi	r24, 0x00	; 0
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	08 95       	ret

00003cd0 <_Z13parse_i2c_cmdPch>:
    3cd0:	ff 92       	push	r15
    3cd2:	0f 93       	push	r16
    3cd4:	1f 93       	push	r17
    3cd6:	cf 93       	push	r28
    3cd8:	df 93       	push	r29
    3cda:	8c 01       	movw	r16, r24
    3cdc:	f6 2e       	mov	r15, r22
    3cde:	62 e6       	ldi	r22, 0x62	; 98
    3ce0:	73 e0       	ldi	r23, 0x03	; 3
    3ce2:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3ce6:	00 97       	sbiw	r24, 0x00	; 0
    3ce8:	b9 f0       	breq	.+46     	; 0x3d18 <_Z13parse_i2c_cmdPch+0x48>
    3cea:	ec 01       	movw	r28, r24
    3cec:	22 96       	adiw	r28, 0x02	; 2
    3cee:	43 e0       	ldi	r20, 0x03	; 3
    3cf0:	50 e0       	ldi	r21, 0x00	; 0
    3cf2:	65 e6       	ldi	r22, 0x65	; 101
    3cf4:	73 e0       	ldi	r23, 0x03	; 3
    3cf6:	ce 01       	movw	r24, r28
    3cf8:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <strncmp>
    3cfc:	89 2b       	or	r24, r25
    3cfe:	71 f0       	breq	.+28     	; 0x3d1c <_Z13parse_i2c_cmdPch+0x4c>
    3d00:	43 e0       	ldi	r20, 0x03	; 3
    3d02:	50 e0       	ldi	r21, 0x00	; 0
    3d04:	69 e6       	ldi	r22, 0x69	; 105
    3d06:	73 e0       	ldi	r23, 0x03	; 3
    3d08:	ce 01       	movw	r24, r28
    3d0a:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <strncmp>
    3d0e:	89 2b       	or	r24, r25
    3d10:	09 f0       	breq	.+2      	; 0x3d14 <_Z13parse_i2c_cmdPch+0x44>
    3d12:	b2 c0       	rjmp	.+356    	; 0x3e78 <_Z13parse_i2c_cmdPch+0x1a8>
    3d14:	ca e0       	ldi	r28, 0x0A	; 10
    3d16:	03 c0       	rjmp	.+6      	; 0x3d1e <_Z13parse_i2c_cmdPch+0x4e>
    3d18:	c0 e1       	ldi	r28, 0x10	; 16
    3d1a:	01 c0       	rjmp	.+2      	; 0x3d1e <_Z13parse_i2c_cmdPch+0x4e>
    3d1c:	c0 e1       	ldi	r28, 0x10	; 16
    3d1e:	c0 93 66 04 	sts	0x0466, r28	; 0x800466 <i2c_cmd_structure+0xc>
    3d22:	f1 10       	cpse	r15, r1
    3d24:	50 c0       	rjmp	.+160    	; 0x3dc6 <_Z13parse_i2c_cmdPch+0xf6>
    3d26:	08 5f       	subi	r16, 0xF8	; 248
    3d28:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2a:	6f e7       	ldi	r22, 0x7F	; 127
    3d2c:	73 e0       	ldi	r23, 0x03	; 3
    3d2e:	c8 01       	movw	r24, r16
    3d30:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <_Z13parse_i2c_cmdPch+0x6a>
    3d38:	a1 c0       	rjmp	.+322    	; 0x3e7c <_Z13parse_i2c_cmdPch+0x1ac>
    3d3a:	4c 2f       	mov	r20, r28
    3d3c:	6d e2       	ldi	r22, 0x2D	; 45
    3d3e:	02 96       	adiw	r24, 0x02	; 2
    3d40:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3d44:	8f 3f       	cpi	r24, 0xFF	; 255
    3d46:	2f ef       	ldi	r18, 0xFF	; 255
    3d48:	92 07       	cpc	r25, r18
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <_Z13parse_i2c_cmdPch+0x7e>
    3d4c:	99 c0       	rjmp	.+306    	; 0x3e80 <_Z13parse_i2c_cmdPch+0x1b0>
    3d4e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <i2c_cmd_structure>
    3d52:	62 e8       	ldi	r22, 0x82	; 130
    3d54:	73 e0       	ldi	r23, 0x03	; 3
    3d56:	c8 01       	movw	r24, r16
    3d58:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3d5c:	00 97       	sbiw	r24, 0x00	; 0
    3d5e:	09 f4       	brne	.+2      	; 0x3d62 <_Z13parse_i2c_cmdPch+0x92>
    3d60:	91 c0       	rjmp	.+290    	; 0x3e84 <_Z13parse_i2c_cmdPch+0x1b4>
    3d62:	4c 2f       	mov	r20, r28
    3d64:	6d e2       	ldi	r22, 0x2D	; 45
    3d66:	02 96       	adiw	r24, 0x02	; 2
    3d68:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3d6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6e:	2f ef       	ldi	r18, 0xFF	; 255
    3d70:	92 07       	cpc	r25, r18
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <_Z13parse_i2c_cmdPch+0xa6>
    3d74:	89 c0       	rjmp	.+274    	; 0x3e88 <_Z13parse_i2c_cmdPch+0x1b8>
    3d76:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <i2c_cmd_structure+0x1>
    3d7a:	6d e6       	ldi	r22, 0x6D	; 109
    3d7c:	73 e0       	ldi	r23, 0x03	; 3
    3d7e:	c8 01       	movw	r24, r16
    3d80:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <_Z13parse_i2c_cmdPch+0xba>
    3d88:	81 c0       	rjmp	.+258    	; 0x3e8c <_Z13parse_i2c_cmdPch+0x1bc>
    3d8a:	4c 2f       	mov	r20, r28
    3d8c:	6d e2       	ldi	r22, 0x2D	; 45
    3d8e:	02 96       	adiw	r24, 0x02	; 2
    3d90:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3d94:	8f 3f       	cpi	r24, 0xFF	; 255
    3d96:	2f ef       	ldi	r18, 0xFF	; 255
    3d98:	92 07       	cpc	r25, r18
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <_Z13parse_i2c_cmdPch+0xce>
    3d9c:	79 c0       	rjmp	.+242    	; 0x3e90 <_Z13parse_i2c_cmdPch+0x1c0>
    3d9e:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <i2c_cmd_structure+0x2>
    3da2:	60 e7       	ldi	r22, 0x70	; 112
    3da4:	73 e0       	ldi	r23, 0x03	; 3
    3da6:	c8 01       	movw	r24, r16
    3da8:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3dac:	00 97       	sbiw	r24, 0x00	; 0
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <_Z13parse_i2c_cmdPch+0xe2>
    3db0:	71 c0       	rjmp	.+226    	; 0x3e94 <_Z13parse_i2c_cmdPch+0x1c4>
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	4c 2f       	mov	r20, r28
    3db6:	68 e0       	ldi	r22, 0x08	; 8
    3db8:	02 96       	adiw	r24, 0x02	; 2
    3dba:	0e 94 b2 1c 	call	0x3964	; 0x3964 <_Z12populateDataPchhh>
    3dbe:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <i2c_cmd_structure+0x3>
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	7a c0       	rjmp	.+244    	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	f8 12       	cpse	r15, r24
    3dca:	3e c0       	rjmp	.+124    	; 0x3e48 <_Z13parse_i2c_cmdPch+0x178>
    3dcc:	09 5f       	subi	r16, 0xF9	; 249
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	6f e7       	ldi	r22, 0x7F	; 127
    3dd2:	73 e0       	ldi	r23, 0x03	; 3
    3dd4:	c8 01       	movw	r24, r16
    3dd6:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	09 f4       	brne	.+2      	; 0x3de0 <_Z13parse_i2c_cmdPch+0x110>
    3dde:	5c c0       	rjmp	.+184    	; 0x3e98 <_Z13parse_i2c_cmdPch+0x1c8>
    3de0:	4c 2f       	mov	r20, r28
    3de2:	6d e2       	ldi	r22, 0x2D	; 45
    3de4:	02 96       	adiw	r24, 0x02	; 2
    3de6:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3dea:	8f 3f       	cpi	r24, 0xFF	; 255
    3dec:	2f ef       	ldi	r18, 0xFF	; 255
    3dee:	92 07       	cpc	r25, r18
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <_Z13parse_i2c_cmdPch+0x124>
    3df2:	54 c0       	rjmp	.+168    	; 0x3e9c <_Z13parse_i2c_cmdPch+0x1cc>
    3df4:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <i2c_cmd_structure>
    3df8:	62 e8       	ldi	r22, 0x82	; 130
    3dfa:	73 e0       	ldi	r23, 0x03	; 3
    3dfc:	c8 01       	movw	r24, r16
    3dfe:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <_Z13parse_i2c_cmdPch+0x138>
    3e06:	4c c0       	rjmp	.+152    	; 0x3ea0 <_Z13parse_i2c_cmdPch+0x1d0>
    3e08:	4c 2f       	mov	r20, r28
    3e0a:	6d e2       	ldi	r22, 0x2D	; 45
    3e0c:	02 96       	adiw	r24, 0x02	; 2
    3e0e:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3e12:	8f 3f       	cpi	r24, 0xFF	; 255
    3e14:	2f ef       	ldi	r18, 0xFF	; 255
    3e16:	92 07       	cpc	r25, r18
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <_Z13parse_i2c_cmdPch+0x14c>
    3e1a:	44 c0       	rjmp	.+136    	; 0x3ea4 <_Z13parse_i2c_cmdPch+0x1d4>
    3e1c:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <i2c_cmd_structure+0x1>
    3e20:	6d e6       	ldi	r22, 0x6D	; 109
    3e22:	73 e0       	ldi	r23, 0x03	; 3
    3e24:	c8 01       	movw	r24, r16
    3e26:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3e2a:	00 97       	sbiw	r24, 0x00	; 0
    3e2c:	e9 f1       	breq	.+122    	; 0x3ea8 <_Z13parse_i2c_cmdPch+0x1d8>
    3e2e:	4c 2f       	mov	r20, r28
    3e30:	6d e2       	ldi	r22, 0x2D	; 45
    3e32:	02 96       	adiw	r24, 0x02	; 2
    3e34:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3e38:	8f 3f       	cpi	r24, 0xFF	; 255
    3e3a:	2f ef       	ldi	r18, 0xFF	; 255
    3e3c:	92 07       	cpc	r25, r18
    3e3e:	b1 f1       	breq	.+108    	; 0x3eac <_Z13parse_i2c_cmdPch+0x1dc>
    3e40:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <i2c_cmd_structure+0x2>
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	39 c0       	rjmp	.+114    	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	f8 12       	cpse	r15, r24
    3e4c:	31 c0       	rjmp	.+98     	; 0x3eb0 <_Z13parse_i2c_cmdPch+0x1e0>
    3e4e:	6f e7       	ldi	r22, 0x7F	; 127
    3e50:	73 e0       	ldi	r23, 0x03	; 3
    3e52:	c8 01       	movw	r24, r16
    3e54:	07 96       	adiw	r24, 0x07	; 7
    3e56:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <strstr>
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	59 f1       	breq	.+86     	; 0x3eb4 <_Z13parse_i2c_cmdPch+0x1e4>
    3e5e:	4c 2f       	mov	r20, r28
    3e60:	6d e2       	ldi	r22, 0x2D	; 45
    3e62:	02 96       	adiw	r24, 0x02	; 2
    3e64:	0e 94 cf 1b 	call	0x379e	; 0x379e <_Z8getParamPchh>
    3e68:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6a:	2f ef       	ldi	r18, 0xFF	; 255
    3e6c:	92 07       	cpc	r25, r18
    3e6e:	21 f1       	breq	.+72     	; 0x3eb8 <_Z13parse_i2c_cmdPch+0x1e8>
    3e70:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <i2c_cmd_structure>
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	21 c0       	rjmp	.+66     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	1f c0       	rjmp	.+62     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	1d c0       	rjmp	.+58     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	1b c0       	rjmp	.+54     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	19 c0       	rjmp	.+50     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	17 c0       	rjmp	.+46     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	15 c0       	rjmp	.+42     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	13 c0       	rjmp	.+38     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e94:	80 e0       	ldi	r24, 0x00	; 0
    3e96:	11 c0       	rjmp	.+34     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	0f c0       	rjmp	.+30     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	0d c0       	rjmp	.+26     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3ea0:	80 e0       	ldi	r24, 0x00	; 0
    3ea2:	0b c0       	rjmp	.+22     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	09 c0       	rjmp	.+18     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	07 c0       	rjmp	.+14     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	05 c0       	rjmp	.+10     	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	03 c0       	rjmp	.+6      	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3eb4:	80 e0       	ldi	r24, 0x00	; 0
    3eb6:	01 c0       	rjmp	.+2      	; 0x3eba <_Z13parse_i2c_cmdPch+0x1ea>
    3eb8:	80 e0       	ldi	r24, 0x00	; 0
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	08 95       	ret

00003ec6 <_Z15setPwmFrequencyii>:
    3ec6:	9c 01       	movw	r18, r24
    3ec8:	25 50       	subi	r18, 0x05	; 5
    3eca:	31 09       	sbc	r19, r1
    3ecc:	22 30       	cpi	r18, 0x02	; 2
    3ece:	31 05       	cpc	r19, r1
    3ed0:	08 f4       	brcc	.+2      	; 0x3ed4 <_Z15setPwmFrequencyii+0xe>
    3ed2:	5a c0       	rjmp	.+180    	; 0x3f88 <_Z15setPwmFrequencyii+0xc2>
    3ed4:	ac 01       	movw	r20, r24
    3ed6:	49 50       	subi	r20, 0x09	; 9
    3ed8:	51 09       	sbc	r21, r1
    3eda:	42 30       	cpi	r20, 0x02	; 2
    3edc:	51 05       	cpc	r21, r1
    3ede:	d0 f4       	brcc	.+52     	; 0x3f14 <_Z15setPwmFrequencyii+0x4e>
    3ee0:	69 c0       	rjmp	.+210    	; 0x3fb4 <_Z15setPwmFrequencyii+0xee>
    3ee2:	85 e0       	ldi	r24, 0x05	; 5
    3ee4:	06 c0       	rjmp	.+12     	; 0x3ef2 <_Z15setPwmFrequencyii+0x2c>
    3ee6:	22 30       	cpi	r18, 0x02	; 2
    3ee8:	31 05       	cpc	r19, r1
    3eea:	48 f4       	brcc	.+18     	; 0x3efe <_Z15setPwmFrequencyii+0x38>
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <_Z15setPwmFrequencyii+0x2c>
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	95 b5       	in	r25, 0x25	; 37
    3ef4:	98 7f       	andi	r25, 0xF8	; 248
    3ef6:	89 2b       	or	r24, r25
    3ef8:	85 bd       	out	0x25, r24	; 37
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	08 95       	ret
    3efe:	92 e0       	ldi	r25, 0x02	; 2
    3f00:	01 c0       	rjmp	.+2      	; 0x3f04 <_Z15setPwmFrequencyii+0x3e>
    3f02:	91 e0       	ldi	r25, 0x01	; 1
    3f04:	e1 e8       	ldi	r30, 0x81	; 129
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	88 7f       	andi	r24, 0xF8	; 248
    3f0c:	89 2b       	or	r24, r25
    3f0e:	80 83       	st	Z, r24
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	08 95       	ret
    3f14:	87 7f       	andi	r24, 0xF7	; 247
    3f16:	03 97       	sbiw	r24, 0x03	; 3
    3f18:	79 f5       	brne	.+94     	; 0x3f78 <_Z15setPwmFrequencyii+0xb2>
    3f1a:	60 34       	cpi	r22, 0x40	; 64
    3f1c:	71 05       	cpc	r23, r1
    3f1e:	d9 f0       	breq	.+54     	; 0x3f56 <_Z15setPwmFrequencyii+0x90>
    3f20:	54 f4       	brge	.+20     	; 0x3f36 <_Z15setPwmFrequencyii+0x70>
    3f22:	68 30       	cpi	r22, 0x08	; 8
    3f24:	71 05       	cpc	r23, r1
    3f26:	99 f0       	breq	.+38     	; 0x3f4e <_Z15setPwmFrequencyii+0x88>
    3f28:	60 32       	cpi	r22, 0x20	; 32
    3f2a:	71 05       	cpc	r23, r1
    3f2c:	91 f0       	breq	.+36     	; 0x3f52 <_Z15setPwmFrequencyii+0x8c>
    3f2e:	61 30       	cpi	r22, 0x01	; 1
    3f30:	71 05       	cpc	r23, r1
    3f32:	21 f5       	brne	.+72     	; 0x3f7c <_Z15setPwmFrequencyii+0xb6>
    3f34:	18 c0       	rjmp	.+48     	; 0x3f66 <_Z15setPwmFrequencyii+0xa0>
    3f36:	61 15       	cp	r22, r1
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	78 07       	cpc	r23, r24
    3f3c:	81 f0       	breq	.+32     	; 0x3f5e <_Z15setPwmFrequencyii+0x98>
    3f3e:	61 15       	cp	r22, r1
    3f40:	84 e0       	ldi	r24, 0x04	; 4
    3f42:	78 07       	cpc	r23, r24
    3f44:	71 f0       	breq	.+28     	; 0x3f62 <_Z15setPwmFrequencyii+0x9c>
    3f46:	60 38       	cpi	r22, 0x80	; 128
    3f48:	71 05       	cpc	r23, r1
    3f4a:	c1 f4       	brne	.+48     	; 0x3f7c <_Z15setPwmFrequencyii+0xb6>
    3f4c:	06 c0       	rjmp	.+12     	; 0x3f5a <_Z15setPwmFrequencyii+0x94>
    3f4e:	92 e0       	ldi	r25, 0x02	; 2
    3f50:	0b c0       	rjmp	.+22     	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f52:	93 e0       	ldi	r25, 0x03	; 3
    3f54:	09 c0       	rjmp	.+18     	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f56:	94 e0       	ldi	r25, 0x04	; 4
    3f58:	07 c0       	rjmp	.+14     	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f5a:	95 e0       	ldi	r25, 0x05	; 5
    3f5c:	05 c0       	rjmp	.+10     	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f5e:	96 e0       	ldi	r25, 0x06	; 6
    3f60:	03 c0       	rjmp	.+6      	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f62:	97 e0       	ldi	r25, 0x07	; 7
    3f64:	01 c0       	rjmp	.+2      	; 0x3f68 <_Z15setPwmFrequencyii+0xa2>
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	e1 eb       	ldi	r30, 0xB1	; 177
    3f6a:	f0 e0       	ldi	r31, 0x00	; 0
    3f6c:	80 81       	ld	r24, Z
    3f6e:	88 7f       	andi	r24, 0xF8	; 248
    3f70:	89 2b       	or	r24, r25
    3f72:	80 83       	st	Z, r24
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	08 95       	ret
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	08 95       	ret
    3f7c:	80 e0       	ldi	r24, 0x00	; 0
    3f7e:	08 95       	ret
    3f80:	80 e0       	ldi	r24, 0x00	; 0
    3f82:	08 95       	ret
    3f84:	80 e0       	ldi	r24, 0x00	; 0
    3f86:	08 95       	ret
    3f88:	60 34       	cpi	r22, 0x40	; 64
    3f8a:	71 05       	cpc	r23, r1
    3f8c:	51 f1       	breq	.+84     	; 0x3fe2 <_Z15setPwmFrequencyii+0x11c>
    3f8e:	4c f4       	brge	.+18     	; 0x3fa2 <_Z15setPwmFrequencyii+0xdc>
    3f90:	61 30       	cpi	r22, 0x01	; 1
    3f92:	71 05       	cpc	r23, r1
    3f94:	09 f4       	brne	.+2      	; 0x3f98 <_Z15setPwmFrequencyii+0xd2>
    3f96:	ac cf       	rjmp	.-168    	; 0x3ef0 <_Z15setPwmFrequencyii+0x2a>
    3f98:	68 30       	cpi	r22, 0x08	; 8
    3f9a:	71 05       	cpc	r23, r1
    3f9c:	09 f4       	brne	.+2      	; 0x3fa0 <_Z15setPwmFrequencyii+0xda>
    3f9e:	a3 cf       	rjmp	.-186    	; 0x3ee6 <_Z15setPwmFrequencyii+0x20>
    3fa0:	ef cf       	rjmp	.-34     	; 0x3f80 <_Z15setPwmFrequencyii+0xba>
    3fa2:	61 15       	cp	r22, r1
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	78 07       	cpc	r23, r24
    3fa8:	f1 f0       	breq	.+60     	; 0x3fe6 <_Z15setPwmFrequencyii+0x120>
    3faa:	61 15       	cp	r22, r1
    3fac:	74 40       	sbci	r23, 0x04	; 4
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <_Z15setPwmFrequencyii+0xec>
    3fb0:	98 cf       	rjmp	.-208    	; 0x3ee2 <_Z15setPwmFrequencyii+0x1c>
    3fb2:	e6 cf       	rjmp	.-52     	; 0x3f80 <_Z15setPwmFrequencyii+0xba>
    3fb4:	60 34       	cpi	r22, 0x40	; 64
    3fb6:	71 05       	cpc	r23, r1
    3fb8:	91 f0       	breq	.+36     	; 0x3fde <_Z15setPwmFrequencyii+0x118>
    3fba:	4c f4       	brge	.+18     	; 0x3fce <_Z15setPwmFrequencyii+0x108>
    3fbc:	61 30       	cpi	r22, 0x01	; 1
    3fbe:	71 05       	cpc	r23, r1
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <_Z15setPwmFrequencyii+0xfe>
    3fc2:	9f cf       	rjmp	.-194    	; 0x3f02 <_Z15setPwmFrequencyii+0x3c>
    3fc4:	68 30       	cpi	r22, 0x08	; 8
    3fc6:	71 05       	cpc	r23, r1
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <_Z15setPwmFrequencyii+0x106>
    3fca:	8d cf       	rjmp	.-230    	; 0x3ee6 <_Z15setPwmFrequencyii+0x20>
    3fcc:	db cf       	rjmp	.-74     	; 0x3f84 <_Z15setPwmFrequencyii+0xbe>
    3fce:	61 15       	cp	r22, r1
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	78 07       	cpc	r23, r24
    3fd4:	61 f0       	breq	.+24     	; 0x3fee <_Z15setPwmFrequencyii+0x128>
    3fd6:	61 15       	cp	r22, r1
    3fd8:	74 40       	sbci	r23, 0x04	; 4
    3fda:	39 f0       	breq	.+14     	; 0x3fea <_Z15setPwmFrequencyii+0x124>
    3fdc:	d3 cf       	rjmp	.-90     	; 0x3f84 <_Z15setPwmFrequencyii+0xbe>
    3fde:	93 e0       	ldi	r25, 0x03	; 3
    3fe0:	91 cf       	rjmp	.-222    	; 0x3f04 <_Z15setPwmFrequencyii+0x3e>
    3fe2:	83 e0       	ldi	r24, 0x03	; 3
    3fe4:	86 cf       	rjmp	.-244    	; 0x3ef2 <_Z15setPwmFrequencyii+0x2c>
    3fe6:	84 e0       	ldi	r24, 0x04	; 4
    3fe8:	84 cf       	rjmp	.-248    	; 0x3ef2 <_Z15setPwmFrequencyii+0x2c>
    3fea:	95 e0       	ldi	r25, 0x05	; 5
    3fec:	8b cf       	rjmp	.-234    	; 0x3f04 <_Z15setPwmFrequencyii+0x3e>
    3fee:	94 e0       	ldi	r25, 0x04	; 4
    3ff0:	89 cf       	rjmp	.-238    	; 0x3f04 <_Z15setPwmFrequencyii+0x3e>

00003ff2 <_GLOBAL__sub_I_lcd>:
    3ff2:	8f eb       	ldi	r24, 0xBF	; 191
    3ff4:	94 e0       	ldi	r25, 0x04	; 4
    3ff6:	0e 94 bb 11 	call	0x2376	; 0x2376 <_ZN16Adafruit_SSD1306C1Ev>
    3ffa:	08 95       	ret

00003ffc <_Z14readUntilTokenPchh>:
	lcd.display();
	Serial.println(F_STR("STREAMING_STOPPED"));
}

uint8_t readUntilToken(char* buffer, uint8_t token, uint8_t maxlen)
{
    3ffc:	af 92       	push	r10
    3ffe:	bf 92       	push	r11
    4000:	df 92       	push	r13
    4002:	ef 92       	push	r14
    4004:	ff 92       	push	r15
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	7c 01       	movw	r14, r24
    4010:	d6 2e       	mov	r13, r22
    4012:	d4 2f       	mov	r29, r20
	uint8_t char_count=0;
	
//	buffer[0]=0;	//since we don't know what data is present in that location we clear it. So that we don't have to use
					//any complicated tricks in the while condition.
	
	if (maxlen < 1)
    4014:	44 23       	and	r20, r20
    4016:	91 f0       	breq	.+36     	; 0x403c <_Z14readUntilTokenPchh+0x40>
    4018:	8c 01       	movw	r16, r24
    401a:	c0 e0       	ldi	r28, 0x00	; 0
		return 0;
	}
	
	//delay(1000);
	
	while(Serial.available()>0 && char_count < maxlen)
    401c:	88 ea       	ldi	r24, 0xA8	; 168
    401e:	93 e0       	ldi	r25, 0x03	; 3
    4020:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN14HardwareSerial9availableEv>
    4024:	18 16       	cp	r1, r24
    4026:	19 06       	cpc	r1, r25
    4028:	b4 f4       	brge	.+44     	; 0x4056 <_Z14readUntilTokenPchh+0x5a>
    402a:	cd 13       	cpse	r28, r29
    402c:	09 c0       	rjmp	.+18     	; 0x4040 <_Z14readUntilTokenPchh+0x44>
    402e:	14 c0       	rjmp	.+40     	; 0x4058 <_Z14readUntilTokenPchh+0x5c>
	{
		buffer[char_count]=Serial.read();
		
		if (buffer[char_count]==token)
		{
			buffer[char_count]='\0';		//terminate the string
    4030:	f5 01       	movw	r30, r10
    4032:	10 82       	st	Z, r1
			return char_count;				//return characters read, doesn't include NULL character.
    4034:	8c 2f       	mov	r24, r28
    4036:	15 c0       	rjmp	.+42     	; 0x4062 <_Z14readUntilTokenPchh+0x66>
		}
		
		char_count++;
    4038:	cf 5f       	subi	r28, 0xFF	; 255
		return 0;
	}
	
	//delay(1000);
	
	while(Serial.available()>0 && char_count < maxlen)
    403a:	f0 cf       	rjmp	.-32     	; 0x401c <_Z14readUntilTokenPchh+0x20>
//	buffer[0]=0;	//since we don't know what data is present in that location we clear it. So that we don't have to use
					//any complicated tricks in the while condition.
	
	if (maxlen < 1)
	{
		return 0;
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	11 c0       	rjmp	.+34     	; 0x4062 <_Z14readUntilTokenPchh+0x66>
	
	//delay(1000);
	
	while(Serial.available()>0 && char_count < maxlen)
	{
		buffer[char_count]=Serial.read();
    4040:	58 01       	movw	r10, r16
    4042:	88 ea       	ldi	r24, 0xA8	; 168
    4044:	93 e0       	ldi	r25, 0x03	; 3
    4046:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN14HardwareSerial4readEv>
    404a:	f8 01       	movw	r30, r16
    404c:	81 93       	st	Z+, r24
    404e:	8f 01       	movw	r16, r30
		
		if (buffer[char_count]==token)
    4050:	8d 11       	cpse	r24, r13
    4052:	f2 cf       	rjmp	.-28     	; 0x4038 <_Z14readUntilTokenPchh+0x3c>
    4054:	ed cf       	rjmp	.-38     	; 0x4030 <_Z14readUntilTokenPchh+0x34>
    4056:	dc 2f       	mov	r29, r28
		}
		
		char_count++;
	}
	
	buffer[char_count]='\0';
    4058:	f7 01       	movw	r30, r14
    405a:	ed 0f       	add	r30, r29
    405c:	f1 1d       	adc	r31, r1
    405e:	10 82       	st	Z, r1
	
	return 0;		//returning zero tells that token was not found however we have read whatever characters we could get 
    4060:	80 e0       	ldi	r24, 0x00	; 0
					//from buffer, i.e. emptied the buffer or we just ran out of maxlength specified.
}
    4062:	df 91       	pop	r29
    4064:	cf 91       	pop	r28
    4066:	1f 91       	pop	r17
    4068:	0f 91       	pop	r16
    406a:	ff 90       	pop	r15
    406c:	ef 90       	pop	r14
    406e:	df 90       	pop	r13
    4070:	bf 90       	pop	r11
    4072:	af 90       	pop	r10
    4074:	08 95       	ret

00004076 <_Z13readSerialCmdv>:
	}
	
}

void readSerialCmd()
{
    4076:	cf 92       	push	r12
    4078:	df 92       	push	r13
    407a:	ef 92       	push	r14
    407c:	ff 92       	push	r15
    407e:	0f 93       	push	r16
    4080:	1f 93       	push	r17
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	2a 97       	sbiw	r28, 0x0a	; 10
    408c:	0f b6       	in	r0, 0x3f	; 63
    408e:	f8 94       	cli
    4090:	de bf       	out	0x3e, r29	; 62
    4092:	0f be       	out	0x3f, r0	; 63
    4094:	cd bf       	out	0x3d, r28	; 61
			Don't Provide both CR and LF after cmds provide only CR. LF is not honoured and is taken up as a character thus, if anywhere
			whole word match is required that condition will fail.
		*/

#ifdef SERIAL_CR_DETECT
	if(Serial.crStatusDetected())	//experimental feature.
    4096:	88 ea       	ldi	r24, 0xA8	; 168
    4098:	93 e0       	ldi	r25, 0x03	; 3
    409a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <_ZN14HardwareSerial16crStatusDetectedEv>
    409e:	88 23       	and	r24, r24
    40a0:	11 f4       	brne	.+4      	; 0x40a6 <_Z13readSerialCmdv+0x30>
    40a2:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <_Z13readSerialCmdv+0x1044>
#endif
		if(Serial.available())
    40a6:	88 ea       	ldi	r24, 0xA8	; 168
    40a8:	93 e0       	ldi	r25, 0x03	; 3
    40aa:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN14HardwareSerial9availableEv>
    40ae:	89 2b       	or	r24, r25
    40b0:	11 f4       	brne	.+4      	; 0x40b6 <_Z13readSerialCmdv+0x40>
    40b2:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <_Z13readSerialCmdv+0x1044>
			#ifdef PRINT_DEBUG_MSG
				Serial.println(F_STR("data available"));
			#endif
			
				
				uartBufCharCount = readUntilToken(btCmdReplyBuffer,token_char,CMD_REPLY_BUFFER_LENGTH);	
    40b6:	40 e4       	ldi	r20, 0x40	; 64
    40b8:	6d e0       	ldi	r22, 0x0D	; 13
    40ba:	8f e7       	ldi	r24, 0x7F	; 127
    40bc:	94 e0       	ldi	r25, 0x04	; 4
    40be:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <_Z14readUntilTokenPchh>
    40c2:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <uartBufCharCount>
				
				if (case_sensitivity_status)
    40c6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <case_sensitivity_status>
    40ca:	88 23       	and	r24, r24
    40cc:	21 f0       	breq	.+8      	; 0x40d6 <_Z13readSerialCmdv+0x60>
				{
					strlwr(btCmdReplyBuffer); //convert string to lower case
    40ce:	8f e7       	ldi	r24, 0x7F	; 127
    40d0:	94 e0       	ldi	r25, 0x04	; 4
    40d2:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <strlwr>
				#ifdef PRINT_DEBUG_MSG
					Serial.print("Char Count ");
					Serial.println(uartBufCharCount);
				#endif
				
				if(uartBufCharCount == 0)
    40d6:	10 91 7e 04 	lds	r17, 0x047E	; 0x80047e <uartBufCharCount>
    40da:	11 23       	and	r17, r17
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <_Z13readSerialCmdv+0x6a>
    40de:	ed c7       	rjmp	.+4058   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				//serial debug messages here
			#endif // PRINT_DEBUG_MSG			
			
			
			if (strncmp_P(btCmdReplyBuffer,cmd4,3)==0)
    40e0:	43 e0       	ldi	r20, 0x03	; 3
    40e2:	50 e0       	ldi	r21, 0x00	; 0
    40e4:	6c e0       	ldi	r22, 0x0C	; 12
    40e6:	75 e1       	ldi	r23, 0x15	; 21
    40e8:	8f e7       	ldi	r24, 0x7F	; 127
    40ea:	94 e0       	ldi	r25, 0x04	; 4
    40ec:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    40f0:	89 2b       	or	r24, r25
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <_Z13readSerialCmdv+0x80>
    40f4:	97 c0       	rjmp	.+302    	; 0x4224 <_Z13readSerialCmdv+0x1ae>
			{
				
				if(btCmdReplyBuffer[4] < 0x30 || btCmdReplyBuffer[4] > 0x39)
    40f6:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <btCmdReplyBuffer+0x4>
    40fa:	80 53       	subi	r24, 0x30	; 48
    40fc:	8a 30       	cpi	r24, 0x0A	; 10
    40fe:	38 f0       	brcs	.+14     	; 0x410e <_Z13readSerialCmdv+0x98>
				{
					Serial.println(F_STR("ERROR_1"));
    4100:	67 e1       	ldi	r22, 0x17	; 23
    4102:	74 e1       	ldi	r23, 0x14	; 20
    4104:	88 ea       	ldi	r24, 0xA8	; 168
    4106:	93 e0       	ldi	r25, 0x03	; 3
    4108:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    410c:	d6 c7       	rjmp	.+4012   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				//strncpy(numeric,pos+4,2);seth
				strncpy(numeric,btCmdReplyBuffer+4,7);		//Now we should be able to check even if someone types seth002 instead of seth2
    410e:	47 e0       	ldi	r20, 0x07	; 7
    4110:	50 e0       	ldi	r21, 0x00	; 0
    4112:	63 e8       	ldi	r22, 0x83	; 131
    4114:	74 e0       	ldi	r23, 0x04	; 4
    4116:	ce 01       	movw	r24, r28
    4118:	01 96       	adiw	r24, 0x01	; 1
    411a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				//numeric[2]='\0';
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    411e:	ce 01       	movw	r24, r28
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4126:	18 2f       	mov	r17, r24
				if(num > A5)
    4128:	84 31       	cpi	r24, 0x14	; 20
    412a:	38 f0       	brcs	.+14     	; 0x413a <_Z13readSerialCmdv+0xc4>
				{
					Serial.println(F_STR("ERROR_2"));
    412c:	6f e0       	ldi	r22, 0x0F	; 15
    412e:	74 e1       	ldi	r23, 0x14	; 20
    4130:	88 ea       	ldi	r24, 0xA8	; 168
    4132:	93 e0       	ldi	r25, 0x03	; 3
    4134:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4138:	c0 c7       	rjmp	.+3968   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				GPIO io(num);		//instantiate GPIO object.
    413a:	68 2f       	mov	r22, r24
    413c:	ce 01       	movw	r24, r28
    413e:	08 96       	adiw	r24, 0x08	; 8
    4140:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
				
				lcd.clearDisplay();
    4144:	8f eb       	ldi	r24, 0xBF	; 191
    4146:	94 e0       	ldi	r25, 0x04	; 4
    4148:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	50 e0       	ldi	r21, 0x00	; 0
    4150:	60 e0       	ldi	r22, 0x00	; 0
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	8f eb       	ldi	r24, 0xBF	; 191
    4156:	94 e0       	ldi	r25, 0x04	; 4
    4158:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    415c:	62 e0       	ldi	r22, 0x02	; 2
    415e:	8f eb       	ldi	r24, 0xBF	; 191
    4160:	94 e0       	ldi	r25, 0x04	; 4
    4162:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("GPIO "));
    4166:	69 e0       	ldi	r22, 0x09	; 9
    4168:	74 e1       	ldi	r23, 0x14	; 20
    416a:	8f eb       	ldi	r24, 0xBF	; 191
    416c:	94 e0       	ldi	r25, 0x04	; 4
    416e:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    4172:	4a e0       	ldi	r20, 0x0A	; 10
    4174:	50 e0       	ldi	r21, 0x00	; 0
    4176:	61 2f       	mov	r22, r17
    4178:	8f eb       	ldi	r24, 0xBF	; 191
    417a:	94 e0       	ldi	r25, 0x04	; 4
    417c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				lcd.print(F_STR("SET "));
    4180:	64 e0       	ldi	r22, 0x04	; 4
    4182:	74 e1       	ldi	r23, 0x14	; 20
    4184:	8f eb       	ldi	r24, 0xBF	; 191
    4186:	94 e0       	ldi	r25, 0x04	; 4
    4188:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>

				
				switch(btCmdReplyBuffer[3])
    418c:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <btCmdReplyBuffer+0x3>
    4190:	89 36       	cpi	r24, 0x69	; 105
    4192:	51 f1       	breq	.+84     	; 0x41e8 <_Z13readSerialCmdv+0x172>
    4194:	18 f4       	brcc	.+6      	; 0x419c <_Z13readSerialCmdv+0x126>
    4196:	88 36       	cpi	r24, 0x68	; 104
    4198:	31 f0       	breq	.+12     	; 0x41a6 <_Z13readSerialCmdv+0x130>
    419a:	31 c0       	rjmp	.+98     	; 0x41fe <_Z13readSerialCmdv+0x188>
    419c:	8c 36       	cpi	r24, 0x6C	; 108
    419e:	71 f0       	breq	.+28     	; 0x41bc <_Z13readSerialCmdv+0x146>
    41a0:	80 37       	cpi	r24, 0x70	; 112
    41a2:	b9 f0       	breq	.+46     	; 0x41d2 <_Z13readSerialCmdv+0x15c>
    41a4:	2c c0       	rjmp	.+88     	; 0x41fe <_Z13readSerialCmdv+0x188>
				{
					
					case 'h':
					io.High();
    41a6:	ce 01       	movw	r24, r28
    41a8:	08 96       	adiw	r24, 0x08	; 8
    41aa:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN4GPIO4HighEv>
					lcd.print(F_STR("HIGH"));
    41ae:	6f ef       	ldi	r22, 0xFF	; 255
    41b0:	73 e1       	ldi	r23, 0x13	; 19
    41b2:	8f eb       	ldi	r24, 0xBF	; 191
    41b4:	94 e0       	ldi	r25, 0x04	; 4
    41b6:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    41ba:	2d c0       	rjmp	.+90     	; 0x4216 <_Z13readSerialCmdv+0x1a0>
					
					case 'l':
					io.Low();
    41bc:	ce 01       	movw	r24, r28
    41be:	08 96       	adiw	r24, 0x08	; 8
    41c0:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN4GPIO3LowEv>
					lcd.print(F_STR("LOW"));
    41c4:	6b ef       	ldi	r22, 0xFB	; 251
    41c6:	73 e1       	ldi	r23, 0x13	; 19
    41c8:	8f eb       	ldi	r24, 0xBF	; 191
    41ca:	94 e0       	ldi	r25, 0x04	; 4
    41cc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    41d0:	22 c0       	rjmp	.+68     	; 0x4216 <_Z13readSerialCmdv+0x1a0>
					
					case 'p':
					io.setInputPullUp();
    41d2:	ce 01       	movw	r24, r28
    41d4:	08 96       	adiw	r24, 0x08	; 8
    41d6:	0e 94 81 13 	call	0x2702	; 0x2702 <_ZN4GPIO14setInputPullUpEv>
					lcd.print(F_STR("P_UP"));
    41da:	66 ef       	ldi	r22, 0xF6	; 246
    41dc:	73 e1       	ldi	r23, 0x13	; 19
    41de:	8f eb       	ldi	r24, 0xBF	; 191
    41e0:	94 e0       	ldi	r25, 0x04	; 4
    41e2:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    41e6:	17 c0       	rjmp	.+46     	; 0x4216 <_Z13readSerialCmdv+0x1a0>
					
					case 'i':
					io.setInputPullDown();
    41e8:	ce 01       	movw	r24, r28
    41ea:	08 96       	adiw	r24, 0x08	; 8
    41ec:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN4GPIO16setInputPullDownEv>
					lcd.print(F_STR("INPUT"));
    41f0:	60 ef       	ldi	r22, 0xF0	; 240
    41f2:	73 e1       	ldi	r23, 0x13	; 19
    41f4:	8f eb       	ldi	r24, 0xBF	; 191
    41f6:	94 e0       	ldi	r25, 0x04	; 4
    41f8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    41fc:	0c c0       	rjmp	.+24     	; 0x4216 <_Z13readSerialCmdv+0x1a0>
					
					default:
					lcd.print(F_STR("CMD_ER"));
    41fe:	69 ee       	ldi	r22, 0xE9	; 233
    4200:	73 e1       	ldi	r23, 0x13	; 19
    4202:	8f eb       	ldi	r24, 0xBF	; 191
    4204:	94 e0       	ldi	r25, 0x04	; 4
    4206:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					Serial.println(F_STR("ERROR3"));
    420a:	62 ee       	ldi	r22, 0xE2	; 226
    420c:	73 e1       	ldi	r23, 0x13	; 19
    420e:	88 ea       	ldi	r24, 0xA8	; 168
    4210:	93 e0       	ldi	r25, 0x03	; 3
    4212:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					break;
				}
				
				lcd.display();
    4216:	8f eb       	ldi	r24, 0xBF	; 191
    4218:	94 e0       	ldi	r25, 0x04	; 4
    421a:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				
				replyOK();
    421e:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4222:	4b c7       	rjmp	.+3734   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if (strncmp_P(btCmdReplyBuffer,cmd11,3)==0)
    4224:	43 e0       	ldi	r20, 0x03	; 3
    4226:	50 e0       	ldi	r21, 0x00	; 0
    4228:	63 ef       	ldi	r22, 0xF3	; 243
    422a:	74 e1       	ldi	r23, 0x14	; 20
    422c:	8f e7       	ldi	r24, 0x7F	; 127
    422e:	94 e0       	ldi	r25, 0x04	; 4
    4230:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4234:	89 2b       	or	r24, r25
    4236:	09 f0       	breq	.+2      	; 0x423a <_Z13readSerialCmdv+0x1c4>
    4238:	6a c0       	rjmp	.+212    	; 0x430e <_Z13readSerialCmdv+0x298>
			{
				if(btCmdReplyBuffer[3] < 0x30 || btCmdReplyBuffer[3] > 0x39)
    423a:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <btCmdReplyBuffer+0x3>
    423e:	80 53       	subi	r24, 0x30	; 48
    4240:	8a 30       	cpi	r24, 0x0A	; 10
    4242:	38 f0       	brcs	.+14     	; 0x4252 <_Z13readSerialCmdv+0x1dc>
				{
					Serial.println(F_STR("ERROR_1"));
    4244:	6a ed       	ldi	r22, 0xDA	; 218
    4246:	73 e1       	ldi	r23, 0x13	; 19
    4248:	88 ea       	ldi	r24, 0xA8	; 168
    424a:	93 e0       	ldi	r25, 0x03	; 3
    424c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4250:	34 c7       	rjmp	.+3688   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				strncpy(numeric,btCmdReplyBuffer+3,7);		//Now we should be able to check even if someone types tog002 instead of tog2
    4252:	47 e0       	ldi	r20, 0x07	; 7
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	62 e8       	ldi	r22, 0x82	; 130
    4258:	74 e0       	ldi	r23, 0x04	; 4
    425a:	ce 01       	movw	r24, r28
    425c:	01 96       	adiw	r24, 0x01	; 1
    425e:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    4262:	ce 01       	movw	r24, r28
    4264:	01 96       	adiw	r24, 0x01	; 1
    4266:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    426a:	18 2f       	mov	r17, r24
				if(num > A5)
    426c:	84 31       	cpi	r24, 0x14	; 20
    426e:	38 f0       	brcs	.+14     	; 0x427e <_Z13readSerialCmdv+0x208>
				{
					Serial.println(F_STR("ERROR_2"));
    4270:	62 ed       	ldi	r22, 0xD2	; 210
    4272:	73 e1       	ldi	r23, 0x13	; 19
    4274:	88 ea       	ldi	r24, 0xA8	; 168
    4276:	93 e0       	ldi	r25, 0x03	; 3
    4278:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    427c:	1e c7       	rjmp	.+3644   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				GPIO io(num);		//instantiate GPIO object.
    427e:	68 2f       	mov	r22, r24
    4280:	ce 01       	movw	r24, r28
    4282:	08 96       	adiw	r24, 0x08	; 8
    4284:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
				
				io.toggle();		//toggle the pin.
    4288:	ce 01       	movw	r24, r28
    428a:	08 96       	adiw	r24, 0x08	; 8
    428c:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN4GPIO6toggleEv>
				
				lcd.clearDisplay();
    4290:	8f eb       	ldi	r24, 0xBF	; 191
    4292:	94 e0       	ldi	r25, 0x04	; 4
    4294:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    4298:	40 e0       	ldi	r20, 0x00	; 0
    429a:	50 e0       	ldi	r21, 0x00	; 0
    429c:	60 e0       	ldi	r22, 0x00	; 0
    429e:	70 e0       	ldi	r23, 0x00	; 0
    42a0:	8f eb       	ldi	r24, 0xBF	; 191
    42a2:	94 e0       	ldi	r25, 0x04	; 4
    42a4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    42a8:	62 e0       	ldi	r22, 0x02	; 2
    42aa:	8f eb       	ldi	r24, 0xBF	; 191
    42ac:	94 e0       	ldi	r25, 0x04	; 4
    42ae:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("GPIO "));
    42b2:	6c ec       	ldi	r22, 0xCC	; 204
    42b4:	73 e1       	ldi	r23, 0x13	; 19
    42b6:	8f eb       	ldi	r24, 0xBF	; 191
    42b8:	94 e0       	ldi	r25, 0x04	; 4
    42ba:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    42be:	4a e0       	ldi	r20, 0x0A	; 10
    42c0:	50 e0       	ldi	r21, 0x00	; 0
    42c2:	61 2f       	mov	r22, r17
    42c4:	8f eb       	ldi	r24, 0xBF	; 191
    42c6:	94 e0       	ldi	r25, 0x04	; 4
    42c8:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				lcd.print(F_STR("TOGGLED "));
    42cc:	63 ec       	ldi	r22, 0xC3	; 195
    42ce:	73 e1       	ldi	r23, 0x13	; 19
    42d0:	8f eb       	ldi	r24, 0xBF	; 191
    42d2:	94 e0       	ldi	r25, 0x04	; 4
    42d4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.print(digitalRead(num));
    42d8:	81 2f       	mov	r24, r17
    42da:	0e 94 cf 2a 	call	0x559e	; 0x559e <digitalRead>
    42de:	4a e0       	ldi	r20, 0x0A	; 10
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	bc 01       	movw	r22, r24
    42e4:	8f eb       	ldi	r24, 0xBF	; 191
    42e6:	94 e0       	ldi	r25, 0x04	; 4
    42e8:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <_ZN5Print5printEii>
				lcd.display();
    42ec:	8f eb       	ldi	r24, 0xBF	; 191
    42ee:	94 e0       	ldi	r25, 0x04	; 4
    42f0:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				
				Serial.println(digitalRead(num));
    42f4:	81 2f       	mov	r24, r17
    42f6:	0e 94 cf 2a 	call	0x559e	; 0x559e <digitalRead>
    42fa:	4a e0       	ldi	r20, 0x0A	; 10
    42fc:	50 e0       	ldi	r21, 0x00	; 0
    42fe:	bc 01       	movw	r22, r24
    4300:	88 ea       	ldi	r24, 0xA8	; 168
    4302:	93 e0       	ldi	r25, 0x03	; 3
    4304:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <_ZN5Print7printlnEii>
				
				replyOK();
    4308:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    430c:	d6 c6       	rjmp	.+3500   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if (strncmp_P(btCmdReplyBuffer,cmd5,3)==0)
    430e:	43 e0       	ldi	r20, 0x03	; 3
    4310:	50 e0       	ldi	r21, 0x00	; 0
    4312:	68 e0       	ldi	r22, 0x08	; 8
    4314:	75 e1       	ldi	r23, 0x15	; 21
    4316:	8f e7       	ldi	r24, 0x7F	; 127
    4318:	94 e0       	ldi	r25, 0x04	; 4
    431a:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    431e:	89 2b       	or	r24, r25
    4320:	09 f0       	breq	.+2      	; 0x4324 <_Z13readSerialCmdv+0x2ae>
    4322:	6f c0       	rjmp	.+222    	; 0x4402 <_Z13readSerialCmdv+0x38c>
			{
				
				
				if(btCmdReplyBuffer[3] < 0x30 || btCmdReplyBuffer[3] > 0x39)
    4324:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <btCmdReplyBuffer+0x3>
    4328:	80 53       	subi	r24, 0x30	; 48
    432a:	8a 30       	cpi	r24, 0x0A	; 10
    432c:	38 f0       	brcs	.+14     	; 0x433c <_Z13readSerialCmdv+0x2c6>
				{
					Serial.println(F_STR("ERROR_1"));
    432e:	6b eb       	ldi	r22, 0xBB	; 187
    4330:	73 e1       	ldi	r23, 0x13	; 19
    4332:	88 ea       	ldi	r24, 0xA8	; 168
    4334:	93 e0       	ldi	r25, 0x03	; 3
    4336:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    433a:	bf c6       	rjmp	.+3454   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				strncpy(numeric,btCmdReplyBuffer+3,7);		//Now we should be able to check even if someone types get002 instead of get2
    433c:	47 e0       	ldi	r20, 0x07	; 7
    433e:	50 e0       	ldi	r21, 0x00	; 0
    4340:	62 e8       	ldi	r22, 0x82	; 130
    4342:	74 e0       	ldi	r23, 0x04	; 4
    4344:	ce 01       	movw	r24, r28
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    434c:	ce 01       	movw	r24, r28
    434e:	01 96       	adiw	r24, 0x01	; 1
    4350:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4354:	18 2f       	mov	r17, r24
				if(num > A5)
    4356:	84 31       	cpi	r24, 0x14	; 20
    4358:	38 f0       	brcs	.+14     	; 0x4368 <_Z13readSerialCmdv+0x2f2>
				{
					Serial.println(F_STR("ERROR_2"));
    435a:	63 eb       	ldi	r22, 0xB3	; 179
    435c:	73 e1       	ldi	r23, 0x13	; 19
    435e:	88 ea       	ldi	r24, 0xA8	; 168
    4360:	93 e0       	ldi	r25, 0x03	; 3
    4362:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4366:	a9 c6       	rjmp	.+3410   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				GPIO io(num);		//instantiate GPIO object.
    4368:	68 2f       	mov	r22, r24
    436a:	ce 01       	movw	r24, r28
    436c:	08 96       	adiw	r24, 0x08	; 8
    436e:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
				
				
				lcd.clearDisplay();
    4372:	8f eb       	ldi	r24, 0xBF	; 191
    4374:	94 e0       	ldi	r25, 0x04	; 4
    4376:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    437a:	40 e0       	ldi	r20, 0x00	; 0
    437c:	50 e0       	ldi	r21, 0x00	; 0
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	8f eb       	ldi	r24, 0xBF	; 191
    4384:	94 e0       	ldi	r25, 0x04	; 4
    4386:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	8f eb       	ldi	r24, 0xBF	; 191
    438e:	94 e0       	ldi	r25, 0x04	; 4
    4390:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("GPIO "));
    4394:	6d ea       	ldi	r22, 0xAD	; 173
    4396:	73 e1       	ldi	r23, 0x13	; 19
    4398:	8f eb       	ldi	r24, 0xBF	; 191
    439a:	94 e0       	ldi	r25, 0x04	; 4
    439c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    43a0:	4a e0       	ldi	r20, 0x0A	; 10
    43a2:	50 e0       	ldi	r21, 0x00	; 0
    43a4:	61 2f       	mov	r22, r17
    43a6:	8f eb       	ldi	r24, 0xBF	; 191
    43a8:	94 e0       	ldi	r25, 0x04	; 4
    43aa:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				lcd.print(F_STR("STATE "));
    43ae:	66 ea       	ldi	r22, 0xA6	; 166
    43b0:	73 e1       	ldi	r23, 0x13	; 19
    43b2:	8f eb       	ldi	r24, 0xBF	; 191
    43b4:	94 e0       	ldi	r25, 0x04	; 4
    43b6:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				
				if(io.getState())
    43ba:	ce 01       	movw	r24, r28
    43bc:	08 96       	adiw	r24, 0x08	; 8
    43be:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN4GPIO8getStateEv>
    43c2:	88 23       	and	r24, r24
    43c4:	61 f0       	breq	.+24     	; 0x43de <_Z13readSerialCmdv+0x368>
				{
					lcd.print(F_STR("HIGH"));
    43c6:	61 ea       	ldi	r22, 0xA1	; 161
    43c8:	73 e1       	ldi	r23, 0x13	; 19
    43ca:	8f eb       	ldi	r24, 0xBF	; 191
    43cc:	94 e0       	ldi	r25, 0x04	; 4
    43ce:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					Serial.println('1');
    43d2:	61 e3       	ldi	r22, 0x31	; 49
    43d4:	88 ea       	ldi	r24, 0xA8	; 168
    43d6:	93 e0       	ldi	r25, 0x03	; 3
    43d8:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN5Print7printlnEc>
    43dc:	0b c0       	rjmp	.+22     	; 0x43f4 <_Z13readSerialCmdv+0x37e>
				}
				
				else
				{
					lcd.print(F_STR("LOW"));
    43de:	6d e9       	ldi	r22, 0x9D	; 157
    43e0:	73 e1       	ldi	r23, 0x13	; 19
    43e2:	8f eb       	ldi	r24, 0xBF	; 191
    43e4:	94 e0       	ldi	r25, 0x04	; 4
    43e6:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					Serial.println('0');
    43ea:	60 e3       	ldi	r22, 0x30	; 48
    43ec:	88 ea       	ldi	r24, 0xA8	; 168
    43ee:	93 e0       	ldi	r25, 0x03	; 3
    43f0:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN5Print7printlnEc>
				}
				
				lcd.display();
    43f4:	8f eb       	ldi	r24, 0xBF	; 191
    43f6:	94 e0       	ldi	r25, 0x04	; 4
    43f8:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				
				replyOK();
    43fc:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4400:	5c c6       	rjmp	.+3256   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd9,4)==0)
    4402:	44 e0       	ldi	r20, 0x04	; 4
    4404:	50 e0       	ldi	r21, 0x00	; 0
    4406:	6e ef       	ldi	r22, 0xFE	; 254
    4408:	74 e1       	ldi	r23, 0x14	; 20
    440a:	8f e7       	ldi	r24, 0x7F	; 127
    440c:	94 e0       	ldi	r25, 0x04	; 4
    440e:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4412:	89 2b       	or	r24, r25
    4414:	09 f0       	breq	.+2      	; 0x4418 <_Z13readSerialCmdv+0x3a2>
    4416:	5a c0       	rjmp	.+180    	; 0x44cc <_Z13readSerialCmdv+0x456>
			{
				
				if(btCmdReplyBuffer[4] < 0x30 || btCmdReplyBuffer[4] > 0x39)
    4418:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <btCmdReplyBuffer+0x4>
    441c:	80 53       	subi	r24, 0x30	; 48
    441e:	8a 30       	cpi	r24, 0x0A	; 10
    4420:	38 f0       	brcs	.+14     	; 0x4430 <_Z13readSerialCmdv+0x3ba>
				{
					Serial.println(F_STR("ERROR_1"));
    4422:	65 e9       	ldi	r22, 0x95	; 149
    4424:	73 e1       	ldi	r23, 0x13	; 19
    4426:	88 ea       	ldi	r24, 0xA8	; 168
    4428:	93 e0       	ldi	r25, 0x03	; 3
    442a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    442e:	45 c6       	rjmp	.+3210   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				strncpy(numeric,btCmdReplyBuffer+4,7);		//Now we should be able to check even if someone types aget002 instead of aget2
    4430:	47 e0       	ldi	r20, 0x07	; 7
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	63 e8       	ldi	r22, 0x83	; 131
    4436:	74 e0       	ldi	r23, 0x04	; 4
    4438:	ce 01       	movw	r24, r28
    443a:	01 96       	adiw	r24, 0x01	; 1
    443c:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    4440:	ce 01       	movw	r24, r28
    4442:	01 96       	adiw	r24, 0x01	; 1
    4444:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4448:	18 2f       	mov	r17, r24
				if(num > 7)			//we will use 0 for A0 and 7 for A7
    444a:	88 30       	cpi	r24, 0x08	; 8
    444c:	38 f0       	brcs	.+14     	; 0x445c <_Z13readSerialCmdv+0x3e6>
				{
					Serial.println(F_STR("ERROR_2"));
    444e:	6d e8       	ldi	r22, 0x8D	; 141
    4450:	73 e1       	ldi	r23, 0x13	; 19
    4452:	88 ea       	ldi	r24, 0xA8	; 168
    4454:	93 e0       	ldi	r25, 0x03	; 3
    4456:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    445a:	2f c6       	rjmp	.+3166   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				lcd.clearDisplay();
    445c:	8f eb       	ldi	r24, 0xBF	; 191
    445e:	94 e0       	ldi	r25, 0x04	; 4
    4460:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    4464:	40 e0       	ldi	r20, 0x00	; 0
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	60 e0       	ldi	r22, 0x00	; 0
    446a:	70 e0       	ldi	r23, 0x00	; 0
    446c:	8f eb       	ldi	r24, 0xBF	; 191
    446e:	94 e0       	ldi	r25, 0x04	; 4
    4470:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    4474:	62 e0       	ldi	r22, 0x02	; 2
    4476:	8f eb       	ldi	r24, 0xBF	; 191
    4478:	94 e0       	ldi	r25, 0x04	; 4
    447a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("ANALOG "));
    447e:	65 e8       	ldi	r22, 0x85	; 133
    4480:	73 e1       	ldi	r23, 0x13	; 19
    4482:	8f eb       	ldi	r24, 0xBF	; 191
    4484:	94 e0       	ldi	r25, 0x04	; 4
    4486:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    448a:	4a e0       	ldi	r20, 0x0A	; 10
    448c:	50 e0       	ldi	r21, 0x00	; 0
    448e:	61 2f       	mov	r22, r17
    4490:	8f eb       	ldi	r24, 0xBF	; 191
    4492:	94 e0       	ldi	r25, 0x04	; 4
    4494:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				
				uint16_t val = analogRead(A0+num);
    4498:	8e e0       	ldi	r24, 0x0E	; 14
    449a:	81 0f       	add	r24, r17
    449c:	0e 94 ba 29 	call	0x5374	; 0x5374 <analogRead>
    44a0:	7c 01       	movw	r14, r24
				
				lcd.print(val);
    44a2:	4a e0       	ldi	r20, 0x0A	; 10
    44a4:	50 e0       	ldi	r21, 0x00	; 0
    44a6:	bc 01       	movw	r22, r24
    44a8:	8f eb       	ldi	r24, 0xBF	; 191
    44aa:	94 e0       	ldi	r25, 0x04	; 4
    44ac:	0e 94 4b 2c 	call	0x5896	; 0x5896 <_ZN5Print5printEji>
				Serial.println(val);
    44b0:	4a e0       	ldi	r20, 0x0A	; 10
    44b2:	50 e0       	ldi	r21, 0x00	; 0
    44b4:	b7 01       	movw	r22, r14
    44b6:	88 ea       	ldi	r24, 0xA8	; 168
    44b8:	93 e0       	ldi	r25, 0x03	; 3
    44ba:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <_ZN5Print7printlnEji>
				
				lcd.display();
    44be:	8f eb       	ldi	r24, 0xBF	; 191
    44c0:	94 e0       	ldi	r25, 0x04	; 4
    44c2:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				
				replyOK();
    44c6:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    44ca:	f7 c5       	rjmp	.+3054   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			//pwm control
			else if(strncmp_P(btCmdReplyBuffer,cmd37,4)==0)
    44cc:	44 e0       	ldi	r20, 0x04	; 4
    44ce:	50 e0       	ldi	r21, 0x00	; 0
    44d0:	6b e4       	ldi	r22, 0x4B	; 75
    44d2:	74 e1       	ldi	r23, 0x14	; 20
    44d4:	8f e7       	ldi	r24, 0x7F	; 127
    44d6:	94 e0       	ldi	r25, 0x04	; 4
    44d8:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    44dc:	89 2b       	or	r24, r25
    44de:	09 f0       	breq	.+2      	; 0x44e2 <_Z13readSerialCmdv+0x46c>
    44e0:	64 c0       	rjmp	.+200    	; 0x45aa <_Z13readSerialCmdv+0x534>
			{
				if(btCmdReplyBuffer[4] < 0x30 || btCmdReplyBuffer[4] > 0x39)
    44e2:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <btCmdReplyBuffer+0x4>
    44e6:	80 53       	subi	r24, 0x30	; 48
    44e8:	8a 30       	cpi	r24, 0x0A	; 10
    44ea:	38 f0       	brcs	.+14     	; 0x44fa <_Z13readSerialCmdv+0x484>
				{
					Serial.println(F_STR("ERROR_1"));
    44ec:	6d e7       	ldi	r22, 0x7D	; 125
    44ee:	73 e1       	ldi	r23, 0x13	; 19
    44f0:	88 ea       	ldi	r24, 0xA8	; 168
    44f2:	93 e0       	ldi	r25, 0x03	; 3
    44f4:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    44f8:	e0 c5       	rjmp	.+3008   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				strncpy(numeric,btCmdReplyBuffer+4,2);		
    44fa:	42 e0       	ldi	r20, 0x02	; 2
    44fc:	50 e0       	ldi	r21, 0x00	; 0
    44fe:	63 e8       	ldi	r22, 0x83	; 131
    4500:	74 e0       	ldi	r23, 0x04	; 4
    4502:	ce 01       	movw	r24, r28
    4504:	01 96       	adiw	r24, 0x01	; 1
    4506:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    450a:	ce 01       	movw	r24, r28
    450c:	01 96       	adiw	r24, 0x01	; 1
    450e:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4512:	f8 2e       	mov	r15, r24
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				if(!isPwmPin(num))			
    4514:	0e 94 35 1a 	call	0x346a	; 0x346a <_Z8isPwmPinh>
    4518:	81 11       	cpse	r24, r1
    451a:	07 c0       	rjmp	.+14     	; 0x452a <_Z13readSerialCmdv+0x4b4>
				{
					Serial.println(F_STR("ERROR_2"));
    451c:	65 e7       	ldi	r22, 0x75	; 117
    451e:	73 e1       	ldi	r23, 0x13	; 19
    4520:	88 ea       	ldi	r24, 0xA8	; 168
    4522:	93 e0       	ldi	r25, 0x03	; 3
    4524:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4528:	c8 c5       	rjmp	.+2960   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				
				uint8_t pwmVal = 0;
				strncpy(numeric,btCmdReplyBuffer+4+2,uartBufCharCount-(4+2));
    452a:	41 2f       	mov	r20, r17
    452c:	50 e0       	ldi	r21, 0x00	; 0
    452e:	46 50       	subi	r20, 0x06	; 6
    4530:	51 09       	sbc	r21, r1
    4532:	65 e8       	ldi	r22, 0x85	; 133
    4534:	74 e0       	ldi	r23, 0x04	; 4
    4536:	ce 01       	movw	r24, r28
    4538:	01 96       	adiw	r24, 0x01	; 1
    453a:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				pwmVal=atoi(numeric);
    453e:	ce 01       	movw	r24, r28
    4540:	01 96       	adiw	r24, 0x01	; 1
    4542:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4546:	6c 01       	movw	r12, r24
				{
					Serial.println(F_STR("ERROR_3"));
					return;
				}
				
				analogWrite(num,pwmVal);
    4548:	bc 01       	movw	r22, r24
    454a:	77 27       	eor	r23, r23
    454c:	8f 2d       	mov	r24, r15
    454e:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <analogWrite>
								
				lcd.clearDisplay();
    4552:	8f eb       	ldi	r24, 0xBF	; 191
    4554:	94 e0       	ldi	r25, 0x04	; 4
    4556:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    455a:	40 e0       	ldi	r20, 0x00	; 0
    455c:	50 e0       	ldi	r21, 0x00	; 0
    455e:	60 e0       	ldi	r22, 0x00	; 0
    4560:	70 e0       	ldi	r23, 0x00	; 0
    4562:	8f eb       	ldi	r24, 0xBF	; 191
    4564:	94 e0       	ldi	r25, 0x04	; 4
    4566:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    456a:	62 e0       	ldi	r22, 0x02	; 2
    456c:	8f eb       	ldi	r24, 0xBF	; 191
    456e:	94 e0       	ldi	r25, 0x04	; 4
    4570:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("PWM "));
    4574:	60 e7       	ldi	r22, 0x70	; 112
    4576:	73 e1       	ldi	r23, 0x13	; 19
    4578:	8f eb       	ldi	r24, 0xBF	; 191
    457a:	94 e0       	ldi	r25, 0x04	; 4
    457c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    4580:	4a e0       	ldi	r20, 0x0A	; 10
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	6f 2d       	mov	r22, r15
    4586:	8f eb       	ldi	r24, 0xBF	; 191
    4588:	94 e0       	ldi	r25, 0x04	; 4
    458a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				
				lcd.print(pwmVal);
    458e:	4a e0       	ldi	r20, 0x0A	; 10
    4590:	50 e0       	ldi	r21, 0x00	; 0
    4592:	6c 2d       	mov	r22, r12
    4594:	8f eb       	ldi	r24, 0xBF	; 191
    4596:	94 e0       	ldi	r25, 0x04	; 4
    4598:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
				
				
				lcd.display();
    459c:	8f eb       	ldi	r24, 0xBF	; 191
    459e:	94 e0       	ldi	r25, 0x04	; 4
    45a0:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				replyOK();
    45a4:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    45a8:	88 c5       	rjmp	.+2832   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			//pwm frequency divisor setting
			else if(strncmp_P(btCmdReplyBuffer,cmd38,4)==0)
    45aa:	44 e0       	ldi	r20, 0x04	; 4
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	66 e4       	ldi	r22, 0x46	; 70
    45b0:	74 e1       	ldi	r23, 0x14	; 20
    45b2:	8f e7       	ldi	r24, 0x7F	; 127
    45b4:	94 e0       	ldi	r25, 0x04	; 4
    45b6:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    45ba:	89 2b       	or	r24, r25
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <_Z13readSerialCmdv+0x54a>
    45be:	6d c0       	rjmp	.+218    	; 0x469a <_Z13readSerialCmdv+0x624>
			{
				if(btCmdReplyBuffer[4] < 0x30 || btCmdReplyBuffer[4] > 0x39)
    45c0:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <btCmdReplyBuffer+0x4>
    45c4:	80 53       	subi	r24, 0x30	; 48
    45c6:	8a 30       	cpi	r24, 0x0A	; 10
    45c8:	38 f0       	brcs	.+14     	; 0x45d8 <_Z13readSerialCmdv+0x562>
				{
					Serial.println(F_STR("ERROR_1"));
    45ca:	68 e6       	ldi	r22, 0x68	; 104
    45cc:	73 e1       	ldi	r23, 0x13	; 19
    45ce:	88 ea       	ldi	r24, 0xA8	; 168
    45d0:	93 e0       	ldi	r25, 0x03	; 3
    45d2:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    45d6:	71 c5       	rjmp	.+2786   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				strncpy(numeric,btCmdReplyBuffer+4,2);
    45d8:	42 e0       	ldi	r20, 0x02	; 2
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	63 e8       	ldi	r22, 0x83	; 131
    45de:	74 e0       	ldi	r23, 0x04	; 4
    45e0:	ce 01       	movw	r24, r28
    45e2:	01 96       	adiw	r24, 0x01	; 1
    45e4:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				//here we need to implement the check for not exceeding pin numbers available
				num=atoi(numeric);
    45e8:	ce 01       	movw	r24, r28
    45ea:	01 96       	adiw	r24, 0x01	; 1
    45ec:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    45f0:	f8 2e       	mov	r15, r24
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pin num is "));
				Serial.println(num);
				#endif
				
				if(!isPwmPin(num))
    45f2:	0e 94 35 1a 	call	0x346a	; 0x346a <_Z8isPwmPinh>
    45f6:	81 11       	cpse	r24, r1
    45f8:	07 c0       	rjmp	.+14     	; 0x4608 <_Z13readSerialCmdv+0x592>
				{
					Serial.println(F_STR("ERROR_2"));
    45fa:	60 e6       	ldi	r22, 0x60	; 96
    45fc:	73 e1       	ldi	r23, 0x13	; 19
    45fe:	88 ea       	ldi	r24, 0xA8	; 168
    4600:	93 e0       	ldi	r25, 0x03	; 3
    4602:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4606:	59 c5       	rjmp	.+2738   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				
				uint16_t pwmFeqDiv = 0;
				strncpy(numeric,btCmdReplyBuffer+4+2,uartBufCharCount-(4+2));
    4608:	41 2f       	mov	r20, r17
    460a:	50 e0       	ldi	r21, 0x00	; 0
    460c:	46 50       	subi	r20, 0x06	; 6
    460e:	51 09       	sbc	r21, r1
    4610:	65 e8       	ldi	r22, 0x85	; 133
    4612:	74 e0       	ldi	r23, 0x04	; 4
    4614:	ce 01       	movw	r24, r28
    4616:	01 96       	adiw	r24, 0x01	; 1
    4618:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
				
				pwmFeqDiv=atoi(numeric);
    461c:	ce 01       	movw	r24, r28
    461e:	01 96       	adiw	r24, 0x01	; 1
    4620:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
    4624:	6c 01       	movw	r12, r24
				#ifdef PRINT_DEBUG_MSG
				Serial.print(F_STR("pwm freq divisor is "));
				Serial.println(pwmFeqDiv);
				#endif
				
				if (setPwmFrequency(num,pwmFeqDiv)==0)
    4626:	bc 01       	movw	r22, r24
    4628:	8f 2d       	mov	r24, r15
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <_Z15setPwmFrequencyii>
    4630:	81 11       	cpse	r24, r1
    4632:	07 c0       	rjmp	.+14     	; 0x4642 <_Z13readSerialCmdv+0x5cc>
				{
					Serial.println(F_STR("ERROR_3"));
    4634:	68 e5       	ldi	r22, 0x58	; 88
    4636:	73 e1       	ldi	r23, 0x13	; 19
    4638:	88 ea       	ldi	r24, 0xA8	; 168
    463a:	93 e0       	ldi	r25, 0x03	; 3
    463c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    4640:	3c c5       	rjmp	.+2680   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
								
				lcd.clearDisplay();
    4642:	8f eb       	ldi	r24, 0xBF	; 191
    4644:	94 e0       	ldi	r25, 0x04	; 4
    4646:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    464a:	40 e0       	ldi	r20, 0x00	; 0
    464c:	50 e0       	ldi	r21, 0x00	; 0
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	70 e0       	ldi	r23, 0x00	; 0
    4652:	8f eb       	ldi	r24, 0xBF	; 191
    4654:	94 e0       	ldi	r25, 0x04	; 4
    4656:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    465a:	62 e0       	ldi	r22, 0x02	; 2
    465c:	8f eb       	ldi	r24, 0xBF	; 191
    465e:	94 e0       	ldi	r25, 0x04	; 4
    4660:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				
				lcd.print(F_STR("PWMF "));
    4664:	62 e5       	ldi	r22, 0x52	; 82
    4666:	73 e1       	ldi	r23, 0x13	; 19
    4668:	8f eb       	ldi	r24, 0xBF	; 191
    466a:	94 e0       	ldi	r25, 0x04	; 4
    466c:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.println(num);
    4670:	4a e0       	ldi	r20, 0x0A	; 10
    4672:	50 e0       	ldi	r21, 0x00	; 0
    4674:	6f 2d       	mov	r22, r15
    4676:	8f eb       	ldi	r24, 0xBF	; 191
    4678:	94 e0       	ldi	r25, 0x04	; 4
    467a:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
				
				lcd.print(pwmFeqDiv);
    467e:	4a e0       	ldi	r20, 0x0A	; 10
    4680:	50 e0       	ldi	r21, 0x00	; 0
    4682:	b6 01       	movw	r22, r12
    4684:	8f eb       	ldi	r24, 0xBF	; 191
    4686:	94 e0       	ldi	r25, 0x04	; 4
    4688:	0e 94 4b 2c 	call	0x5896	; 0x5896 <_ZN5Print5printEji>
				
				
				lcd.display();
    468c:	8f eb       	ldi	r24, 0xBF	; 191
    468e:	94 e0       	ldi	r25, 0x04	; 4
    4690:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				replyOK();
    4694:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4698:	10 c5       	rjmp	.+2592   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd8,4)==0)
    469a:	44 e0       	ldi	r20, 0x04	; 4
    469c:	50 e0       	ldi	r21, 0x00	; 0
    469e:	63 e0       	ldi	r22, 0x03	; 3
    46a0:	75 e1       	ldi	r23, 0x15	; 21
    46a2:	8f e7       	ldi	r24, 0x7F	; 127
    46a4:	94 e0       	ldi	r25, 0x04	; 4
    46a6:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    46aa:	89 2b       	or	r24, r25
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <_Z13readSerialCmdv+0x63a>
    46ae:	55 c0       	rjmp	.+170    	; 0x475a <_Z13readSerialCmdv+0x6e4>
			{
				if(btCmdReplyBuffer[5]!='\0')
    46b0:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <btCmdReplyBuffer+0x5>
    46b4:	88 23       	and	r24, r24
    46b6:	39 f0       	breq	.+14     	; 0x46c6 <_Z13readSerialCmdv+0x650>
				{
					Serial.println(F_STR("ERROR_1"));
    46b8:	6a e4       	ldi	r22, 0x4A	; 74
    46ba:	73 e1       	ldi	r23, 0x13	; 19
    46bc:	88 ea       	ldi	r24, 0xA8	; 168
    46be:	93 e0       	ldi	r25, 0x03	; 3
    46c0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					return;
    46c4:	fa c4       	rjmp	.+2548   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				}
				
				lcd.clearDisplay();
    46c6:	8f eb       	ldi	r24, 0xBF	; 191
    46c8:	94 e0       	ldi	r25, 0x04	; 4
    46ca:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    46ce:	40 e0       	ldi	r20, 0x00	; 0
    46d0:	50 e0       	ldi	r21, 0x00	; 0
    46d2:	60 e0       	ldi	r22, 0x00	; 0
    46d4:	70 e0       	ldi	r23, 0x00	; 0
    46d6:	8f eb       	ldi	r24, 0xBF	; 191
    46d8:	94 e0       	ldi	r25, 0x04	; 4
    46da:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    46de:	62 e0       	ldi	r22, 0x02	; 2
    46e0:	8f eb       	ldi	r24, 0xBF	; 191
    46e2:	94 e0       	ldi	r25, 0x04	; 4
    46e4:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				lcd.print(F_STR("ANALOG REF"));		//this has already 10 chars so if we give println then it goes one more line below
    46e8:	6f e3       	ldi	r22, 0x3F	; 63
    46ea:	73 e1       	ldi	r23, 0x13	; 19
    46ec:	8f eb       	ldi	r24, 0xBF	; 191
    46ee:	94 e0       	ldi	r25, 0x04	; 4
    46f0:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				//and chars are invisible.
				switch(btCmdReplyBuffer[4])
    46f4:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <btCmdReplyBuffer+0x4>
    46f8:	86 37       	cpi	r24, 0x76	; 118
    46fa:	c1 f0       	breq	.+48     	; 0x472c <_Z13readSerialCmdv+0x6b6>
    46fc:	88 37       	cpi	r24, 0x78	; 120
    46fe:	61 f0       	breq	.+24     	; 0x4718 <_Z13readSerialCmdv+0x6a2>
    4700:	89 36       	cpi	r24, 0x69	; 105
    4702:	f1 f4       	brne	.+60     	; 0x4740 <_Z13readSerialCmdv+0x6ca>
				{
					case 'i':
					analogReference(INTERNAL);
    4704:	83 e0       	ldi	r24, 0x03	; 3
    4706:	0e 94 b7 29 	call	0x536e	; 0x536e <analogReference>
					lcd.print(F_STR("INTERNAL"));
    470a:	66 e3       	ldi	r22, 0x36	; 54
    470c:	73 e1       	ldi	r23, 0x13	; 19
    470e:	8f eb       	ldi	r24, 0xBF	; 191
    4710:	94 e0       	ldi	r25, 0x04	; 4
    4712:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    4716:	1a c0       	rjmp	.+52     	; 0x474c <_Z13readSerialCmdv+0x6d6>
					
					case 'x':
					analogReference(INTERNAL);
    4718:	83 e0       	ldi	r24, 0x03	; 3
    471a:	0e 94 b7 29 	call	0x536e	; 0x536e <analogReference>
					lcd.print(F_STR("EXTERNAL"));
    471e:	6d e2       	ldi	r22, 0x2D	; 45
    4720:	73 e1       	ldi	r23, 0x13	; 19
    4722:	8f eb       	ldi	r24, 0xBF	; 191
    4724:	94 e0       	ldi	r25, 0x04	; 4
    4726:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    472a:	10 c0       	rjmp	.+32     	; 0x474c <_Z13readSerialCmdv+0x6d6>
					
					case 'v':
					analogReference(DEFAULT);
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	0e 94 b7 29 	call	0x536e	; 0x536e <analogReference>
					lcd.print(F_STR("VCC"));
    4732:	69 e2       	ldi	r22, 0x29	; 41
    4734:	73 e1       	ldi	r23, 0x13	; 19
    4736:	8f eb       	ldi	r24, 0xBF	; 191
    4738:	94 e0       	ldi	r25, 0x04	; 4
    473a:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					break;
    473e:	06 c0       	rjmp	.+12     	; 0x474c <_Z13readSerialCmdv+0x6d6>
					
					default:
					Serial.println(F_STR("ERROR_2"));
    4740:	61 e2       	ldi	r22, 0x21	; 33
    4742:	73 e1       	ldi	r23, 0x13	; 19
    4744:	88 ea       	ldi	r24, 0xA8	; 168
    4746:	93 e0       	ldi	r25, 0x03	; 3
    4748:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					break;
				}
				
				lcd.display();
    474c:	8f eb       	ldi	r24, 0xBF	; 191
    474e:	94 e0       	ldi	r25, 0x04	; 4
    4750:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
				
				replyOK();
    4754:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4758:	b0 c4       	rjmp	.+2400   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd10,5)==0)
    475a:	45 e0       	ldi	r20, 0x05	; 5
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	67 ef       	ldi	r22, 0xF7	; 247
    4760:	74 e1       	ldi	r23, 0x14	; 20
    4762:	8f e7       	ldi	r24, 0x7F	; 127
    4764:	94 e0       	ldi	r25, 0x04	; 4
    4766:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    476a:	89 2b       	or	r24, r25
    476c:	09 f0       	breq	.+2      	; 0x4770 <_Z13readSerialCmdv+0x6fa>
    476e:	87 c0       	rjmp	.+270    	; 0x487e <_Z13readSerialCmdv+0x808>
			{
				
				
				switch(btCmdReplyBuffer[6])
    4770:	80 91 85 04 	lds	r24, 0x0485	; 0x800485 <btCmdReplyBuffer+0x6>
    4774:	84 36       	cpi	r24, 0x64	; 100
    4776:	99 f1       	breq	.+102    	; 0x47de <_Z13readSerialCmdv+0x768>
    4778:	18 f4       	brcc	.+6      	; 0x4780 <_Z13readSerialCmdv+0x70a>
    477a:	81 36       	cpi	r24, 0x61	; 97
    477c:	41 f0       	breq	.+16     	; 0x478e <_Z13readSerialCmdv+0x718>
    477e:	76 c0       	rjmp	.+236    	; 0x486c <_Z13readSerialCmdv+0x7f6>
    4780:	80 37       	cpi	r24, 0x70	; 112
    4782:	09 f4       	brne	.+2      	; 0x4786 <_Z13readSerialCmdv+0x710>
    4784:	53 c0       	rjmp	.+166    	; 0x482c <_Z13readSerialCmdv+0x7b6>
    4786:	83 37       	cpi	r24, 0x73	; 115
    4788:	09 f4       	brne	.+2      	; 0x478c <_Z13readSerialCmdv+0x716>
    478a:	6d c0       	rjmp	.+218    	; 0x4866 <_Z13readSerialCmdv+0x7f0>
    478c:	6f c0       	rjmp	.+222    	; 0x486c <_Z13readSerialCmdv+0x7f6>
				{
					case 'a':
						if(btCmdReplyBuffer[7] < 0x30 || btCmdReplyBuffer[7] > 0x39)
    478e:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <btCmdReplyBuffer+0x7>
    4792:	80 53       	subi	r24, 0x30	; 48
    4794:	8a 30       	cpi	r24, 0x0A	; 10
    4796:	38 f0       	brcs	.+14     	; 0x47a6 <_Z13readSerialCmdv+0x730>
						{
							Serial.println(F_STR("ERROR_1"));
    4798:	69 e1       	ldi	r22, 0x19	; 25
    479a:	73 e1       	ldi	r23, 0x13	; 19
    479c:	88 ea       	ldi	r24, 0xA8	; 168
    479e:	93 e0       	ldi	r25, 0x03	; 3
    47a0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							return;
    47a4:	8a c4       	rjmp	.+2324   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						}
						
						strncpy(numeric,btCmdReplyBuffer+7,7);
    47a6:	47 e0       	ldi	r20, 0x07	; 7
    47a8:	50 e0       	ldi	r21, 0x00	; 0
    47aa:	66 e8       	ldi	r22, 0x86	; 134
    47ac:	74 e0       	ldi	r23, 0x04	; 4
    47ae:	ce 01       	movw	r24, r28
    47b0:	01 96       	adiw	r24, 0x01	; 1
    47b2:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
						
						//here we need to implement the check for not exceeding pin numbers available
						num=atoi(numeric);
    47b6:	ce 01       	movw	r24, r28
    47b8:	01 96       	adiw	r24, 0x01	; 1
    47ba:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
						if(num > 7)			//we will use 0 for A0 and 7 for A7
    47be:	88 30       	cpi	r24, 0x08	; 8
    47c0:	38 f0       	brcs	.+14     	; 0x47d0 <_Z13readSerialCmdv+0x75a>
						{
							Serial.println(F_STR("ERROR_2"));
    47c2:	61 e1       	ldi	r22, 0x11	; 17
    47c4:	73 e1       	ldi	r23, 0x13	; 19
    47c6:	88 ea       	ldi	r24, 0xA8	; 168
    47c8:	93 e0       	ldi	r25, 0x03	; 3
    47ca:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							return;
    47ce:	75 c4       	rjmp	.+2282   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						}
						
						analog_stream_pin = A0+num;
    47d0:	82 5f       	subi	r24, 0xF2	; 242
    47d2:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <analog_stream_pin>
						analog_stream_flag = 1;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	80 93 7c 04 	sts	0x047C, r24	; 0x80047c <analog_stream_flag>
						
					break;
    47dc:	4d c0       	rjmp	.+154    	; 0x4878 <_Z13readSerialCmdv+0x802>
					
					case 'd':
						if(btCmdReplyBuffer[7] < 0x30 || btCmdReplyBuffer[7] > 0x39)
    47de:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <btCmdReplyBuffer+0x7>
    47e2:	80 53       	subi	r24, 0x30	; 48
    47e4:	8a 30       	cpi	r24, 0x0A	; 10
    47e6:	38 f0       	brcs	.+14     	; 0x47f6 <_Z13readSerialCmdv+0x780>
						{
							Serial.println(F_STR("ERROR_1"));
    47e8:	69 e0       	ldi	r22, 0x09	; 9
    47ea:	73 e1       	ldi	r23, 0x13	; 19
    47ec:	88 ea       	ldi	r24, 0xA8	; 168
    47ee:	93 e0       	ldi	r25, 0x03	; 3
    47f0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							return;
    47f4:	62 c4       	rjmp	.+2244   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						}
						
						strncpy(numeric,btCmdReplyBuffer+7,7);		//Now we should be able to check even if someone types get002 instead of get2
    47f6:	47 e0       	ldi	r20, 0x07	; 7
    47f8:	50 e0       	ldi	r21, 0x00	; 0
    47fa:	66 e8       	ldi	r22, 0x86	; 134
    47fc:	74 e0       	ldi	r23, 0x04	; 4
    47fe:	ce 01       	movw	r24, r28
    4800:	01 96       	adiw	r24, 0x01	; 1
    4802:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <strncpy>
						
						//here we need to implement the check for not exceeding pin numbers available
						num=atoi(numeric);
    4806:	ce 01       	movw	r24, r28
    4808:	01 96       	adiw	r24, 0x01	; 1
    480a:	0e 94 83 2d 	call	0x5b06	; 0x5b06 <atoi>
						if(num > A5)
    480e:	84 31       	cpi	r24, 0x14	; 20
    4810:	38 f0       	brcs	.+14     	; 0x4820 <_Z13readSerialCmdv+0x7aa>
						{
							Serial.println(F_STR("ERROR_2"));
    4812:	61 e0       	ldi	r22, 0x01	; 1
    4814:	73 e1       	ldi	r23, 0x13	; 19
    4816:	88 ea       	ldi	r24, 0xA8	; 168
    4818:	93 e0       	ldi	r25, 0x03	; 3
    481a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							return;
    481e:	4d c4       	rjmp	.+2202   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						}
						
						digital_stream_pin=num;
    4820:	80 93 7b 04 	sts	0x047B, r24	; 0x80047b <digital_stream_pin>
						digital_stream_flag=1;
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	80 93 7a 04 	sts	0x047A, r24	; 0x80047a <digital_stream_flag>
						
					break;
    482a:	26 c0       	rjmp	.+76     	; 0x4878 <_Z13readSerialCmdv+0x802>
					
					case 'p':
						if(btCmdReplyBuffer[7]=='b')
    482c:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <btCmdReplyBuffer+0x7>
    4830:	82 36       	cpi	r24, 0x62	; 98
    4832:	21 f4       	brne	.+8      	; 0x483c <_Z13readSerialCmdv+0x7c6>
						{
							port_stream=1;
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <port_stream>
    483a:	1e c0       	rjmp	.+60     	; 0x4878 <_Z13readSerialCmdv+0x802>
						}
						else if (btCmdReplyBuffer[7]=='c')
    483c:	83 36       	cpi	r24, 0x63	; 99
    483e:	21 f4       	brne	.+8      	; 0x4848 <_Z13readSerialCmdv+0x7d2>
						{
							port_stream=2;
    4840:	82 e0       	ldi	r24, 0x02	; 2
    4842:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <port_stream>
    4846:	18 c0       	rjmp	.+48     	; 0x4878 <_Z13readSerialCmdv+0x802>
						}
						else if(btCmdReplyBuffer[7]=='d')
    4848:	84 36       	cpi	r24, 0x64	; 100
    484a:	21 f4       	brne	.+8      	; 0x4854 <_Z13readSerialCmdv+0x7de>
						{
							port_stream=3;
    484c:	83 e0       	ldi	r24, 0x03	; 3
    484e:	80 93 79 04 	sts	0x0479, r24	; 0x800479 <port_stream>
    4852:	12 c0       	rjmp	.+36     	; 0x4878 <_Z13readSerialCmdv+0x802>
						}
						else
						{
							port_stream = 0;
    4854:	10 92 79 04 	sts	0x0479, r1	; 0x800479 <port_stream>
							Serial.println(F_STR("ERROR_4"));
    4858:	69 ef       	ldi	r22, 0xF9	; 249
    485a:	72 e1       	ldi	r23, 0x12	; 18
    485c:	88 ea       	ldi	r24, 0xA8	; 168
    485e:	93 e0       	ldi	r25, 0x03	; 3
    4860:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4864:	09 c0       	rjmp	.+18     	; 0x4878 <_Z13readSerialCmdv+0x802>
						}
					break;
					
					case 's':		//stop all streaming.
						stop_streaming();
    4866:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z14stop_streamingv>
					break;
    486a:	06 c0       	rjmp	.+12     	; 0x4878 <_Z13readSerialCmdv+0x802>
					
					default:Serial.println(F_STR("ERROR_3"));
    486c:	61 ef       	ldi	r22, 0xF1	; 241
    486e:	72 e1       	ldi	r23, 0x12	; 18
    4870:	88 ea       	ldi	r24, 0xA8	; 168
    4872:	93 e0       	ldi	r25, 0x03	; 3
    4874:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					break;
				}
				
				replyOK();
    4878:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    487c:	1e c4       	rjmp	.+2108   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd1)==0)	//search for Token 1
    487e:	6a e1       	ldi	r22, 0x1A	; 26
    4880:	75 e1       	ldi	r23, 0x15	; 21
    4882:	8f e7       	ldi	r24, 0x7F	; 127
    4884:	94 e0       	ldi	r25, 0x04	; 4
    4886:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    488a:	89 2b       	or	r24, r25
    488c:	19 f5       	brne	.+70     	; 0x48d4 <_Z13readSerialCmdv+0x85e>
			{	
			
				//message here	
						
				replyOK();		//command processed response
    488e:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
								//if OK is not received that means CMD not processed by
				lcd.clearDisplay();
    4892:	8f eb       	ldi	r24, 0xBF	; 191
    4894:	94 e0       	ldi	r25, 0x04	; 4
    4896:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    489a:	40 e0       	ldi	r20, 0x00	; 0
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	8f eb       	ldi	r24, 0xBF	; 191
    48a4:	94 e0       	ldi	r25, 0x04	; 4
    48a6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    48aa:	62 e0       	ldi	r22, 0x02	; 2
    48ac:	8f eb       	ldi	r24, 0xBF	; 191
    48ae:	94 e0       	ldi	r25, 0x04	; 4
    48b0:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				lcd.print(F_STR("hello"));
    48b4:	6b ee       	ldi	r22, 0xEB	; 235
    48b6:	72 e1       	ldi	r23, 0x12	; 18
    48b8:	8f eb       	ldi	r24, 0xBF	; 191
    48ba:	94 e0       	ldi	r25, 0x04	; 4
    48bc:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.dim(false);
    48c0:	60 e0       	ldi	r22, 0x00	; 0
    48c2:	8f eb       	ldi	r24, 0xBF	; 191
    48c4:	94 e0       	ldi	r25, 0x04	; 4
    48c6:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZN16Adafruit_SSD13063dimEh>
				lcd.display();
    48ca:	8f eb       	ldi	r24, 0xBF	; 191
    48cc:	94 e0       	ldi	r25, 0x04	; 4
    48ce:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    48d2:	f3 c3       	rjmp	.+2022   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				//action here
			
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd2)==0)	//search for Token 2
    48d4:	65 e1       	ldi	r22, 0x15	; 21
    48d6:	75 e1       	ldi	r23, 0x15	; 21
    48d8:	8f e7       	ldi	r24, 0x7F	; 127
    48da:	94 e0       	ldi	r25, 0x04	; 4
    48dc:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    48e0:	89 2b       	or	r24, r25
    48e2:	19 f5       	brne	.+70     	; 0x492a <_Z13readSerialCmdv+0x8b4>
			{
				
				//message
				
				replyOK();
    48e4:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
				
				lcd.clearDisplay();
    48e8:	8f eb       	ldi	r24, 0xBF	; 191
    48ea:	94 e0       	ldi	r25, 0x04	; 4
    48ec:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
				lcd.setCursor(0,0);
    48f0:	40 e0       	ldi	r20, 0x00	; 0
    48f2:	50 e0       	ldi	r21, 0x00	; 0
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	70 e0       	ldi	r23, 0x00	; 0
    48f8:	8f eb       	ldi	r24, 0xBF	; 191
    48fa:	94 e0       	ldi	r25, 0x04	; 4
    48fc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN12Adafruit_GFX9setCursorEii>
				lcd.setTextSize(2);
    4900:	62 e0       	ldi	r22, 0x02	; 2
    4902:	8f eb       	ldi	r24, 0xBF	; 191
    4904:	94 e0       	ldi	r25, 0x04	; 4
    4906:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <_ZN12Adafruit_GFX11setTextSizeEh>
				lcd.print(F_STR("Test Success"));
    490a:	6e ed       	ldi	r22, 0xDE	; 222
    490c:	72 e1       	ldi	r23, 0x12	; 18
    490e:	8f eb       	ldi	r24, 0xBF	; 191
    4910:	94 e0       	ldi	r25, 0x04	; 4
    4912:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
				lcd.dim(true);
    4916:	61 e0       	ldi	r22, 0x01	; 1
    4918:	8f eb       	ldi	r24, 0xBF	; 191
    491a:	94 e0       	ldi	r25, 0x04	; 4
    491c:	0e 94 91 12 	call	0x2522	; 0x2522 <_ZN16Adafruit_SSD13063dimEh>
				lcd.display();
    4920:	8f eb       	ldi	r24, 0xBF	; 191
    4922:	94 e0       	ldi	r25, 0x04	; 4
    4924:	0e 94 ab 12 	call	0x2556	; 0x2556 <_ZN16Adafruit_SSD13067displayEv>
    4928:	c8 c3       	rjmp	.+1936   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				//action
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd3)==0)	//search for Token 3
    492a:	60 e1       	ldi	r22, 0x10	; 16
    492c:	75 e1       	ldi	r23, 0x15	; 21
    492e:	8f e7       	ldi	r24, 0x7F	; 127
    4930:	94 e0       	ldi	r25, 0x04	; 4
    4932:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4936:	89 2b       	or	r24, r25
    4938:	29 f4       	brne	.+10     	; 0x4944 <_Z13readSerialCmdv+0x8ce>
			{
				
				//message	
				replyOK();
    493a:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
				showPinOut();
    493e:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z10showPinOutv>
    4942:	bb c3       	rjmp	.+1910   	; 0x50ba <_Z13readSerialCmdv+0x1044>
				//action
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd13)==0)	//experimental feature
    4944:	6f ee       	ldi	r22, 0xEF	; 239
    4946:	74 e1       	ldi	r23, 0x14	; 20
    4948:	8f e7       	ldi	r24, 0x7F	; 127
    494a:	94 e0       	ldi	r25, 0x04	; 4
    494c:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4950:	89 2b       	or	r24, r25
    4952:	69 f4       	brne	.+26     	; 0x496e <_Z13readSerialCmdv+0x8f8>
			{
				Serial.enableEcho();
    4954:	88 ea       	ldi	r24, 0xA8	; 168
    4956:	93 e0       	ldi	r25, 0x03	; 3
    4958:	0e 94 98 15 	call	0x2b30	; 0x2b30 <_ZN14HardwareSerial10enableEchoEv>
				//ate_enabled=1;
				Serial.println("ECHO_ENABLED");
    495c:	65 e8       	ldi	r22, 0x85	; 133
    495e:	73 e0       	ldi	r23, 0x03	; 3
    4960:	88 ea       	ldi	r24, 0xA8	; 168
    4962:	93 e0       	ldi	r25, 0x03	; 3
    4964:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
				replyOK();
    4968:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    496c:	a6 c3       	rjmp	.+1868   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd15)==0)	//experimental feature
    496e:	65 ee       	ldi	r22, 0xE5	; 229
    4970:	74 e1       	ldi	r23, 0x14	; 20
    4972:	8f e7       	ldi	r24, 0x7F	; 127
    4974:	94 e0       	ldi	r25, 0x04	; 4
    4976:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    497a:	89 2b       	or	r24, r25
    497c:	69 f4       	brne	.+26     	; 0x4998 <_Z13readSerialCmdv+0x922>
			{
				Serial.disableEcho();
    497e:	88 ea       	ldi	r24, 0xA8	; 168
    4980:	93 e0       	ldi	r25, 0x03	; 3
    4982:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <_ZN14HardwareSerial11disableEchoEv>
				Serial.println("ECHO_DISABLED");
    4986:	62 e9       	ldi	r22, 0x92	; 146
    4988:	73 e0       	ldi	r23, 0x03	; 3
    498a:	88 ea       	ldi	r24, 0xA8	; 168
    498c:	93 e0       	ldi	r25, 0x03	; 3
    498e:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
				replyOK();
    4992:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4996:	91 c3       	rjmp	.+1826   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd16,5)==0)	//experimental feature
    4998:	45 e0       	ldi	r20, 0x05	; 5
    499a:	50 e0       	ldi	r21, 0x00	; 0
    499c:	6e ed       	ldi	r22, 0xDE	; 222
    499e:	74 e1       	ldi	r23, 0x14	; 20
    49a0:	8f e7       	ldi	r24, 0x7F	; 127
    49a2:	94 e0       	ldi	r25, 0x04	; 4
    49a4:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    49a8:	89 2b       	or	r24, r25
    49aa:	c9 f4       	brne	.+50     	; 0x49de <_Z13readSerialCmdv+0x968>
			{
				if(btCmdReplyBuffer[5]=='e')
    49ac:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <btCmdReplyBuffer+0x5>
    49b0:	85 36       	cpi	r24, 0x65	; 101
    49b2:	29 f4       	brne	.+10     	; 0x49be <_Z13readSerialCmdv+0x948>
				{
					Serial.snoopModeEnable();
    49b4:	88 ea       	ldi	r24, 0xA8	; 168
    49b6:	93 e0       	ldi	r25, 0x03	; 3
    49b8:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <_ZN14HardwareSerial15snoopModeEnableEv>
    49bc:	0d c0       	rjmp	.+26     	; 0x49d8 <_Z13readSerialCmdv+0x962>
				}
				else if (btCmdReplyBuffer[5]=='d')
    49be:	84 36       	cpi	r24, 0x64	; 100
    49c0:	29 f4       	brne	.+10     	; 0x49cc <_Z13readSerialCmdv+0x956>
				{
					Serial.snoopModeDisable();
    49c2:	88 ea       	ldi	r24, 0xA8	; 168
    49c4:	93 e0       	ldi	r25, 0x03	; 3
    49c6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <_ZN14HardwareSerial16snoopModeDisableEv>
    49ca:	06 c0       	rjmp	.+12     	; 0x49d8 <_Z13readSerialCmdv+0x962>
				}
				else
				{
					Serial.println("ERROR_1");
    49cc:	60 ea       	ldi	r22, 0xA0	; 160
    49ce:	73 e0       	ldi	r23, 0x03	; 3
    49d0:	88 ea       	ldi	r24, 0xA8	; 168
    49d2:	93 e0       	ldi	r25, 0x03	; 3
    49d4:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
				}
				replyOK();
    49d8:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    49dc:	6e c3       	rjmp	.+1756   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd18)==0)	//experimental feature
    49de:	69 ed       	ldi	r22, 0xD9	; 217
    49e0:	74 e1       	ldi	r23, 0x14	; 20
    49e2:	8f e7       	ldi	r24, 0x7F	; 127
    49e4:	94 e0       	ldi	r25, 0x04	; 4
    49e6:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    49ea:	89 2b       	or	r24, r25
    49ec:	39 f4       	brne	.+14     	; 0x49fc <_Z13readSerialCmdv+0x986>
			{
				replyOK();
    49ee:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
				Serial.end();
    49f2:	88 ea       	ldi	r24, 0xA8	; 168
    49f4:	93 e0       	ldi	r25, 0x03	; 3
    49f6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <_ZN14HardwareSerial3endEv>
    49fa:	5f c3       	rjmp	.+1726   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd19,3)==0)	//experimental feature
    49fc:	43 e0       	ldi	r20, 0x03	; 3
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	64 ed       	ldi	r22, 0xD4	; 212
    4a02:	74 e1       	ldi	r23, 0x14	; 20
    4a04:	8f e7       	ldi	r24, 0x7F	; 127
    4a06:	94 e0       	ldi	r25, 0x04	; 4
    4a08:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4a0c:	89 2b       	or	r24, r25
    4a0e:	29 f5       	brne	.+74     	; 0x4a5a <_Z13readSerialCmdv+0x9e4>
			{
				if(btCmdReplyBuffer[3]=='r')
    4a10:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <btCmdReplyBuffer+0x3>
    4a14:	82 37       	cpi	r24, 0x72	; 114
    4a16:	59 f4       	brne	.+22     	; 0x4a2e <_Z13readSerialCmdv+0x9b8>
				{
					Serial.exWhiteSpaces();
    4a18:	88 ea       	ldi	r24, 0xA8	; 168
    4a1a:	93 e0       	ldi	r25, 0x03	; 3
    4a1c:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <_ZN14HardwareSerial13exWhiteSpacesEv>
					Serial.println(F_STR("EXCLUDING WHITE SPACE"));
    4a20:	68 ec       	ldi	r22, 0xC8	; 200
    4a22:	72 e1       	ldi	r23, 0x12	; 18
    4a24:	88 ea       	ldi	r24, 0xA8	; 168
    4a26:	93 e0       	ldi	r25, 0x03	; 3
    4a28:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4a2c:	13 c0       	rjmp	.+38     	; 0x4a54 <_Z13readSerialCmdv+0x9de>
				}
				else if (btCmdReplyBuffer[3]=='k')
    4a2e:	8b 36       	cpi	r24, 0x6B	; 107
    4a30:	59 f4       	brne	.+22     	; 0x4a48 <_Z13readSerialCmdv+0x9d2>
				{
					Serial.inWhiteSpaces();
    4a32:	88 ea       	ldi	r24, 0xA8	; 168
    4a34:	93 e0       	ldi	r25, 0x03	; 3
    4a36:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <_ZN14HardwareSerial13inWhiteSpacesEv>
					Serial.println(F_STR("INCLUDING WHITE SPACE"));
    4a3a:	62 eb       	ldi	r22, 0xB2	; 178
    4a3c:	72 e1       	ldi	r23, 0x12	; 18
    4a3e:	88 ea       	ldi	r24, 0xA8	; 168
    4a40:	93 e0       	ldi	r25, 0x03	; 3
    4a42:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4a46:	06 c0       	rjmp	.+12     	; 0x4a54 <_Z13readSerialCmdv+0x9de>
				}
				else
				{
					Serial.println("ERROR_1");
    4a48:	60 ea       	ldi	r22, 0xA0	; 160
    4a4a:	73 e0       	ldi	r23, 0x03	; 3
    4a4c:	88 ea       	ldi	r24, 0xA8	; 168
    4a4e:	93 e0       	ldi	r25, 0x03	; 3
    4a50:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
				}
				replyOK();
    4a54:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4a58:	30 c3       	rjmp	.+1632   	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(strncmp_P(btCmdReplyBuffer,cmd21,3)==0)	//experimental feature
    4a5a:	43 e0       	ldi	r20, 0x03	; 3
    4a5c:	50 e0       	ldi	r21, 0x00	; 0
    4a5e:	6b ec       	ldi	r22, 0xCB	; 203
    4a60:	74 e1       	ldi	r23, 0x14	; 20
    4a62:	8f e7       	ldi	r24, 0x7F	; 127
    4a64:	94 e0       	ldi	r25, 0x04	; 4
    4a66:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4a6a:	89 2b       	or	r24, r25
    4a6c:	09 f0       	breq	.+2      	; 0x4a70 <_Z13readSerialCmdv+0x9fa>
    4a6e:	50 c1       	rjmp	.+672    	; 0x4d10 <_Z13readSerialCmdv+0xc9a>
			{
				if(strncmp_P(btCmdReplyBuffer,cmd21,8)==0)
    4a70:	48 e0       	ldi	r20, 0x08	; 8
    4a72:	50 e0       	ldi	r21, 0x00	; 0
    4a74:	6b ec       	ldi	r22, 0xCB	; 203
    4a76:	74 e1       	ldi	r23, 0x14	; 20
    4a78:	8f e7       	ldi	r24, 0x7F	; 127
    4a7a:	94 e0       	ldi	r25, 0x04	; 4
    4a7c:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4a80:	89 2b       	or	r24, r25
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <_Z13readSerialCmdv+0xa10>
    4a84:	49 c0       	rjmp	.+146    	; 0x4b18 <_Z13readSerialCmdv+0xaa2>
				{
					if(!parse_i2c_cmd(btCmdReplyBuffer,I2C_WRITE_CMD))
    4a86:	60 e0       	ldi	r22, 0x00	; 0
    4a88:	8f e7       	ldi	r24, 0x7F	; 127
    4a8a:	94 e0       	ldi	r25, 0x04	; 4
    4a8c:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_Z13parse_i2c_cmdPch>
    4a90:	81 11       	cpse	r24, r1
    4a92:	07 c0       	rjmp	.+14     	; 0x4aa2 <_Z13readSerialCmdv+0xa2c>
					{
						Serial.println(F_STR("ERROR_2"));
    4a94:	6a ea       	ldi	r22, 0xAA	; 170
    4a96:	72 e1       	ldi	r23, 0x12	; 18
    4a98:	88 ea       	ldi	r24, 0xA8	; 168
    4a9a:	93 e0       	ldi	r25, 0x03	; 3
    4a9c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4aa0:	0c c3       	rjmp	.+1560   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					if(i2c_cmd_structure.decoded_byte_count != i2c_cmd_structure.byte_count)
    4aa2:	ea e5       	ldi	r30, 0x5A	; 90
    4aa4:	f4 e0       	ldi	r31, 0x04	; 4
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	82 81       	ldd	r24, Z+2	; 0x02
    4aaa:	98 17       	cp	r25, r24
    4aac:	39 f0       	breq	.+14     	; 0x4abc <_Z13readSerialCmdv+0xa46>
					{
						Serial.println(F_STR("ERROR! Byte Count doesn't match number of bytes"));
    4aae:	6a e7       	ldi	r22, 0x7A	; 122
    4ab0:	72 e1       	ldi	r23, 0x12	; 18
    4ab2:	88 ea       	ldi	r24, 0xA8	; 168
    4ab4:	93 e0       	ldi	r25, 0x03	; 3
    4ab6:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						
						#ifndef	PRINT_DEBUG_MSG 
							return;
    4aba:	ff c2       	rjmp	.+1534   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						#endif
					}
					if (!i2c_ping(i2c_cmd_structure.device_address))
    4abc:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <i2c_cmd_structure>
    4ac0:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z8i2c_pingh>
    4ac4:	81 11       	cpse	r24, r1
    4ac6:	07 c0       	rjmp	.+14     	; 0x4ad6 <_Z13readSerialCmdv+0xa60>
					{
						Serial.println(F_STR("ERROR! Device Not Found/Respoding"));
    4ac8:	68 e5       	ldi	r22, 0x58	; 88
    4aca:	72 e1       	ldi	r23, 0x12	; 18
    4acc:	88 ea       	ldi	r24, 0xA8	; 168
    4ace:	93 e0       	ldi	r25, 0x03	; 3
    4ad0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4ad4:	f2 c2       	rjmp	.+1508   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					uint8_t status = i2c_write(i2c_cmd_structure.device_address,i2c_cmd_structure.register_address,i2c_cmd_structure.data,i2c_cmd_structure.decoded_byte_count);
    4ad6:	ea e5       	ldi	r30, 0x5A	; 90
    4ad8:	f4 e0       	ldi	r31, 0x04	; 4
    4ada:	23 81       	ldd	r18, Z+3	; 0x03
    4adc:	4e e5       	ldi	r20, 0x5E	; 94
    4ade:	54 e0       	ldi	r21, 0x04	; 4
    4ae0:	61 81       	ldd	r22, Z+1	; 0x01
    4ae2:	80 81       	ld	r24, Z
    4ae4:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_Z9i2c_writehhPhh>
    4ae8:	18 2f       	mov	r17, r24
					if(status)
    4aea:	88 23       	and	r24, r24
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <_Z13readSerialCmdv+0xa7a>
    4aee:	0d c1       	rjmp	.+538    	; 0x4d0a <_Z13readSerialCmdv+0xc94>
					{
						Serial.print(F_STR("Status: "));
    4af0:	6f e4       	ldi	r22, 0x4F	; 79
    4af2:	72 e1       	ldi	r23, 0x12	; 18
    4af4:	88 ea       	ldi	r24, 0xA8	; 168
    4af6:	93 e0       	ldi	r25, 0x03	; 3
    4af8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
						Serial.println(status);
    4afc:	4a e0       	ldi	r20, 0x0A	; 10
    4afe:	50 e0       	ldi	r21, 0x00	; 0
    4b00:	61 2f       	mov	r22, r17
    4b02:	88 ea       	ldi	r24, 0xA8	; 168
    4b04:	93 e0       	ldi	r25, 0x03	; 3
    4b06:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
						Serial.println(F_STR("Data Written Successfully"));
    4b0a:	65 e3       	ldi	r22, 0x35	; 53
    4b0c:	72 e1       	ldi	r23, 0x12	; 18
    4b0e:	88 ea       	ldi	r24, 0xA8	; 168
    4b10:	93 e0       	ldi	r25, 0x03	; 3
    4b12:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4b16:	f9 c0       	rjmp	.+498    	; 0x4d0a <_Z13readSerialCmdv+0xc94>
					}
				}
				else if(strncmp_P(btCmdReplyBuffer,cmd22,7)==0)
    4b18:	47 e0       	ldi	r20, 0x07	; 7
    4b1a:	50 e0       	ldi	r21, 0x00	; 0
    4b1c:	63 ec       	ldi	r22, 0xC3	; 195
    4b1e:	74 e1       	ldi	r23, 0x14	; 20
    4b20:	8f e7       	ldi	r24, 0x7F	; 127
    4b22:	94 e0       	ldi	r25, 0x04	; 4
    4b24:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4b28:	89 2b       	or	r24, r25
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <_Z13readSerialCmdv+0xab8>
    4b2c:	7b c0       	rjmp	.+246    	; 0x4c24 <_Z13readSerialCmdv+0xbae>
				{
					if(!parse_i2c_cmd(btCmdReplyBuffer,I2C_READ_CMD))
    4b2e:	61 e0       	ldi	r22, 0x01	; 1
    4b30:	8f e7       	ldi	r24, 0x7F	; 127
    4b32:	94 e0       	ldi	r25, 0x04	; 4
    4b34:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_Z13parse_i2c_cmdPch>
    4b38:	81 11       	cpse	r24, r1
    4b3a:	07 c0       	rjmp	.+14     	; 0x4b4a <_Z13readSerialCmdv+0xad4>
					{
						Serial.println(F_STR("ERROR_2"));
    4b3c:	6d e2       	ldi	r22, 0x2D	; 45
    4b3e:	72 e1       	ldi	r23, 0x12	; 18
    4b40:	88 ea       	ldi	r24, 0xA8	; 168
    4b42:	93 e0       	ldi	r25, 0x03	; 3
    4b44:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4b48:	b8 c2       	rjmp	.+1392   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					if (i2c_cmd_structure.byte_count > 8 || i2c_cmd_structure.byte_count == 0)
    4b4a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <i2c_cmd_structure+0x2>
    4b4e:	81 50       	subi	r24, 0x01	; 1
    4b50:	88 30       	cpi	r24, 0x08	; 8
    4b52:	38 f0       	brcs	.+14     	; 0x4b62 <_Z13readSerialCmdv+0xaec>
					{
						Serial.println(F_STR("ERROR! Cannot read more than 8 bytes in one shot."));
    4b54:	6b ef       	ldi	r22, 0xFB	; 251
    4b56:	71 e1       	ldi	r23, 0x11	; 17
    4b58:	88 ea       	ldi	r24, 0xA8	; 168
    4b5a:	93 e0       	ldi	r25, 0x03	; 3
    4b5c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						
						#ifndef	PRINT_DEBUG_MSG
							return;
    4b60:	ac c2       	rjmp	.+1368   	; 0x50ba <_Z13readSerialCmdv+0x1044>
						#endif
					}
					if (!i2c_ping(i2c_cmd_structure.device_address))
    4b62:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <i2c_cmd_structure>
    4b66:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z8i2c_pingh>
    4b6a:	81 11       	cpse	r24, r1
    4b6c:	07 c0       	rjmp	.+14     	; 0x4b7c <_Z13readSerialCmdv+0xb06>
					{
						Serial.println(F_STR("ERROR! Device Not Found/Respoding"));
    4b6e:	69 ed       	ldi	r22, 0xD9	; 217
    4b70:	71 e1       	ldi	r23, 0x11	; 17
    4b72:	88 ea       	ldi	r24, 0xA8	; 168
    4b74:	93 e0       	ldi	r25, 0x03	; 3
    4b76:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4b7a:	9f c2       	rjmp	.+1342   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					uint8_t status = i2c_read(i2c_cmd_structure.device_address,i2c_cmd_structure.register_address,i2c_cmd_structure.data,i2c_cmd_structure.byte_count);
    4b7c:	ea e5       	ldi	r30, 0x5A	; 90
    4b7e:	f4 e0       	ldi	r31, 0x04	; 4
    4b80:	22 81       	ldd	r18, Z+2	; 0x02
    4b82:	4e e5       	ldi	r20, 0x5E	; 94
    4b84:	54 e0       	ldi	r21, 0x04	; 4
    4b86:	61 81       	ldd	r22, Z+1	; 0x01
    4b88:	80 81       	ld	r24, Z
    4b8a:	0e 94 0f 18 	call	0x301e	; 0x301e <_Z8i2c_readhhPhh>
    4b8e:	18 2f       	mov	r17, r24
					
					if (status)
    4b90:	88 23       	and	r24, r24
    4b92:	09 f4       	brne	.+2      	; 0x4b96 <_Z13readSerialCmdv+0xb20>
    4b94:	40 c0       	rjmp	.+128    	; 0x4c16 <_Z13readSerialCmdv+0xba0>
					{
						Serial.print(F_STR("Status: "));
    4b96:	60 ed       	ldi	r22, 0xD0	; 208
    4b98:	71 e1       	ldi	r23, 0x11	; 17
    4b9a:	88 ea       	ldi	r24, 0xA8	; 168
    4b9c:	93 e0       	ldi	r25, 0x03	; 3
    4b9e:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
						Serial.println(status);
    4ba2:	4a e0       	ldi	r20, 0x0A	; 10
    4ba4:	50 e0       	ldi	r21, 0x00	; 0
    4ba6:	61 2f       	mov	r22, r17
    4ba8:	88 ea       	ldi	r24, 0xA8	; 168
    4baa:	93 e0       	ldi	r25, 0x03	; 3
    4bac:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN5Print7printlnEhi>
						//Serial.print(F_STR("Data Read:"));
						Serial.print(F_STR("Data Read:\r\n"));
    4bb0:	63 ec       	ldi	r22, 0xC3	; 195
    4bb2:	71 e1       	ldi	r23, 0x11	; 17
    4bb4:	88 ea       	ldi	r24, 0xA8	; 168
    4bb6:	93 e0       	ldi	r25, 0x03	; 3
    4bb8:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
						for(uint8_t i=0;i<i2c_cmd_structure.byte_count;i++)
    4bbc:	10 e0       	ldi	r17, 0x00	; 0
    4bbe:	0f 2e       	mov	r0, r31
    4bc0:	fa e5       	ldi	r31, 0x5A	; 90
    4bc2:	cf 2e       	mov	r12, r31
    4bc4:	f4 e0       	ldi	r31, 0x04	; 4
    4bc6:	df 2e       	mov	r13, r31
    4bc8:	f0 2d       	mov	r31, r0
    4bca:	f6 01       	movw	r30, r12
    4bcc:	82 81       	ldd	r24, Z+2	; 0x02
    4bce:	18 17       	cp	r17, r24
    4bd0:	08 f0       	brcs	.+2      	; 0x4bd4 <_Z13readSerialCmdv+0xb5e>
    4bd2:	9b c0       	rjmp	.+310    	; 0x4d0a <_Z13readSerialCmdv+0xc94>
						{
							Serial.print(i2c_cmd_structure.data[i],i2c_cmd_structure.type);
    4bd4:	e1 2e       	mov	r14, r17
    4bd6:	f1 2c       	mov	r15, r1
    4bd8:	44 85       	ldd	r20, Z+12	; 0x0c
    4bda:	50 e0       	ldi	r21, 0x00	; 0
    4bdc:	f7 01       	movw	r30, r14
    4bde:	e6 5a       	subi	r30, 0xA6	; 166
    4be0:	fb 4f       	sbci	r31, 0xFB	; 251
    4be2:	64 81       	ldd	r22, Z+4	; 0x04
    4be4:	88 ea       	ldi	r24, 0xA8	; 168
    4be6:	93 e0       	ldi	r25, 0x03	; 3
    4be8:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
							//Serial.print(' ');
							if(i<i2c_cmd_structure.byte_count-1)
    4bec:	f6 01       	movw	r30, r12
    4bee:	82 81       	ldd	r24, Z+2	; 0x02
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	01 97       	sbiw	r24, 0x01	; 1
    4bf4:	e8 16       	cp	r14, r24
    4bf6:	f9 06       	cpc	r15, r25
    4bf8:	34 f4       	brge	.+12     	; 0x4c06 <_Z13readSerialCmdv+0xb90>
								Serial.print(',');
    4bfa:	6c e2       	ldi	r22, 0x2C	; 44
    4bfc:	88 ea       	ldi	r24, 0xA8	; 168
    4bfe:	93 e0       	ldi	r25, 0x03	; 3
    4c00:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    4c04:	06 c0       	rjmp	.+12     	; 0x4c12 <_Z13readSerialCmdv+0xb9c>
							else Serial.print("\r\n");
    4c06:	63 e5       	ldi	r22, 0x53	; 83
    4c08:	73 e0       	ldi	r23, 0x03	; 3
    4c0a:	88 ea       	ldi	r24, 0xA8	; 168
    4c0c:	93 e0       	ldi	r25, 0x03	; 3
    4c0e:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
					{
						Serial.print(F_STR("Status: "));
						Serial.println(status);
						//Serial.print(F_STR("Data Read:"));
						Serial.print(F_STR("Data Read:\r\n"));
						for(uint8_t i=0;i<i2c_cmd_structure.byte_count;i++)
    4c12:	1f 5f       	subi	r17, 0xFF	; 255
    4c14:	da cf       	rjmp	.-76     	; 0x4bca <_Z13readSerialCmdv+0xb54>
							else Serial.print("\r\n");
						}
					}
					else
					{
						Serial.println(F_STR("ERROR_3"));
    4c16:	6b eb       	ldi	r22, 0xBB	; 187
    4c18:	71 e1       	ldi	r23, 0x11	; 17
    4c1a:	88 ea       	ldi	r24, 0xA8	; 168
    4c1c:	93 e0       	ldi	r25, 0x03	; 3
    4c1e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4c22:	4b c2       	rjmp	.+1174   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					
				}
				
				else if(strncmp_P(btCmdReplyBuffer,cmd23,7)==0)
    4c24:	47 e0       	ldi	r20, 0x07	; 7
    4c26:	50 e0       	ldi	r21, 0x00	; 0
    4c28:	6b eb       	ldi	r22, 0xBB	; 187
    4c2a:	74 e1       	ldi	r23, 0x14	; 20
    4c2c:	8f e7       	ldi	r24, 0x7F	; 127
    4c2e:	94 e0       	ldi	r25, 0x04	; 4
    4c30:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4c34:	89 2b       	or	r24, r25
    4c36:	11 f5       	brne	.+68     	; 0x4c7c <_Z13readSerialCmdv+0xc06>
				{
					if(!parse_i2c_cmd(btCmdReplyBuffer,I2C_PING_CMD))
    4c38:	62 e0       	ldi	r22, 0x02	; 2
    4c3a:	8f e7       	ldi	r24, 0x7F	; 127
    4c3c:	94 e0       	ldi	r25, 0x04	; 4
    4c3e:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <_Z13parse_i2c_cmdPch>
    4c42:	81 11       	cpse	r24, r1
    4c44:	07 c0       	rjmp	.+14     	; 0x4c54 <_Z13readSerialCmdv+0xbde>
					{
						Serial.println(F_STR("ERROR_2"));
    4c46:	63 eb       	ldi	r22, 0xB3	; 179
    4c48:	71 e1       	ldi	r23, 0x11	; 17
    4c4a:	88 ea       	ldi	r24, 0xA8	; 168
    4c4c:	93 e0       	ldi	r25, 0x03	; 3
    4c4e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4c52:	33 c2       	rjmp	.+1126   	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					if(i2c_ping(i2c_cmd_structure.device_address))
    4c54:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <i2c_cmd_structure>
    4c58:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z8i2c_pingh>
    4c5c:	88 23       	and	r24, r24
    4c5e:	39 f0       	breq	.+14     	; 0x4c6e <_Z13readSerialCmdv+0xbf8>
					{
						Serial.println(F_STR("Device Responded to Ping"));
    4c60:	6a e9       	ldi	r22, 0x9A	; 154
    4c62:	71 e1       	ldi	r23, 0x11	; 17
    4c64:	88 ea       	ldi	r24, 0xA8	; 168
    4c66:	93 e0       	ldi	r25, 0x03	; 3
    4c68:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4c6c:	4e c0       	rjmp	.+156    	; 0x4d0a <_Z13readSerialCmdv+0xc94>
					}
					else
					{
						Serial.println(F_STR("Device Not Responding to Ping"));
    4c6e:	6c e7       	ldi	r22, 0x7C	; 124
    4c70:	71 e1       	ldi	r23, 0x11	; 17
    4c72:	88 ea       	ldi	r24, 0xA8	; 168
    4c74:	93 e0       	ldi	r25, 0x03	; 3
    4c76:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4c7a:	47 c0       	rjmp	.+142    	; 0x4d0a <_Z13readSerialCmdv+0xc94>
					}
					
				}
				else if (strncmp_P(btCmdReplyBuffer,cmd24,7)==0)
    4c7c:	47 e0       	ldi	r20, 0x07	; 7
    4c7e:	50 e0       	ldi	r21, 0x00	; 0
    4c80:	63 eb       	ldi	r22, 0xB3	; 179
    4c82:	74 e1       	ldi	r23, 0x14	; 20
    4c84:	8f e7       	ldi	r24, 0x7F	; 127
    4c86:	94 e0       	ldi	r25, 0x04	; 4
    4c88:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4c8c:	89 2b       	or	r24, r25
    4c8e:	b9 f5       	brne	.+110    	; 0x4cfe <_Z13readSerialCmdv+0xc88>
				{
					Serial.println(F_STR("Scanning I2C bus..."));
    4c90:	68 e6       	ldi	r22, 0x68	; 104
    4c92:	71 e1       	ldi	r23, 0x11	; 17
    4c94:	88 ea       	ldi	r24, 0xA8	; 168
    4c96:	93 e0       	ldi	r25, 0x03	; 3
    4c98:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(F_STR("Device Address:"));
    4c9c:	68 e5       	ldi	r22, 0x58	; 88
    4c9e:	71 e1       	ldi	r23, 0x11	; 17
    4ca0:	88 ea       	ldi	r24, 0xA8	; 168
    4ca2:	93 e0       	ldi	r25, 0x03	; 3
    4ca4:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
					
					uint8_t count = 0;
					for (uint8_t i=1; i< 128; i++)
    4ca8:	11 e0       	ldi	r17, 0x01	; 1
				else if (strncmp_P(btCmdReplyBuffer,cmd24,7)==0)
				{
					Serial.println(F_STR("Scanning I2C bus..."));
					Serial.print(F_STR("Device Address:"));
					
					uint8_t count = 0;
    4caa:	f1 2c       	mov	r15, r1
					for (uint8_t i=1; i< 128; i++)
					{
						if (i2c_ping(i))
    4cac:	81 2f       	mov	r24, r17
    4cae:	0e 94 59 18 	call	0x30b2	; 0x30b2 <_Z8i2c_pingh>
    4cb2:	88 23       	and	r24, r24
    4cb4:	69 f0       	breq	.+26     	; 0x4cd0 <_Z13readSerialCmdv+0xc5a>
						{
							Serial.print(i,HEX);
    4cb6:	40 e1       	ldi	r20, 0x10	; 16
    4cb8:	50 e0       	ldi	r21, 0x00	; 0
    4cba:	61 2f       	mov	r22, r17
    4cbc:	88 ea       	ldi	r24, 0xA8	; 168
    4cbe:	93 e0       	ldi	r25, 0x03	; 3
    4cc0:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
							Serial.print(' ');
    4cc4:	60 e2       	ldi	r22, 0x20	; 32
    4cc6:	88 ea       	ldi	r24, 0xA8	; 168
    4cc8:	93 e0       	ldi	r25, 0x03	; 3
    4cca:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
							count++;
    4cce:	f3 94       	inc	r15
				{
					Serial.println(F_STR("Scanning I2C bus..."));
					Serial.print(F_STR("Device Address:"));
					
					uint8_t count = 0;
					for (uint8_t i=1; i< 128; i++)
    4cd0:	1f 5f       	subi	r17, 0xFF	; 255
    4cd2:	10 38       	cpi	r17, 0x80	; 128
    4cd4:	59 f7       	brne	.-42     	; 0x4cac <_Z13readSerialCmdv+0xc36>
							count++;
						}
						
					}
					
					Serial.println(F_STR("\r\nScan Complete."));
    4cd6:	67 e4       	ldi	r22, 0x47	; 71
    4cd8:	71 e1       	ldi	r23, 0x11	; 17
    4cda:	88 ea       	ldi	r24, 0xA8	; 168
    4cdc:	93 e0       	ldi	r25, 0x03	; 3
    4cde:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
					Serial.print(count);
    4ce2:	4a e0       	ldi	r20, 0x0A	; 10
    4ce4:	50 e0       	ldi	r21, 0x00	; 0
    4ce6:	6f 2d       	mov	r22, r15
    4ce8:	88 ea       	ldi	r24, 0xA8	; 168
    4cea:	93 e0       	ldi	r25, 0x03	; 3
    4cec:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
					Serial.println(F_STR(" Devices Found."));
    4cf0:	67 e3       	ldi	r22, 0x37	; 55
    4cf2:	71 e1       	ldi	r23, 0x11	; 17
    4cf4:	88 ea       	ldi	r24, 0xA8	; 168
    4cf6:	93 e0       	ldi	r25, 0x03	; 3
    4cf8:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4cfc:	06 c0       	rjmp	.+12     	; 0x4d0a <_Z13readSerialCmdv+0xc94>
						
				}
				else
				{
					Serial.println("ERROR_1");
    4cfe:	60 ea       	ldi	r22, 0xA0	; 160
    4d00:	73 e0       	ldi	r23, 0x03	; 3
    4d02:	88 ea       	ldi	r24, 0xA8	; 168
    4d04:	93 e0       	ldi	r25, 0x03	; 3
    4d06:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <_ZN5Print7printlnEPKc>
				}
				replyOK();
    4d0a:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4d0e:	d5 c1       	rjmp	.+938    	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if (strncmp_P(btCmdReplyBuffer,cmd25,4)==0)
    4d10:	44 e0       	ldi	r20, 0x04	; 4
    4d12:	50 e0       	ldi	r21, 0x00	; 0
    4d14:	6c ea       	ldi	r22, 0xAC	; 172
    4d16:	74 e1       	ldi	r23, 0x14	; 20
    4d18:	8f e7       	ldi	r24, 0x7F	; 127
    4d1a:	94 e0       	ldi	r25, 0x04	; 4
    4d1c:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4d20:	89 2b       	or	r24, r25
    4d22:	61 f5       	brne	.+88     	; 0x4d7c <_Z13readSerialCmdv+0xd06>
			{
				if (strcmp_P(btCmdReplyBuffer,cmd25)==0)
    4d24:	6c ea       	ldi	r22, 0xAC	; 172
    4d26:	74 e1       	ldi	r23, 0x14	; 20
    4d28:	8f e7       	ldi	r24, 0x7F	; 127
    4d2a:	94 e0       	ldi	r25, 0x04	; 4
    4d2c:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4d30:	89 2b       	or	r24, r25
    4d32:	49 f4       	brne	.+18     	; 0x4d46 <_Z13readSerialCmdv+0xcd0>
				{
					case_sensitivity_status = 0;
    4d34:	10 92 78 04 	sts	0x0478, r1	; 0x800478 <case_sensitivity_status>
					Serial.println(F_STR("Case Sensitivity Enabled"));
    4d38:	6e e1       	ldi	r22, 0x1E	; 30
    4d3a:	71 e1       	ldi	r23, 0x11	; 17
    4d3c:	88 ea       	ldi	r24, 0xA8	; 168
    4d3e:	93 e0       	ldi	r25, 0x03	; 3
    4d40:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4d44:	18 c0       	rjmp	.+48     	; 0x4d76 <_Z13readSerialCmdv+0xd00>
				}
				else if (strcmp_P(btCmdReplyBuffer,cmd26)==0)
    4d46:	65 ea       	ldi	r22, 0xA5	; 165
    4d48:	74 e1       	ldi	r23, 0x14	; 20
    4d4a:	8f e7       	ldi	r24, 0x7F	; 127
    4d4c:	94 e0       	ldi	r25, 0x04	; 4
    4d4e:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4d52:	89 2b       	or	r24, r25
    4d54:	51 f4       	brne	.+20     	; 0x4d6a <_Z13readSerialCmdv+0xcf4>
				{
					case_sensitivity_status = 1;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	80 93 78 04 	sts	0x0478, r24	; 0x800478 <case_sensitivity_status>
					Serial.println(F_STR("Case Sensitivity Disabled"));
    4d5c:	64 e0       	ldi	r22, 0x04	; 4
    4d5e:	71 e1       	ldi	r23, 0x11	; 17
    4d60:	88 ea       	ldi	r24, 0xA8	; 168
    4d62:	93 e0       	ldi	r25, 0x03	; 3
    4d64:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4d68:	06 c0       	rjmp	.+12     	; 0x4d76 <_Z13readSerialCmdv+0xd00>
				}
				else
				{
					Serial.println(F_STR("ERROR_1"));
    4d6a:	6c ef       	ldi	r22, 0xFC	; 252
    4d6c:	70 e1       	ldi	r23, 0x10	; 16
    4d6e:	88 ea       	ldi	r24, 0xA8	; 168
    4d70:	93 e0       	ldi	r25, 0x03	; 3
    4d72:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				replyOK();
    4d76:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4d7a:	9f c1       	rjmp	.+830    	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if (strncmp_P(btCmdReplyBuffer,cmd27,7)==0)
    4d7c:	47 e0       	ldi	r20, 0x07	; 7
    4d7e:	50 e0       	ldi	r21, 0x00	; 0
    4d80:	6c e9       	ldi	r22, 0x9C	; 156
    4d82:	74 e1       	ldi	r23, 0x14	; 20
    4d84:	8f e7       	ldi	r24, 0x7F	; 127
    4d86:	94 e0       	ldi	r25, 0x04	; 4
    4d88:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4d8c:	89 2b       	or	r24, r25
    4d8e:	61 f5       	brne	.+88     	; 0x4de8 <_Z13readSerialCmdv+0xd72>
			{
				if (strcmp_P(btCmdReplyBuffer,cmd27)==0)
    4d90:	6c e9       	ldi	r22, 0x9C	; 156
    4d92:	74 e1       	ldi	r23, 0x14	; 20
    4d94:	8f e7       	ldi	r24, 0x7F	; 127
    4d96:	94 e0       	ldi	r25, 0x04	; 4
    4d98:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4d9c:	89 2b       	or	r24, r25
    4d9e:	51 f4       	brne	.+20     	; 0x4db4 <_Z13readSerialCmdv+0xd3e>
				{
					backspace_det = 1;
    4da0:	81 e0       	ldi	r24, 0x01	; 1
    4da2:	80 93 77 04 	sts	0x0477, r24	; 0x800477 <backspace_det>
					Serial.println(F_STR("Backspace detection Enabled"));
    4da6:	60 ee       	ldi	r22, 0xE0	; 224
    4da8:	70 e1       	ldi	r23, 0x10	; 16
    4daa:	88 ea       	ldi	r24, 0xA8	; 168
    4dac:	93 e0       	ldi	r25, 0x03	; 3
    4dae:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4db2:	17 c0       	rjmp	.+46     	; 0x4de2 <_Z13readSerialCmdv+0xd6c>
				}
				else if (strcmp_P(btCmdReplyBuffer,cmd28)==0)
    4db4:	63 e9       	ldi	r22, 0x93	; 147
    4db6:	74 e1       	ldi	r23, 0x14	; 20
    4db8:	8f e7       	ldi	r24, 0x7F	; 127
    4dba:	94 e0       	ldi	r25, 0x04	; 4
    4dbc:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4dc0:	89 2b       	or	r24, r25
    4dc2:	49 f4       	brne	.+18     	; 0x4dd6 <_Z13readSerialCmdv+0xd60>
				{
					backspace_det = 0;
    4dc4:	10 92 77 04 	sts	0x0477, r1	; 0x800477 <backspace_det>
					Serial.println(F_STR("Backspace detection Disabled"));
    4dc8:	63 ec       	ldi	r22, 0xC3	; 195
    4dca:	70 e1       	ldi	r23, 0x10	; 16
    4dcc:	88 ea       	ldi	r24, 0xA8	; 168
    4dce:	93 e0       	ldi	r25, 0x03	; 3
    4dd0:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4dd4:	06 c0       	rjmp	.+12     	; 0x4de2 <_Z13readSerialCmdv+0xd6c>
				}
				else
				{
					Serial.println(F_STR("ERROR_1"));
    4dd6:	6b eb       	ldi	r22, 0xBB	; 187
    4dd8:	70 e1       	ldi	r23, 0x10	; 16
    4dda:	88 ea       	ldi	r24, 0xA8	; 168
    4ddc:	93 e0       	ldi	r25, 0x03	; 3
    4dde:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				replyOK();
    4de2:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    4de6:	69 c1       	rjmp	.+722    	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			
			else if (strncmp_P(btCmdReplyBuffer,cmd34,4)==0)
    4de8:	44 e0       	ldi	r20, 0x04	; 4
    4dea:	50 e0       	ldi	r21, 0x00	; 0
    4dec:	6e e5       	ldi	r22, 0x5E	; 94
    4dee:	74 e1       	ldi	r23, 0x14	; 20
    4df0:	8f e7       	ldi	r24, 0x7F	; 127
    4df2:	94 e0       	ldi	r25, 0x04	; 4
    4df4:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4df8:	89 2b       	or	r24, r25
    4dfa:	09 f0       	breq	.+2      	; 0x4dfe <_Z13readSerialCmdv+0xd88>
    4dfc:	37 c1       	rjmp	.+622    	; 0x506c <_Z13readSerialCmdv+0xff6>
			{
				if (strcmp_P(btCmdReplyBuffer,cmd34)==0)
    4dfe:	6e e5       	ldi	r22, 0x5E	; 94
    4e00:	74 e1       	ldi	r23, 0x14	; 20
    4e02:	8f e7       	ldi	r24, 0x7F	; 127
    4e04:	94 e0       	ldi	r25, 0x04	; 4
    4e06:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4e0a:	89 2b       	or	r24, r25
    4e0c:	49 f4       	brne	.+18     	; 0x4e20 <_Z13readSerialCmdv+0xdaa>
				{
					SPI.begin();
    4e0e:	0e 94 83 28 	call	0x5106	; 0x5106 <_ZN8SPIClass5beginEv>
					Serial.println(F_STR("SPI Enabled"));
    4e12:	6f ea       	ldi	r22, 0xAF	; 175
    4e14:	70 e1       	ldi	r23, 0x10	; 16
    4e16:	88 ea       	ldi	r24, 0xA8	; 168
    4e18:	93 e0       	ldi	r25, 0x03	; 3
    4e1a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4e1e:	23 c1       	rjmp	.+582    	; 0x5066 <_Z13readSerialCmdv+0xff0>
				}
				else if (strcmp_P(btCmdReplyBuffer,cmd35)==0)
    4e20:	66 e5       	ldi	r22, 0x56	; 86
    4e22:	74 e1       	ldi	r23, 0x14	; 20
    4e24:	8f e7       	ldi	r24, 0x7F	; 127
    4e26:	94 e0       	ldi	r25, 0x04	; 4
    4e28:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    4e2c:	89 2b       	or	r24, r25
    4e2e:	49 f4       	brne	.+18     	; 0x4e42 <_Z13readSerialCmdv+0xdcc>
				{
					SPI.end();
    4e30:	0e 94 a2 28 	call	0x5144	; 0x5144 <_ZN8SPIClass3endEv>
					Serial.println(F_STR("SPI Disabled"));
    4e34:	62 ea       	ldi	r22, 0xA2	; 162
    4e36:	70 e1       	ldi	r23, 0x10	; 16
    4e38:	88 ea       	ldi	r24, 0xA8	; 168
    4e3a:	93 e0       	ldi	r25, 0x03	; 3
    4e3c:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4e40:	12 c1       	rjmp	.+548    	; 0x5066 <_Z13readSerialCmdv+0xff0>
				}
				else if (strncmp_P(btCmdReplyBuffer,cmd29,10)==0)
    4e42:	4a e0       	ldi	r20, 0x0A	; 10
    4e44:	50 e0       	ldi	r21, 0x00	; 0
    4e46:	68 e8       	ldi	r22, 0x88	; 136
    4e48:	74 e1       	ldi	r23, 0x14	; 20
    4e4a:	8f e7       	ldi	r24, 0x7F	; 127
    4e4c:	94 e0       	ldi	r25, 0x04	; 4
    4e4e:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4e52:	89 2b       	or	r24, r25
    4e54:	e9 f4       	brne	.+58     	; 0x4e90 <_Z13readSerialCmdv+0xe1a>
				{
					if (parse_spi_cmd(btCmdReplyBuffer,SPI_CONFIG_CMD))
    4e56:	62 e0       	ldi	r22, 0x02	; 2
    4e58:	8f e7       	ldi	r24, 0x7F	; 127
    4e5a:	94 e0       	ldi	r25, 0x04	; 4
    4e5c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_Z13parse_spi_cmdPch>
    4e60:	88 23       	and	r24, r24
    4e62:	79 f0       	breq	.+30     	; 0x4e82 <_Z13readSerialCmdv+0xe0c>
					{
						SPI.setBitOrder(spi_config.spiDataOrder);
    4e64:	02 e7       	ldi	r16, 0x72	; 114
    4e66:	14 e0       	ldi	r17, 0x04	; 4
    4e68:	f8 01       	movw	r30, r16
    4e6a:	83 81       	ldd	r24, Z+3	; 0x03
    4e6c:	0e 94 a6 28 	call	0x514c	; 0x514c <_ZN8SPIClass11setBitOrderEh>
						SPI.setClockDivider(spi_config.spiClkDiv);
    4e70:	f8 01       	movw	r30, r16
    4e72:	84 81       	ldd	r24, Z+4	; 0x04
    4e74:	0e 94 b5 28 	call	0x516a	; 0x516a <_ZN8SPIClass15setClockDividerEh>
						SPI.setDataMode(spi_config.spiMode);
    4e78:	f8 01       	movw	r30, r16
    4e7a:	82 81       	ldd	r24, Z+2	; 0x02
    4e7c:	0e 94 b0 28 	call	0x5160	; 0x5160 <_ZN8SPIClass11setDataModeEh>
    4e80:	f2 c0       	rjmp	.+484    	; 0x5066 <_Z13readSerialCmdv+0xff0>
					}
					else
					{
						Serial.println(F_STR("ERROR_2"));
    4e82:	6a e9       	ldi	r22, 0x9A	; 154
    4e84:	70 e1       	ldi	r23, 0x10	; 16
    4e86:	88 ea       	ldi	r24, 0xA8	; 168
    4e88:	93 e0       	ldi	r25, 0x03	; 3
    4e8a:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4e8e:	15 c1       	rjmp	.+554    	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					
				}
				else if (strncmp_P(btCmdReplyBuffer,cmd30,9)==0)
    4e90:	49 e0       	ldi	r20, 0x09	; 9
    4e92:	50 e0       	ldi	r21, 0x00	; 0
    4e94:	6e e7       	ldi	r22, 0x7E	; 126
    4e96:	74 e1       	ldi	r23, 0x14	; 20
    4e98:	8f e7       	ldi	r24, 0x7F	; 127
    4e9a:	94 e0       	ldi	r25, 0x04	; 4
    4e9c:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4ea0:	89 2b       	or	r24, r25
    4ea2:	09 f0       	breq	.+2      	; 0x4ea6 <_Z13readSerialCmdv+0xe30>
    4ea4:	49 c0       	rjmp	.+146    	; 0x4f38 <_Z13readSerialCmdv+0xec2>
				{
					if (SPI.isSPIenabled()==0)
    4ea6:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN8SPIClass12isSPIenabledEv>
    4eaa:	81 11       	cpse	r24, r1
    4eac:	07 c0       	rjmp	.+14     	; 0x4ebc <_Z13readSerialCmdv+0xe46>
					{
						Serial.println(F_STR("ERROR! Enable SPI first"));
    4eae:	62 e8       	ldi	r22, 0x82	; 130
    4eb0:	70 e1       	ldi	r23, 0x10	; 16
    4eb2:	88 ea       	ldi	r24, 0xA8	; 168
    4eb4:	93 e0       	ldi	r25, 0x03	; 3
    4eb6:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4eba:	ff c0       	rjmp	.+510    	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					if(parse_spi_cmd(btCmdReplyBuffer,SPI_WRITE_CMD))
    4ebc:	60 e0       	ldi	r22, 0x00	; 0
    4ebe:	8f e7       	ldi	r24, 0x7F	; 127
    4ec0:	94 e0       	ldi	r25, 0x04	; 4
    4ec2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_Z13parse_spi_cmdPch>
    4ec6:	88 23       	and	r24, r24
    4ec8:	81 f1       	breq	.+96     	; 0x4f2a <_Z13readSerialCmdv+0xeb4>
					{
						if (spi_cmd_structure.byte_count != spi_cmd_structure.decoded_byte_count)
    4eca:	e7 e6       	ldi	r30, 0x67	; 103
    4ecc:	f4 e0       	ldi	r31, 0x04	; 4
    4ece:	80 81       	ld	r24, Z
    4ed0:	91 81       	ldd	r25, Z+1	; 0x01
    4ed2:	89 17       	cp	r24, r25
    4ed4:	39 f0       	breq	.+14     	; 0x4ee4 <_Z13readSerialCmdv+0xe6e>
						{
							Serial.println(F_STR("ERROR! Byte Count doesn't match number of bytes"));
    4ed6:	62 e5       	ldi	r22, 0x52	; 82
    4ed8:	70 e1       	ldi	r23, 0x10	; 16
    4eda:	88 ea       	ldi	r24, 0xA8	; 168
    4edc:	93 e0       	ldi	r25, 0x03	; 3
    4ede:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							
							#ifndef	PRINT_DEBUG_MSG
								return;
    4ee2:	eb c0       	rjmp	.+470    	; 0x50ba <_Z13readSerialCmdv+0x1044>
							#endif
						}
						
						if (spi_cmd_structure.byte_count > 8 || spi_cmd_structure.byte_count == 0)
    4ee4:	81 50       	subi	r24, 0x01	; 1
    4ee6:	88 30       	cpi	r24, 0x08	; 8
    4ee8:	38 f0       	brcs	.+14     	; 0x4ef8 <_Z13readSerialCmdv+0xe82>
						{
							Serial.println(F_STR("ERROR! Cannot Process more than 8 bytes in one shot."));
    4eea:	6d e1       	ldi	r22, 0x1D	; 29
    4eec:	70 e1       	ldi	r23, 0x10	; 16
    4eee:	88 ea       	ldi	r24, 0xA8	; 168
    4ef0:	93 e0       	ldi	r25, 0x03	; 3
    4ef2:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							
							#ifndef	PRINT_DEBUG_MSG
								return;
    4ef6:	e1 c0       	rjmp	.+450    	; 0x50ba <_Z13readSerialCmdv+0x1044>
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
							#endif
						}
						
						for(uint8_t i=0;i<spi_cmd_structure.byte_count;i++)
    4efa:	a7 e6       	ldi	r26, 0x67	; 103
    4efc:	b4 e0       	ldi	r27, 0x04	; 4
    4efe:	9c 91       	ld	r25, X
    4f00:	89 17       	cp	r24, r25
    4f02:	60 f4       	brcc	.+24     	; 0x4f1c <_Z13readSerialCmdv+0xea6>
						{
							SPI.transfer(spi_cmd_structure.data[i]);
    4f04:	e8 2f       	mov	r30, r24
    4f06:	f0 e0       	ldi	r31, 0x00	; 0
    4f08:	e9 59       	subi	r30, 0x99	; 153
    4f0a:	fb 4f       	sbci	r31, 0xFB	; 251
    4f0c:	92 81       	ldd	r25, Z+2	; 0x02
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4f0e:	9e bd       	out	0x2e, r25	; 46
  while (!(SPSR & _BV(SPIF)))
    4f10:	0d b4       	in	r0, 0x2d	; 45
    4f12:	07 fe       	sbrs	r0, 7
    4f14:	fd cf       	rjmp	.-6      	; 0x4f10 <_Z13readSerialCmdv+0xe9a>
    ;
  return SPDR;
    4f16:	9e b5       	in	r25, 0x2e	; 46
							#ifndef	PRINT_DEBUG_MSG
								return;
							#endif
						}
						
						for(uint8_t i=0;i<spi_cmd_structure.byte_count;i++)
    4f18:	8f 5f       	subi	r24, 0xFF	; 255
    4f1a:	f1 cf       	rjmp	.-30     	; 0x4efe <_Z13readSerialCmdv+0xe88>
						{
							SPI.transfer(spi_cmd_structure.data[i]);
						}
						Serial.println(F_STR("Data Sent"));
    4f1c:	63 e1       	ldi	r22, 0x13	; 19
    4f1e:	70 e1       	ldi	r23, 0x10	; 16
    4f20:	88 ea       	ldi	r24, 0xA8	; 168
    4f22:	93 e0       	ldi	r25, 0x03	; 3
    4f24:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
    4f28:	9e c0       	rjmp	.+316    	; 0x5066 <_Z13readSerialCmdv+0xff0>
						
					}
					else
					{
						Serial.println(F_STR("ERROR_2"));
    4f2a:	6b e0       	ldi	r22, 0x0B	; 11
    4f2c:	70 e1       	ldi	r23, 0x10	; 16
    4f2e:	88 ea       	ldi	r24, 0xA8	; 168
    4f30:	93 e0       	ldi	r25, 0x03	; 3
    4f32:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;					
    4f36:	c1 c0       	rjmp	.+386    	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
			
				}
				else if (strncmp_P(btCmdReplyBuffer,cmd33,8)==0)
    4f38:	48 e0       	ldi	r20, 0x08	; 8
    4f3a:	50 e0       	ldi	r21, 0x00	; 0
    4f3c:	65 e6       	ldi	r22, 0x65	; 101
    4f3e:	74 e1       	ldi	r23, 0x14	; 20
    4f40:	8f e7       	ldi	r24, 0x7F	; 127
    4f42:	94 e0       	ldi	r25, 0x04	; 4
    4f44:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <strncmp_P>
    4f48:	89 2b       	or	r24, r25
    4f4a:	09 f0       	breq	.+2      	; 0x4f4e <_Z13readSerialCmdv+0xed8>
    4f4c:	60 c0       	rjmp	.+192    	; 0x500e <_Z13readSerialCmdv+0xf98>
				{
					if (SPI.isSPIenabled()==0)
    4f4e:	0e 94 c4 28 	call	0x5188	; 0x5188 <_ZN8SPIClass12isSPIenabledEv>
    4f52:	81 11       	cpse	r24, r1
    4f54:	07 c0       	rjmp	.+14     	; 0x4f64 <_Z13readSerialCmdv+0xeee>
					{
						Serial.println(F_STR("ERROR! Enable SPI first"));
    4f56:	63 ef       	ldi	r22, 0xF3	; 243
    4f58:	7f e0       	ldi	r23, 0x0F	; 15
    4f5a:	88 ea       	ldi	r24, 0xA8	; 168
    4f5c:	93 e0       	ldi	r25, 0x03	; 3
    4f5e:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    4f62:	ab c0       	rjmp	.+342    	; 0x50ba <_Z13readSerialCmdv+0x1044>
					}
					
					
					if(parse_spi_cmd(btCmdReplyBuffer,SPI_READ_CMD))
    4f64:	61 e0       	ldi	r22, 0x01	; 1
    4f66:	8f e7       	ldi	r24, 0x7F	; 127
    4f68:	94 e0       	ldi	r25, 0x04	; 4
    4f6a:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_Z13parse_spi_cmdPch>
    4f6e:	88 23       	and	r24, r24
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <_Z13readSerialCmdv+0xefe>
    4f72:	46 c0       	rjmp	.+140    	; 0x5000 <_Z13readSerialCmdv+0xf8a>
					{
						if (spi_cmd_structure.byte_count > 8 || spi_cmd_structure.byte_count == 0)
    4f74:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <spi_cmd_structure>
    4f78:	81 50       	subi	r24, 0x01	; 1
    4f7a:	88 30       	cpi	r24, 0x08	; 8
    4f7c:	38 f0       	brcs	.+14     	; 0x4f8c <_Z13readSerialCmdv+0xf16>
						{
							Serial.println(F_STR("ERROR! Cannot Process more than 8 bytes in one shot."));
    4f7e:	6e eb       	ldi	r22, 0xBE	; 190
    4f80:	7f e0       	ldi	r23, 0x0F	; 15
    4f82:	88 ea       	ldi	r24, 0xA8	; 168
    4f84:	93 e0       	ldi	r25, 0x03	; 3
    4f86:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
							
							#ifndef	PRINT_DEBUG_MSG
								return;
    4f8a:	97 c0       	rjmp	.+302    	; 0x50ba <_Z13readSerialCmdv+0x1044>
							#endif
						}
						
						
						Serial.print(F_STR("Data Read:\r\n"));
    4f8c:	61 eb       	ldi	r22, 0xB1	; 177
    4f8e:	7f e0       	ldi	r23, 0x0F	; 15
    4f90:	88 ea       	ldi	r24, 0xA8	; 168
    4f92:	93 e0       	ldi	r25, 0x03	; 3
    4f94:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
						for(uint8_t i=0;i<spi_cmd_structure.byte_count;i++)
    4f98:	10 e0       	ldi	r17, 0x00	; 0
    4f9a:	0f 2e       	mov	r0, r31
    4f9c:	f7 e6       	ldi	r31, 0x67	; 103
    4f9e:	ef 2e       	mov	r14, r31
    4fa0:	f4 e0       	ldi	r31, 0x04	; 4
    4fa2:	ff 2e       	mov	r15, r31
    4fa4:	f0 2d       	mov	r31, r0
};

extern SPIClass SPI;

byte SPIClass::transfer(byte _data) {
  SPDR = _data;
    4fa6:	0f ef       	ldi	r16, 0xFF	; 255
    4fa8:	f7 01       	movw	r30, r14
    4faa:	80 81       	ld	r24, Z
    4fac:	18 17       	cp	r17, r24
    4fae:	08 f0       	brcs	.+2      	; 0x4fb2 <_Z13readSerialCmdv+0xf3c>
    4fb0:	5a c0       	rjmp	.+180    	; 0x5066 <_Z13readSerialCmdv+0xff0>
						{
							spi_cmd_structure.data[i] = SPI.transfer(0xff);//read data
    4fb2:	c1 2e       	mov	r12, r17
    4fb4:	d1 2c       	mov	r13, r1
    4fb6:	0e bd       	out	0x2e, r16	; 46
  while (!(SPSR & _BV(SPIF)))
    4fb8:	0d b4       	in	r0, 0x2d	; 45
    4fba:	07 fe       	sbrs	r0, 7
    4fbc:	fd cf       	rjmp	.-6      	; 0x4fb8 <_Z13readSerialCmdv+0xf42>
    ;
  return SPDR;
    4fbe:	6e b5       	in	r22, 0x2e	; 46
    4fc0:	f6 01       	movw	r30, r12
    4fc2:	e9 59       	subi	r30, 0x99	; 153
    4fc4:	fb 4f       	sbci	r31, 0xFB	; 251
    4fc6:	62 83       	std	Z+2, r22	; 0x02
							Serial.print(spi_cmd_structure.data[i],spi_cmd_structure.type);
    4fc8:	f7 01       	movw	r30, r14
    4fca:	42 85       	ldd	r20, Z+10	; 0x0a
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	88 ea       	ldi	r24, 0xA8	; 168
    4fd0:	93 e0       	ldi	r25, 0x03	; 3
    4fd2:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN5Print5printEhi>
							if(i<spi_cmd_structure.byte_count-1)
    4fd6:	f7 01       	movw	r30, r14
    4fd8:	80 81       	ld	r24, Z
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	01 97       	sbiw	r24, 0x01	; 1
    4fde:	c8 16       	cp	r12, r24
    4fe0:	d9 06       	cpc	r13, r25
    4fe2:	34 f4       	brge	.+12     	; 0x4ff0 <_Z13readSerialCmdv+0xf7a>
							Serial.print(',');
    4fe4:	6c e2       	ldi	r22, 0x2C	; 44
    4fe6:	88 ea       	ldi	r24, 0xA8	; 168
    4fe8:	93 e0       	ldi	r25, 0x03	; 3
    4fea:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <_ZN5Print5printEc>
    4fee:	06 c0       	rjmp	.+12     	; 0x4ffc <_Z13readSerialCmdv+0xf86>
							else Serial.print("\r\n");
    4ff0:	63 e5       	ldi	r22, 0x53	; 83
    4ff2:	73 e0       	ldi	r23, 0x03	; 3
    4ff4:	88 ea       	ldi	r24, 0xA8	; 168
    4ff6:	93 e0       	ldi	r25, 0x03	; 3
    4ff8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <_ZN5Print5printEPKc>
							#endif
						}
						
						
						Serial.print(F_STR("Data Read:\r\n"));
						for(uint8_t i=0;i<spi_cmd_structure.byte_count;i++)
    4ffc:	1f 5f       	subi	r17, 0xFF	; 255
    4ffe:	d4 cf       	rjmp	.-88     	; 0x4fa8 <_Z13readSerialCmdv+0xf32>
						}
										
					}
					else
					{
						Serial.println(F_STR("ERROR_2"));
    5000:	69 ea       	ldi	r22, 0xA9	; 169
    5002:	7f e0       	ldi	r23, 0x0F	; 15
    5004:	88 ea       	ldi	r24, 0xA8	; 168
    5006:	93 e0       	ldi	r25, 0x03	; 3
    5008:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
						return;
    500c:	56 c0       	rjmp	.+172    	; 0x50ba <_Z13readSerialCmdv+0x1044>

					}
					
				}
				else if (strcmp_P(btCmdReplyBuffer,cmd31)==0)
    500e:	66 e7       	ldi	r22, 0x76	; 118
    5010:	74 e1       	ldi	r23, 0x14	; 20
    5012:	8f e7       	ldi	r24, 0x7F	; 127
    5014:	94 e0       	ldi	r25, 0x04	; 4
    5016:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    501a:	89 2b       	or	r24, r25
    501c:	59 f4       	brne	.+22     	; 0x5034 <_Z13readSerialCmdv+0xfbe>
				{
					GPIO CS(spi_config.cs_pin);
    501e:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <spi_config>
    5022:	ce 01       	movw	r24, r28
    5024:	08 96       	adiw	r24, 0x08	; 8
    5026:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
					CS.High();
    502a:	ce 01       	movw	r24, r28
    502c:	08 96       	adiw	r24, 0x08	; 8
    502e:	0e 94 27 13 	call	0x264e	; 0x264e <_ZN4GPIO4HighEv>
    5032:	19 c0       	rjmp	.+50     	; 0x5066 <_Z13readSerialCmdv+0xff0>
				}
				else if (strcmp_P(btCmdReplyBuffer,cmd32)==0)
    5034:	6e e6       	ldi	r22, 0x6E	; 110
    5036:	74 e1       	ldi	r23, 0x14	; 20
    5038:	8f e7       	ldi	r24, 0x7F	; 127
    503a:	94 e0       	ldi	r25, 0x04	; 4
    503c:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    5040:	89 2b       	or	r24, r25
    5042:	59 f4       	brne	.+22     	; 0x505a <_Z13readSerialCmdv+0xfe4>
				{
					GPIO CS(spi_config.cs_pin);
    5044:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <spi_config>
    5048:	ce 01       	movw	r24, r28
    504a:	08 96       	adiw	r24, 0x08	; 8
    504c:	0e 94 b0 13 	call	0x2760	; 0x2760 <_ZN4GPIOC1Eh>
					CS.Low();
    5050:	ce 01       	movw	r24, r28
    5052:	08 96       	adiw	r24, 0x08	; 8
    5054:	0e 94 3a 13 	call	0x2674	; 0x2674 <_ZN4GPIO3LowEv>
    5058:	06 c0       	rjmp	.+12     	; 0x5066 <_Z13readSerialCmdv+0xff0>
				}
				
				else
				{
					Serial.println(F_STR("ERROR_1"));
    505a:	61 ea       	ldi	r22, 0xA1	; 161
    505c:	7f e0       	ldi	r23, 0x0F	; 15
    505e:	88 ea       	ldi	r24, 0xA8	; 168
    5060:	93 e0       	ldi	r25, 0x03	; 3
    5062:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
				}
				replyOK();
    5066:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    506a:	27 c0       	rjmp	.+78     	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if (strcmp_P(btCmdReplyBuffer,cmd36)==0)
    506c:	60 e5       	ldi	r22, 0x50	; 80
    506e:	74 e1       	ldi	r23, 0x14	; 20
    5070:	8f e7       	ldi	r24, 0x7F	; 127
    5072:	94 e0       	ldi	r25, 0x04	; 4
    5074:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    5078:	89 2b       	or	r24, r25
    507a:	29 f4       	brne	.+10     	; 0x5086 <_Z13readSerialCmdv+0x1010>
			{
				replyOK();
    507c:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
				resetSysUsingWDT(); //reset device using WDT.
    5080:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <_Z16resetSysUsingWDTv>
    5084:	1a c0       	rjmp	.+52     	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else if(btCmdReplyBuffer[0]==stop)
    5086:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <btCmdReplyBuffer>
    508a:	83 30       	cpi	r24, 0x03	; 3
    508c:	19 f4       	brne	.+6      	; 0x5094 <_Z13readSerialCmdv+0x101e>
			{
				stop_streaming();
    508e:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_Z14stop_streamingv>
    5092:	13 c0       	rjmp	.+38     	; 0x50ba <_Z13readSerialCmdv+0x1044>
				//you have to also press enter after control-c other wise command will not be registered.
				//or you have to move this to the top most even before CR detection.
				//no reply because it is a control-c.
			}
			
			else if(strcmp_P(btCmdReplyBuffer,cmd14)==0)	//experimental feature
    5094:	6a ee       	ldi	r22, 0xEA	; 234
    5096:	74 e1       	ldi	r23, 0x14	; 20
    5098:	8f e7       	ldi	r24, 0x7F	; 127
    509a:	94 e0       	ldi	r25, 0x04	; 4
    509c:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <strcmp_P>
    50a0:	89 2b       	or	r24, r25
    50a2:	29 f4       	brne	.+10     	; 0x50ae <_Z13readSerialCmdv+0x1038>
			{
				usage();
    50a4:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_Z5usagev>
				replyOK();
    50a8:	0e 94 2e 1a 	call	0x345c	; 0x345c <_Z7replyOKv>
    50ac:	06 c0       	rjmp	.+12     	; 0x50ba <_Z13readSerialCmdv+0x1044>
			}
			
			else
			{
				Serial.println(F_STR("ERROR(!)"));	
    50ae:	68 e9       	ldi	r22, 0x98	; 152
    50b0:	7f e0       	ldi	r23, 0x0F	; 15
    50b2:	88 ea       	ldi	r24, 0xA8	; 168
    50b4:	93 e0       	ldi	r25, 0x03	; 3
    50b6:	0e 94 98 2b 	call	0x5730	; 0x5730 <_ZN5Print7printlnEPK19__FlashStringHelper>
			}
									
		}
		
}
    50ba:	2a 96       	adiw	r28, 0x0a	; 10
    50bc:	0f b6       	in	r0, 0x3f	; 63
    50be:	f8 94       	cli
    50c0:	de bf       	out	0x3e, r29	; 62
    50c2:	0f be       	out	0x3f, r0	; 63
    50c4:	cd bf       	out	0x3d, r28	; 61
    50c6:	df 91       	pop	r29
    50c8:	cf 91       	pop	r28
    50ca:	1f 91       	pop	r17
    50cc:	0f 91       	pop	r16
    50ce:	ff 90       	pop	r15
    50d0:	ef 90       	pop	r14
    50d2:	df 90       	pop	r13
    50d4:	cf 90       	pop	r12
    50d6:	08 95       	ret

000050d8 <main>:
uint8_t isPwmPin(uint8_t pin);
uint8_t setPwmFrequency(int pin, int divisor);

int main(void)
{
	watchDog_off();	//this has to be called before global interrupt flag is set.
    50d8:	0e 94 46 1a 	call	0x348c	; 0x348c <_Z12watchDog_offv>
	
	initPlatform();		//Initialize all platform devices like UART and Display.
    50dc:	0e 94 ce 19 	call	0x339c	; 0x339c <_Z12initPlatformv>
	
	delay(2000);
    50e0:	60 ed       	ldi	r22, 0xD0	; 208
    50e2:	77 e0       	ldi	r23, 0x07	; 7
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	90 e0       	ldi	r25, 0x00	; 0
    50e8:	0e 94 23 29 	call	0x5246	; 0x5246 <delay>
	
	showPinOut();		//show pinout
    50ec:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_Z10showPinOutv>
	while(1)
	{
		
		readSerialCmd();	// this will read the data from incoming serial buffer and take action.
		loop();
		if (serialEventRun) serialEventRun();	//Polls the Serial port for new data and updates Buffer accordingly
    50f0:	c6 ef       	ldi	r28, 0xF6	; 246
    50f2:	d4 e1       	ldi	r29, 0x14	; 20
	showPinOut();		//show pinout
	
	while(1)
	{
		
		readSerialCmd();	// this will read the data from incoming serial buffer and take action.
    50f4:	0e 94 3b 20 	call	0x4076	; 0x4076 <_Z13readSerialCmdv>
		loop();
    50f8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <loop>
		if (serialEventRun) serialEventRun();	//Polls the Serial port for new data and updates Buffer accordingly
    50fc:	20 97       	sbiw	r28, 0x00	; 0
    50fe:	d1 f3       	breq	.-12     	; 0x50f4 <main+0x1c>
    5100:	0e 94 f6 14 	call	0x29ec	; 0x29ec <_Z14serialEventRunv>
    5104:	f7 cf       	rjmp	.-18     	; 0x50f4 <main+0x1c>

00005106 <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

  pinMode(SCK, OUTPUT);
    5106:	61 e0       	ldi	r22, 0x01	; 1
    5108:	8d e0       	ldi	r24, 0x0D	; 13
    510a:	0e 94 3c 2a 	call	0x5478	; 0x5478 <pinMode>
  pinMode(MOSI, OUTPUT);
    510e:	61 e0       	ldi	r22, 0x01	; 1
    5110:	8b e0       	ldi	r24, 0x0B	; 11
    5112:	0e 94 3c 2a 	call	0x5478	; 0x5478 <pinMode>
  pinMode(SS, OUTPUT);
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	8a e0       	ldi	r24, 0x0A	; 10
    511a:	0e 94 3c 2a 	call	0x5478	; 0x5478 <pinMode>
  
  digitalWrite(SCK, LOW);
    511e:	60 e0       	ldi	r22, 0x00	; 0
    5120:	8d e0       	ldi	r24, 0x0D	; 13
    5122:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <digitalWrite>
  digitalWrite(MOSI, LOW);
    5126:	60 e0       	ldi	r22, 0x00	; 0
    5128:	8b e0       	ldi	r24, 0x0B	; 11
    512a:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <digitalWrite>
  digitalWrite(SS, HIGH);
    512e:	61 e0       	ldi	r22, 0x01	; 1
    5130:	8a e0       	ldi	r24, 0x0A	; 10
    5132:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <digitalWrite>

  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
    5136:	8c b5       	in	r24, 0x2c	; 44
    5138:	80 61       	ori	r24, 0x10	; 16
    513a:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
    513c:	8c b5       	in	r24, 0x2c	; 44
    513e:	80 64       	ori	r24, 0x40	; 64
    5140:	8c bd       	out	0x2c, r24	; 44
    5142:	08 95       	ret

00005144 <_ZN8SPIClass3endEv>:
}

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
    5144:	8c b5       	in	r24, 0x2c	; 44
    5146:	8f 7b       	andi	r24, 0xBF	; 191
    5148:	8c bd       	out	0x2c, r24	; 44
    514a:	08 95       	ret

0000514c <_ZN8SPIClass11setBitOrderEh>:
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  if(bitOrder == LSBFIRST) {
    514c:	81 11       	cpse	r24, r1
    514e:	04 c0       	rjmp	.+8      	; 0x5158 <_ZN8SPIClass11setBitOrderEh+0xc>
    SPCR |= _BV(DORD);
    5150:	8c b5       	in	r24, 0x2c	; 44
    5152:	80 62       	ori	r24, 0x20	; 32
    5154:	8c bd       	out	0x2c, r24	; 44
    5156:	08 95       	ret
  } else {
    SPCR &= ~(_BV(DORD));
    5158:	8c b5       	in	r24, 0x2c	; 44
    515a:	8f 7d       	andi	r24, 0xDF	; 223
    515c:	8c bd       	out	0x2c, r24	; 44
    515e:	08 95       	ret

00005160 <_ZN8SPIClass11setDataModeEh>:
  }
}

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    5160:	9c b5       	in	r25, 0x2c	; 44
    5162:	93 7f       	andi	r25, 0xF3	; 243
    5164:	89 2b       	or	r24, r25
    5166:	8c bd       	out	0x2c, r24	; 44
    5168:	08 95       	ret

0000516a <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    516a:	9c b5       	in	r25, 0x2c	; 44
    516c:	9c 7f       	andi	r25, 0xFC	; 252
    516e:	28 2f       	mov	r18, r24
    5170:	23 70       	andi	r18, 0x03	; 3
    5172:	92 2b       	or	r25, r18
    5174:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    5176:	2d b5       	in	r18, 0x2d	; 45
    5178:	82 fb       	bst	r24, 2
    517a:	99 27       	eor	r25, r25
    517c:	90 f9       	bld	r25, 0
    517e:	82 2f       	mov	r24, r18
    5180:	8e 7f       	andi	r24, 0xFE	; 254
    5182:	89 2b       	or	r24, r25
    5184:	8d bd       	out	0x2d, r24	; 45
    5186:	08 95       	ret

00005188 <_ZN8SPIClass12isSPIenabledEv>:
}

uint8_t SPIClass::isSPIenabled()
{
	if (SPCR & (1<<SPE) && SPCR & (1<<MSTR))
    5188:	0c b4       	in	r0, 0x2c	; 44
    518a:	06 fe       	sbrs	r0, 6
    518c:	04 c0       	rjmp	.+8      	; 0x5196 <_ZN8SPIClass12isSPIenabledEv+0xe>
    518e:	8c b5       	in	r24, 0x2c	; 44
    5190:	82 95       	swap	r24
    5192:	81 70       	andi	r24, 0x01	; 1
    5194:	08 95       	ret
    5196:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return 0;
	}
	
}
    5198:	08 95       	ret

0000519a <__vector_16>:
    519a:	1f 92       	push	r1
    519c:	0f 92       	push	r0
    519e:	0f b6       	in	r0, 0x3f	; 63
    51a0:	0f 92       	push	r0
    51a2:	11 24       	eor	r1, r1
    51a4:	2f 93       	push	r18
    51a6:	3f 93       	push	r19
    51a8:	8f 93       	push	r24
    51aa:	9f 93       	push	r25
    51ac:	af 93       	push	r26
    51ae:	bf 93       	push	r27
    51b0:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <timer0_millis>
    51b4:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <timer0_millis+0x1>
    51b8:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <timer0_millis+0x2>
    51bc:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <timer0_millis+0x3>
    51c0:	30 91 f2 04 	lds	r19, 0x04F2	; 0x8004f2 <timer0_fract>
    51c4:	01 96       	adiw	r24, 0x01	; 1
    51c6:	a1 1d       	adc	r26, r1
    51c8:	b1 1d       	adc	r27, r1
    51ca:	23 2f       	mov	r18, r19
    51cc:	2d 5f       	subi	r18, 0xFD	; 253
    51ce:	2d 37       	cpi	r18, 0x7D	; 125
    51d0:	20 f0       	brcs	.+8      	; 0x51da <__vector_16+0x40>
    51d2:	2d 57       	subi	r18, 0x7D	; 125
    51d4:	01 96       	adiw	r24, 0x01	; 1
    51d6:	a1 1d       	adc	r26, r1
    51d8:	b1 1d       	adc	r27, r1
    51da:	20 93 f2 04 	sts	0x04F2, r18	; 0x8004f2 <timer0_fract>
    51de:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <timer0_millis>
    51e2:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <timer0_millis+0x1>
    51e6:	a0 93 f0 04 	sts	0x04F0, r26	; 0x8004f0 <timer0_millis+0x2>
    51ea:	b0 93 f1 04 	sts	0x04F1, r27	; 0x8004f1 <timer0_millis+0x3>
    51ee:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <timer0_overflow_count>
    51f2:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <timer0_overflow_count+0x1>
    51f6:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <timer0_overflow_count+0x2>
    51fa:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <timer0_overflow_count+0x3>
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	a1 1d       	adc	r26, r1
    5202:	b1 1d       	adc	r27, r1
    5204:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <timer0_overflow_count>
    5208:	90 93 eb 04 	sts	0x04EB, r25	; 0x8004eb <timer0_overflow_count+0x1>
    520c:	a0 93 ec 04 	sts	0x04EC, r26	; 0x8004ec <timer0_overflow_count+0x2>
    5210:	b0 93 ed 04 	sts	0x04ED, r27	; 0x8004ed <timer0_overflow_count+0x3>
    5214:	bf 91       	pop	r27
    5216:	af 91       	pop	r26
    5218:	9f 91       	pop	r25
    521a:	8f 91       	pop	r24
    521c:	3f 91       	pop	r19
    521e:	2f 91       	pop	r18
    5220:	0f 90       	pop	r0
    5222:	0f be       	out	0x3f, r0	; 63
    5224:	0f 90       	pop	r0
    5226:	1f 90       	pop	r1
    5228:	18 95       	reti

0000522a <millis>:
    522a:	8f b7       	in	r24, 0x3f	; 63
    522c:	f8 94       	cli
    522e:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <timer0_millis>
    5232:	30 91 ef 04 	lds	r19, 0x04EF	; 0x8004ef <timer0_millis+0x1>
    5236:	40 91 f0 04 	lds	r20, 0x04F0	; 0x8004f0 <timer0_millis+0x2>
    523a:	50 91 f1 04 	lds	r21, 0x04F1	; 0x8004f1 <timer0_millis+0x3>
    523e:	8f bf       	out	0x3f, r24	; 63
    5240:	b9 01       	movw	r22, r18
    5242:	ca 01       	movw	r24, r20
    5244:	08 95       	ret

00005246 <delay>:
    5246:	9b 01       	movw	r18, r22
    5248:	ac 01       	movw	r20, r24
    524a:	7f b7       	in	r23, 0x3f	; 63
    524c:	f8 94       	cli
    524e:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <timer0_overflow_count>
    5252:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <timer0_overflow_count+0x1>
    5256:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <timer0_overflow_count+0x2>
    525a:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <timer0_overflow_count+0x3>
    525e:	66 b5       	in	r22, 0x26	; 38
    5260:	a8 9b       	sbis	0x15, 0	; 21
    5262:	05 c0       	rjmp	.+10     	; 0x526e <delay+0x28>
    5264:	6f 3f       	cpi	r22, 0xFF	; 255
    5266:	19 f0       	breq	.+6      	; 0x526e <delay+0x28>
    5268:	01 96       	adiw	r24, 0x01	; 1
    526a:	a1 1d       	adc	r26, r1
    526c:	b1 1d       	adc	r27, r1
    526e:	7f bf       	out	0x3f, r23	; 63
    5270:	ba 2f       	mov	r27, r26
    5272:	a9 2f       	mov	r26, r25
    5274:	98 2f       	mov	r25, r24
    5276:	88 27       	eor	r24, r24
    5278:	86 0f       	add	r24, r22
    527a:	91 1d       	adc	r25, r1
    527c:	a1 1d       	adc	r26, r1
    527e:	b1 1d       	adc	r27, r1
    5280:	62 e0       	ldi	r22, 0x02	; 2
    5282:	88 0f       	add	r24, r24
    5284:	99 1f       	adc	r25, r25
    5286:	aa 1f       	adc	r26, r26
    5288:	bb 1f       	adc	r27, r27
    528a:	6a 95       	dec	r22
    528c:	d1 f7       	brne	.-12     	; 0x5282 <delay+0x3c>
    528e:	bc 01       	movw	r22, r24
    5290:	2d c0       	rjmp	.+90     	; 0x52ec <delay+0xa6>
    5292:	ff b7       	in	r31, 0x3f	; 63
    5294:	f8 94       	cli
    5296:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <timer0_overflow_count>
    529a:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <timer0_overflow_count+0x1>
    529e:	a0 91 ec 04 	lds	r26, 0x04EC	; 0x8004ec <timer0_overflow_count+0x2>
    52a2:	b0 91 ed 04 	lds	r27, 0x04ED	; 0x8004ed <timer0_overflow_count+0x3>
    52a6:	e6 b5       	in	r30, 0x26	; 38
    52a8:	a8 9b       	sbis	0x15, 0	; 21
    52aa:	05 c0       	rjmp	.+10     	; 0x52b6 <delay+0x70>
    52ac:	ef 3f       	cpi	r30, 0xFF	; 255
    52ae:	19 f0       	breq	.+6      	; 0x52b6 <delay+0x70>
    52b0:	01 96       	adiw	r24, 0x01	; 1
    52b2:	a1 1d       	adc	r26, r1
    52b4:	b1 1d       	adc	r27, r1
    52b6:	ff bf       	out	0x3f, r31	; 63
    52b8:	ba 2f       	mov	r27, r26
    52ba:	a9 2f       	mov	r26, r25
    52bc:	98 2f       	mov	r25, r24
    52be:	88 27       	eor	r24, r24
    52c0:	8e 0f       	add	r24, r30
    52c2:	91 1d       	adc	r25, r1
    52c4:	a1 1d       	adc	r26, r1
    52c6:	b1 1d       	adc	r27, r1
    52c8:	e2 e0       	ldi	r30, 0x02	; 2
    52ca:	88 0f       	add	r24, r24
    52cc:	99 1f       	adc	r25, r25
    52ce:	aa 1f       	adc	r26, r26
    52d0:	bb 1f       	adc	r27, r27
    52d2:	ea 95       	dec	r30
    52d4:	d1 f7       	brne	.-12     	; 0x52ca <delay+0x84>
    52d6:	86 1b       	sub	r24, r22
    52d8:	97 0b       	sbc	r25, r23
    52da:	88 5e       	subi	r24, 0xE8	; 232
    52dc:	93 40       	sbci	r25, 0x03	; 3
    52de:	c8 f2       	brcs	.-78     	; 0x5292 <delay+0x4c>
    52e0:	21 50       	subi	r18, 0x01	; 1
    52e2:	30 40       	sbci	r19, 0x00	; 0
    52e4:	40 40       	sbci	r20, 0x00	; 0
    52e6:	50 40       	sbci	r21, 0x00	; 0
    52e8:	68 51       	subi	r22, 0x18	; 24
    52ea:	7c 4f       	sbci	r23, 0xFC	; 252
    52ec:	21 15       	cp	r18, r1
    52ee:	31 05       	cpc	r19, r1
    52f0:	41 05       	cpc	r20, r1
    52f2:	51 05       	cpc	r21, r1
    52f4:	71 f6       	brne	.-100    	; 0x5292 <delay+0x4c>
    52f6:	08 95       	ret

000052f8 <init>:
    52f8:	78 94       	sei
    52fa:	84 b5       	in	r24, 0x24	; 36
    52fc:	82 60       	ori	r24, 0x02	; 2
    52fe:	84 bd       	out	0x24, r24	; 36
    5300:	84 b5       	in	r24, 0x24	; 36
    5302:	81 60       	ori	r24, 0x01	; 1
    5304:	84 bd       	out	0x24, r24	; 36
    5306:	85 b5       	in	r24, 0x25	; 37
    5308:	82 60       	ori	r24, 0x02	; 2
    530a:	85 bd       	out	0x25, r24	; 37
    530c:	85 b5       	in	r24, 0x25	; 37
    530e:	81 60       	ori	r24, 0x01	; 1
    5310:	85 bd       	out	0x25, r24	; 37
    5312:	ee e6       	ldi	r30, 0x6E	; 110
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	80 81       	ld	r24, Z
    5318:	81 60       	ori	r24, 0x01	; 1
    531a:	80 83       	st	Z, r24
    531c:	e1 e8       	ldi	r30, 0x81	; 129
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	10 82       	st	Z, r1
    5322:	80 81       	ld	r24, Z
    5324:	82 60       	ori	r24, 0x02	; 2
    5326:	80 83       	st	Z, r24
    5328:	80 81       	ld	r24, Z
    532a:	81 60       	ori	r24, 0x01	; 1
    532c:	80 83       	st	Z, r24
    532e:	e0 e8       	ldi	r30, 0x80	; 128
    5330:	f0 e0       	ldi	r31, 0x00	; 0
    5332:	80 81       	ld	r24, Z
    5334:	81 60       	ori	r24, 0x01	; 1
    5336:	80 83       	st	Z, r24
    5338:	e1 eb       	ldi	r30, 0xB1	; 177
    533a:	f0 e0       	ldi	r31, 0x00	; 0
    533c:	80 81       	ld	r24, Z
    533e:	84 60       	ori	r24, 0x04	; 4
    5340:	80 83       	st	Z, r24
    5342:	e0 eb       	ldi	r30, 0xB0	; 176
    5344:	f0 e0       	ldi	r31, 0x00	; 0
    5346:	80 81       	ld	r24, Z
    5348:	81 60       	ori	r24, 0x01	; 1
    534a:	80 83       	st	Z, r24
    534c:	ea e7       	ldi	r30, 0x7A	; 122
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	80 81       	ld	r24, Z
    5352:	84 60       	ori	r24, 0x04	; 4
    5354:	80 83       	st	Z, r24
    5356:	80 81       	ld	r24, Z
    5358:	82 60       	ori	r24, 0x02	; 2
    535a:	80 83       	st	Z, r24
    535c:	80 81       	ld	r24, Z
    535e:	81 60       	ori	r24, 0x01	; 1
    5360:	80 83       	st	Z, r24
    5362:	80 81       	ld	r24, Z
    5364:	80 68       	ori	r24, 0x80	; 128
    5366:	80 83       	st	Z, r24
    5368:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    536c:	08 95       	ret

0000536e <analogReference>:
    536e:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <analog_reference>
    5372:	08 95       	ret

00005374 <analogRead>:
    5374:	98 2f       	mov	r25, r24
    5376:	8e 30       	cpi	r24, 0x0E	; 14
    5378:	08 f0       	brcs	.+2      	; 0x537c <analogRead+0x8>
    537a:	9e 50       	subi	r25, 0x0E	; 14
    537c:	97 70       	andi	r25, 0x07	; 7
    537e:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <analog_reference>
    5382:	82 95       	swap	r24
    5384:	88 0f       	add	r24, r24
    5386:	88 0f       	add	r24, r24
    5388:	80 7c       	andi	r24, 0xC0	; 192
    538a:	89 2b       	or	r24, r25
    538c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    5390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5394:	80 64       	ori	r24, 0x40	; 64
    5396:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    539a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    539e:	86 fd       	sbrc	r24, 6
    53a0:	fc cf       	rjmp	.-8      	; 0x539a <analogRead+0x26>
    53a2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    53a6:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    53aa:	94 2f       	mov	r25, r20
    53ac:	80 e0       	ldi	r24, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	28 2b       	or	r18, r24
    53b2:	39 2b       	or	r19, r25
    53b4:	c9 01       	movw	r24, r18
    53b6:	08 95       	ret

000053b8 <analogWrite>:
    53b8:	1f 93       	push	r17
    53ba:	cf 93       	push	r28
    53bc:	df 93       	push	r29
    53be:	18 2f       	mov	r17, r24
    53c0:	eb 01       	movw	r28, r22
    53c2:	61 e0       	ldi	r22, 0x01	; 1
    53c4:	0e 94 3c 2a 	call	0x5478	; 0x5478 <pinMode>
    53c8:	20 97       	sbiw	r28, 0x00	; 0
    53ca:	09 f4       	brne	.+2      	; 0x53ce <analogWrite+0x16>
    53cc:	4a c0       	rjmp	.+148    	; 0x5462 <analogWrite+0xaa>
    53ce:	cf 3f       	cpi	r28, 0xFF	; 255
    53d0:	d1 05       	cpc	r29, r1
    53d2:	09 f4       	brne	.+2      	; 0x53d6 <analogWrite+0x1e>
    53d4:	49 c0       	rjmp	.+146    	; 0x5468 <analogWrite+0xb0>
    53d6:	e1 2f       	mov	r30, r17
    53d8:	f0 e0       	ldi	r31, 0x00	; 0
    53da:	ea 59       	subi	r30, 0x9A	; 154
    53dc:	fa 4e       	sbci	r31, 0xEA	; 234
    53de:	84 91       	lpm	r24, Z
    53e0:	83 30       	cpi	r24, 0x03	; 3
    53e2:	c1 f0       	breq	.+48     	; 0x5414 <analogWrite+0x5c>
    53e4:	84 30       	cpi	r24, 0x04	; 4
    53e6:	28 f4       	brcc	.+10     	; 0x53f2 <analogWrite+0x3a>
    53e8:	81 30       	cpi	r24, 0x01	; 1
    53ea:	51 f0       	breq	.+20     	; 0x5400 <analogWrite+0x48>
    53ec:	82 30       	cpi	r24, 0x02	; 2
    53ee:	b1 f5       	brne	.+108    	; 0x545c <analogWrite+0xa4>
    53f0:	0c c0       	rjmp	.+24     	; 0x540a <analogWrite+0x52>
    53f2:	86 30       	cpi	r24, 0x06	; 6
    53f4:	19 f1       	breq	.+70     	; 0x543c <analogWrite+0x84>
    53f6:	87 30       	cpi	r24, 0x07	; 7
    53f8:	49 f1       	breq	.+82     	; 0x544c <analogWrite+0x94>
    53fa:	84 30       	cpi	r24, 0x04	; 4
    53fc:	79 f5       	brne	.+94     	; 0x545c <analogWrite+0xa4>
    53fe:	14 c0       	rjmp	.+40     	; 0x5428 <analogWrite+0x70>
    5400:	84 b5       	in	r24, 0x24	; 36
    5402:	80 68       	ori	r24, 0x80	; 128
    5404:	84 bd       	out	0x24, r24	; 36
    5406:	c7 bd       	out	0x27, r28	; 39
    5408:	33 c0       	rjmp	.+102    	; 0x5470 <analogWrite+0xb8>
    540a:	84 b5       	in	r24, 0x24	; 36
    540c:	80 62       	ori	r24, 0x20	; 32
    540e:	84 bd       	out	0x24, r24	; 36
    5410:	c8 bd       	out	0x28, r28	; 40
    5412:	2e c0       	rjmp	.+92     	; 0x5470 <analogWrite+0xb8>
    5414:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5418:	80 68       	ori	r24, 0x80	; 128
    541a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    541e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    5422:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    5426:	24 c0       	rjmp	.+72     	; 0x5470 <analogWrite+0xb8>
    5428:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    542c:	80 62       	ori	r24, 0x20	; 32
    542e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5432:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    5436:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    543a:	1a c0       	rjmp	.+52     	; 0x5470 <analogWrite+0xb8>
    543c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5440:	80 68       	ori	r24, 0x80	; 128
    5442:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5446:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    544a:	12 c0       	rjmp	.+36     	; 0x5470 <analogWrite+0xb8>
    544c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5450:	80 62       	ori	r24, 0x20	; 32
    5452:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5456:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
    545a:	0a c0       	rjmp	.+20     	; 0x5470 <analogWrite+0xb8>
    545c:	c0 38       	cpi	r28, 0x80	; 128
    545e:	d1 05       	cpc	r29, r1
    5460:	1c f4       	brge	.+6      	; 0x5468 <analogWrite+0xb0>
    5462:	81 2f       	mov	r24, r17
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	02 c0       	rjmp	.+4      	; 0x546c <analogWrite+0xb4>
    5468:	81 2f       	mov	r24, r17
    546a:	61 e0       	ldi	r22, 0x01	; 1
    546c:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <digitalWrite>
    5470:	df 91       	pop	r29
    5472:	cf 91       	pop	r28
    5474:	1f 91       	pop	r17
    5476:	08 95       	ret

00005478 <pinMode>:
    5478:	cf 93       	push	r28
    547a:	df 93       	push	r29
    547c:	48 2f       	mov	r20, r24
    547e:	50 e0       	ldi	r21, 0x00	; 0
    5480:	ca 01       	movw	r24, r20
    5482:	8e 5a       	subi	r24, 0xAE	; 174
    5484:	9a 4e       	sbci	r25, 0xEA	; 234
    5486:	fc 01       	movw	r30, r24
    5488:	34 91       	lpm	r19, Z
    548a:	42 5c       	subi	r20, 0xC2	; 194
    548c:	5a 4e       	sbci	r21, 0xEA	; 234
    548e:	fa 01       	movw	r30, r20
    5490:	84 91       	lpm	r24, Z
    5492:	88 23       	and	r24, r24
    5494:	69 f1       	breq	.+90     	; 0x54f0 <pinMode+0x78>
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	88 0f       	add	r24, r24
    549a:	99 1f       	adc	r25, r25
    549c:	fc 01       	movw	r30, r24
    549e:	e0 5e       	subi	r30, 0xE0	; 224
    54a0:	fa 4e       	sbci	r31, 0xEA	; 234
    54a2:	a5 91       	lpm	r26, Z+
    54a4:	b4 91       	lpm	r27, Z
    54a6:	fc 01       	movw	r30, r24
    54a8:	e6 5d       	subi	r30, 0xD6	; 214
    54aa:	fa 4e       	sbci	r31, 0xEA	; 234
    54ac:	c5 91       	lpm	r28, Z+
    54ae:	d4 91       	lpm	r29, Z
    54b0:	66 23       	and	r22, r22
    54b2:	51 f4       	brne	.+20     	; 0x54c8 <pinMode+0x50>
    54b4:	2f b7       	in	r18, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	8c 91       	ld	r24, X
    54ba:	93 2f       	mov	r25, r19
    54bc:	90 95       	com	r25
    54be:	89 23       	and	r24, r25
    54c0:	8c 93       	st	X, r24
    54c2:	88 81       	ld	r24, Y
    54c4:	89 23       	and	r24, r25
    54c6:	0b c0       	rjmp	.+22     	; 0x54de <pinMode+0x66>
    54c8:	62 30       	cpi	r22, 0x02	; 2
    54ca:	61 f4       	brne	.+24     	; 0x54e4 <pinMode+0x6c>
    54cc:	2f b7       	in	r18, 0x3f	; 63
    54ce:	f8 94       	cli
    54d0:	8c 91       	ld	r24, X
    54d2:	93 2f       	mov	r25, r19
    54d4:	90 95       	com	r25
    54d6:	89 23       	and	r24, r25
    54d8:	8c 93       	st	X, r24
    54da:	88 81       	ld	r24, Y
    54dc:	83 2b       	or	r24, r19
    54de:	88 83       	st	Y, r24
    54e0:	2f bf       	out	0x3f, r18	; 63
    54e2:	06 c0       	rjmp	.+12     	; 0x54f0 <pinMode+0x78>
    54e4:	9f b7       	in	r25, 0x3f	; 63
    54e6:	f8 94       	cli
    54e8:	8c 91       	ld	r24, X
    54ea:	83 2b       	or	r24, r19
    54ec:	8c 93       	st	X, r24
    54ee:	9f bf       	out	0x3f, r25	; 63
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	08 95       	ret

000054f6 <digitalWrite>:
    54f6:	48 2f       	mov	r20, r24
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	ca 01       	movw	r24, r20
    54fc:	8a 59       	subi	r24, 0x9A	; 154
    54fe:	9a 4e       	sbci	r25, 0xEA	; 234
    5500:	fc 01       	movw	r30, r24
    5502:	24 91       	lpm	r18, Z
    5504:	ca 01       	movw	r24, r20
    5506:	8e 5a       	subi	r24, 0xAE	; 174
    5508:	9a 4e       	sbci	r25, 0xEA	; 234
    550a:	fc 01       	movw	r30, r24
    550c:	94 91       	lpm	r25, Z
    550e:	42 5c       	subi	r20, 0xC2	; 194
    5510:	5a 4e       	sbci	r21, 0xEA	; 234
    5512:	fa 01       	movw	r30, r20
    5514:	34 91       	lpm	r19, Z
    5516:	33 23       	and	r19, r19
    5518:	09 f4       	brne	.+2      	; 0x551c <digitalWrite+0x26>
    551a:	40 c0       	rjmp	.+128    	; 0x559c <digitalWrite+0xa6>
    551c:	22 23       	and	r18, r18
    551e:	51 f1       	breq	.+84     	; 0x5574 <digitalWrite+0x7e>
    5520:	23 30       	cpi	r18, 0x03	; 3
    5522:	71 f0       	breq	.+28     	; 0x5540 <digitalWrite+0x4a>
    5524:	24 30       	cpi	r18, 0x04	; 4
    5526:	28 f4       	brcc	.+10     	; 0x5532 <digitalWrite+0x3c>
    5528:	21 30       	cpi	r18, 0x01	; 1
    552a:	a1 f0       	breq	.+40     	; 0x5554 <digitalWrite+0x5e>
    552c:	22 30       	cpi	r18, 0x02	; 2
    552e:	11 f5       	brne	.+68     	; 0x5574 <digitalWrite+0x7e>
    5530:	14 c0       	rjmp	.+40     	; 0x555a <digitalWrite+0x64>
    5532:	26 30       	cpi	r18, 0x06	; 6
    5534:	b1 f0       	breq	.+44     	; 0x5562 <digitalWrite+0x6c>
    5536:	27 30       	cpi	r18, 0x07	; 7
    5538:	c1 f0       	breq	.+48     	; 0x556a <digitalWrite+0x74>
    553a:	24 30       	cpi	r18, 0x04	; 4
    553c:	d9 f4       	brne	.+54     	; 0x5574 <digitalWrite+0x7e>
    553e:	04 c0       	rjmp	.+8      	; 0x5548 <digitalWrite+0x52>
    5540:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5544:	8f 77       	andi	r24, 0x7F	; 127
    5546:	03 c0       	rjmp	.+6      	; 0x554e <digitalWrite+0x58>
    5548:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    554c:	8f 7d       	andi	r24, 0xDF	; 223
    554e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5552:	10 c0       	rjmp	.+32     	; 0x5574 <digitalWrite+0x7e>
    5554:	84 b5       	in	r24, 0x24	; 36
    5556:	8f 77       	andi	r24, 0x7F	; 127
    5558:	02 c0       	rjmp	.+4      	; 0x555e <digitalWrite+0x68>
    555a:	84 b5       	in	r24, 0x24	; 36
    555c:	8f 7d       	andi	r24, 0xDF	; 223
    555e:	84 bd       	out	0x24, r24	; 36
    5560:	09 c0       	rjmp	.+18     	; 0x5574 <digitalWrite+0x7e>
    5562:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5566:	8f 77       	andi	r24, 0x7F	; 127
    5568:	03 c0       	rjmp	.+6      	; 0x5570 <digitalWrite+0x7a>
    556a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    556e:	8f 7d       	andi	r24, 0xDF	; 223
    5570:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5574:	e3 2f       	mov	r30, r19
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	ee 0f       	add	r30, r30
    557a:	ff 1f       	adc	r31, r31
    557c:	e6 5d       	subi	r30, 0xD6	; 214
    557e:	fa 4e       	sbci	r31, 0xEA	; 234
    5580:	a5 91       	lpm	r26, Z+
    5582:	b4 91       	lpm	r27, Z
    5584:	2f b7       	in	r18, 0x3f	; 63
    5586:	f8 94       	cli
    5588:	66 23       	and	r22, r22
    558a:	21 f4       	brne	.+8      	; 0x5594 <digitalWrite+0x9e>
    558c:	8c 91       	ld	r24, X
    558e:	90 95       	com	r25
    5590:	89 23       	and	r24, r25
    5592:	02 c0       	rjmp	.+4      	; 0x5598 <digitalWrite+0xa2>
    5594:	8c 91       	ld	r24, X
    5596:	89 2b       	or	r24, r25
    5598:	8c 93       	st	X, r24
    559a:	2f bf       	out	0x3f, r18	; 63
    559c:	08 95       	ret

0000559e <digitalRead>:
    559e:	68 2f       	mov	r22, r24
    55a0:	70 e0       	ldi	r23, 0x00	; 0
    55a2:	cb 01       	movw	r24, r22
    55a4:	8a 59       	subi	r24, 0x9A	; 154
    55a6:	9a 4e       	sbci	r25, 0xEA	; 234
    55a8:	fc 01       	movw	r30, r24
    55aa:	24 91       	lpm	r18, Z
    55ac:	cb 01       	movw	r24, r22
    55ae:	8e 5a       	subi	r24, 0xAE	; 174
    55b0:	9a 4e       	sbci	r25, 0xEA	; 234
    55b2:	fc 01       	movw	r30, r24
    55b4:	44 91       	lpm	r20, Z
    55b6:	62 5c       	subi	r22, 0xC2	; 194
    55b8:	7a 4e       	sbci	r23, 0xEA	; 234
    55ba:	fb 01       	movw	r30, r22
    55bc:	94 91       	lpm	r25, Z
    55be:	99 23       	and	r25, r25
    55c0:	19 f4       	brne	.+6      	; 0x55c8 <digitalRead+0x2a>
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	3c c0       	rjmp	.+120    	; 0x5640 <digitalRead+0xa2>
    55c8:	22 23       	and	r18, r18
    55ca:	51 f1       	breq	.+84     	; 0x5620 <digitalRead+0x82>
    55cc:	23 30       	cpi	r18, 0x03	; 3
    55ce:	71 f0       	breq	.+28     	; 0x55ec <digitalRead+0x4e>
    55d0:	24 30       	cpi	r18, 0x04	; 4
    55d2:	28 f4       	brcc	.+10     	; 0x55de <digitalRead+0x40>
    55d4:	21 30       	cpi	r18, 0x01	; 1
    55d6:	a1 f0       	breq	.+40     	; 0x5600 <digitalRead+0x62>
    55d8:	22 30       	cpi	r18, 0x02	; 2
    55da:	11 f5       	brne	.+68     	; 0x5620 <digitalRead+0x82>
    55dc:	14 c0       	rjmp	.+40     	; 0x5606 <digitalRead+0x68>
    55de:	26 30       	cpi	r18, 0x06	; 6
    55e0:	b1 f0       	breq	.+44     	; 0x560e <digitalRead+0x70>
    55e2:	27 30       	cpi	r18, 0x07	; 7
    55e4:	c1 f0       	breq	.+48     	; 0x5616 <digitalRead+0x78>
    55e6:	24 30       	cpi	r18, 0x04	; 4
    55e8:	d9 f4       	brne	.+54     	; 0x5620 <digitalRead+0x82>
    55ea:	04 c0       	rjmp	.+8      	; 0x55f4 <digitalRead+0x56>
    55ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    55f0:	8f 77       	andi	r24, 0x7F	; 127
    55f2:	03 c0       	rjmp	.+6      	; 0x55fa <digitalRead+0x5c>
    55f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    55f8:	8f 7d       	andi	r24, 0xDF	; 223
    55fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    55fe:	10 c0       	rjmp	.+32     	; 0x5620 <digitalRead+0x82>
    5600:	84 b5       	in	r24, 0x24	; 36
    5602:	8f 77       	andi	r24, 0x7F	; 127
    5604:	02 c0       	rjmp	.+4      	; 0x560a <digitalRead+0x6c>
    5606:	84 b5       	in	r24, 0x24	; 36
    5608:	8f 7d       	andi	r24, 0xDF	; 223
    560a:	84 bd       	out	0x24, r24	; 36
    560c:	09 c0       	rjmp	.+18     	; 0x5620 <digitalRead+0x82>
    560e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5612:	8f 77       	andi	r24, 0x7F	; 127
    5614:	03 c0       	rjmp	.+6      	; 0x561c <digitalRead+0x7e>
    5616:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    561a:	8f 7d       	andi	r24, 0xDF	; 223
    561c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5620:	89 2f       	mov	r24, r25
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	88 0f       	add	r24, r24
    5626:	99 1f       	adc	r25, r25
    5628:	8c 5c       	subi	r24, 0xCC	; 204
    562a:	9a 4e       	sbci	r25, 0xEA	; 234
    562c:	fc 01       	movw	r30, r24
    562e:	a5 91       	lpm	r26, Z+
    5630:	b4 91       	lpm	r27, Z
    5632:	8c 91       	ld	r24, X
    5634:	20 e0       	ldi	r18, 0x00	; 0
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	84 23       	and	r24, r20
    563a:	11 f0       	breq	.+4      	; 0x5640 <digitalRead+0xa2>
    563c:	21 e0       	ldi	r18, 0x01	; 1
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	c9 01       	movw	r24, r18
    5642:	08 95       	ret

00005644 <__cxa_pure_virtual>:
    5644:	08 95       	ret

00005646 <_ZN5Print5writeEPKhj>:
    5646:	cf 92       	push	r12
    5648:	df 92       	push	r13
    564a:	ef 92       	push	r14
    564c:	ff 92       	push	r15
    564e:	0f 93       	push	r16
    5650:	1f 93       	push	r17
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	7c 01       	movw	r14, r24
    5658:	6b 01       	movw	r12, r22
    565a:	8a 01       	movw	r16, r20
    565c:	c0 e0       	ldi	r28, 0x00	; 0
    565e:	d0 e0       	ldi	r29, 0x00	; 0
    5660:	0f c0       	rjmp	.+30     	; 0x5680 <_ZN5Print5writeEPKhj+0x3a>
    5662:	d6 01       	movw	r26, r12
    5664:	6d 91       	ld	r22, X+
    5666:	6d 01       	movw	r12, r26
    5668:	d7 01       	movw	r26, r14
    566a:	ed 91       	ld	r30, X+
    566c:	fc 91       	ld	r31, X
    566e:	01 90       	ld	r0, Z+
    5670:	f0 81       	ld	r31, Z
    5672:	e0 2d       	mov	r30, r0
    5674:	c7 01       	movw	r24, r14
    5676:	09 95       	icall
    5678:	c8 0f       	add	r28, r24
    567a:	d9 1f       	adc	r29, r25
    567c:	01 50       	subi	r16, 0x01	; 1
    567e:	10 40       	sbci	r17, 0x00	; 0
    5680:	01 15       	cp	r16, r1
    5682:	11 05       	cpc	r17, r1
    5684:	71 f7       	brne	.-36     	; 0x5662 <_ZN5Print5writeEPKhj+0x1c>
    5686:	ce 01       	movw	r24, r28
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	1f 91       	pop	r17
    568e:	0f 91       	pop	r16
    5690:	ff 90       	pop	r15
    5692:	ef 90       	pop	r14
    5694:	df 90       	pop	r13
    5696:	cf 90       	pop	r12
    5698:	08 95       	ret

0000569a <_ZN5Print5printEPK19__FlashStringHelper>:
    569a:	ef 92       	push	r14
    569c:	ff 92       	push	r15
    569e:	0f 93       	push	r16
    56a0:	1f 93       	push	r17
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	7c 01       	movw	r14, r24
    56a8:	8b 01       	movw	r16, r22
    56aa:	c0 e0       	ldi	r28, 0x00	; 0
    56ac:	d0 e0       	ldi	r29, 0x00	; 0
    56ae:	f8 01       	movw	r30, r16
    56b0:	0f 5f       	subi	r16, 0xFF	; 255
    56b2:	1f 4f       	sbci	r17, 0xFF	; 255
    56b4:	64 91       	lpm	r22, Z
    56b6:	66 23       	and	r22, r22
    56b8:	59 f0       	breq	.+22     	; 0x56d0 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    56ba:	d7 01       	movw	r26, r14
    56bc:	ed 91       	ld	r30, X+
    56be:	fc 91       	ld	r31, X
    56c0:	01 90       	ld	r0, Z+
    56c2:	f0 81       	ld	r31, Z
    56c4:	e0 2d       	mov	r30, r0
    56c6:	c7 01       	movw	r24, r14
    56c8:	09 95       	icall
    56ca:	c8 0f       	add	r28, r24
    56cc:	d9 1f       	adc	r29, r25
    56ce:	ef cf       	rjmp	.-34     	; 0x56ae <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    56d0:	ce 01       	movw	r24, r28
    56d2:	df 91       	pop	r29
    56d4:	cf 91       	pop	r28
    56d6:	1f 91       	pop	r17
    56d8:	0f 91       	pop	r16
    56da:	ff 90       	pop	r15
    56dc:	ef 90       	pop	r14
    56de:	08 95       	ret

000056e0 <_ZN5Print5printEc>:
    56e0:	dc 01       	movw	r26, r24
    56e2:	ed 91       	ld	r30, X+
    56e4:	fc 91       	ld	r31, X
    56e6:	01 90       	ld	r0, Z+
    56e8:	f0 81       	ld	r31, Z
    56ea:	e0 2d       	mov	r30, r0
    56ec:	09 95       	icall
    56ee:	08 95       	ret

000056f0 <_ZN5Print7printlnEv>:
    56f0:	ef 92       	push	r14
    56f2:	ff 92       	push	r15
    56f4:	0f 93       	push	r16
    56f6:	1f 93       	push	r17
    56f8:	8c 01       	movw	r16, r24
    56fa:	dc 01       	movw	r26, r24
    56fc:	ed 91       	ld	r30, X+
    56fe:	fc 91       	ld	r31, X
    5700:	01 90       	ld	r0, Z+
    5702:	f0 81       	ld	r31, Z
    5704:	e0 2d       	mov	r30, r0
    5706:	6d e0       	ldi	r22, 0x0D	; 13
    5708:	09 95       	icall
    570a:	7c 01       	movw	r14, r24
    570c:	d8 01       	movw	r26, r16
    570e:	ed 91       	ld	r30, X+
    5710:	fc 91       	ld	r31, X
    5712:	01 90       	ld	r0, Z+
    5714:	f0 81       	ld	r31, Z
    5716:	e0 2d       	mov	r30, r0
    5718:	c8 01       	movw	r24, r16
    571a:	6a e0       	ldi	r22, 0x0A	; 10
    571c:	09 95       	icall
    571e:	9c 01       	movw	r18, r24
    5720:	2e 0d       	add	r18, r14
    5722:	3f 1d       	adc	r19, r15
    5724:	c9 01       	movw	r24, r18
    5726:	1f 91       	pop	r17
    5728:	0f 91       	pop	r16
    572a:	ff 90       	pop	r15
    572c:	ef 90       	pop	r14
    572e:	08 95       	ret

00005730 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    5730:	ef 92       	push	r14
    5732:	ff 92       	push	r15
    5734:	0f 93       	push	r16
    5736:	1f 93       	push	r17
    5738:	7c 01       	movw	r14, r24
    573a:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN5Print5printEPK19__FlashStringHelper>
    573e:	8c 01       	movw	r16, r24
    5740:	c7 01       	movw	r24, r14
    5742:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    5746:	9c 01       	movw	r18, r24
    5748:	20 0f       	add	r18, r16
    574a:	31 1f       	adc	r19, r17
    574c:	c9 01       	movw	r24, r18
    574e:	1f 91       	pop	r17
    5750:	0f 91       	pop	r16
    5752:	ff 90       	pop	r15
    5754:	ef 90       	pop	r14
    5756:	08 95       	ret

00005758 <_ZN5Print7printlnEc>:
    5758:	ef 92       	push	r14
    575a:	ff 92       	push	r15
    575c:	0f 93       	push	r16
    575e:	1f 93       	push	r17
    5760:	7c 01       	movw	r14, r24
    5762:	dc 01       	movw	r26, r24
    5764:	ed 91       	ld	r30, X+
    5766:	fc 91       	ld	r31, X
    5768:	01 90       	ld	r0, Z+
    576a:	f0 81       	ld	r31, Z
    576c:	e0 2d       	mov	r30, r0
    576e:	09 95       	icall
    5770:	8c 01       	movw	r16, r24
    5772:	c7 01       	movw	r24, r14
    5774:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    5778:	08 0f       	add	r16, r24
    577a:	19 1f       	adc	r17, r25
    577c:	c8 01       	movw	r24, r16
    577e:	1f 91       	pop	r17
    5780:	0f 91       	pop	r16
    5782:	ff 90       	pop	r15
    5784:	ef 90       	pop	r14
    5786:	08 95       	ret

00005788 <_ZN5Print5writeEPKc>:
    5788:	cf 93       	push	r28
    578a:	df 93       	push	r29
    578c:	db 01       	movw	r26, r22
    578e:	0d 90       	ld	r0, X+
    5790:	00 20       	and	r0, r0
    5792:	e9 f7       	brne	.-6      	; 0x578e <_ZN5Print5writeEPKc+0x6>
    5794:	11 97       	sbiw	r26, 0x01	; 1
    5796:	a6 1b       	sub	r26, r22
    5798:	b7 0b       	sbc	r27, r23
    579a:	ec 01       	movw	r28, r24
    579c:	e8 81       	ld	r30, Y
    579e:	f9 81       	ldd	r31, Y+1	; 0x01
    57a0:	02 80       	ldd	r0, Z+2	; 0x02
    57a2:	f3 81       	ldd	r31, Z+3	; 0x03
    57a4:	e0 2d       	mov	r30, r0
    57a6:	ad 01       	movw	r20, r26
    57a8:	09 95       	icall
    57aa:	df 91       	pop	r29
    57ac:	cf 91       	pop	r28
    57ae:	08 95       	ret

000057b0 <_ZN5Print11printNumberEmh>:
    57b0:	4f 92       	push	r4
    57b2:	5f 92       	push	r5
    57b4:	7f 92       	push	r7
    57b6:	8f 92       	push	r8
    57b8:	9f 92       	push	r9
    57ba:	af 92       	push	r10
    57bc:	bf 92       	push	r11
    57be:	cf 92       	push	r12
    57c0:	df 92       	push	r13
    57c2:	ef 92       	push	r14
    57c4:	ff 92       	push	r15
    57c6:	0f 93       	push	r16
    57c8:	1f 93       	push	r17
    57ca:	df 93       	push	r29
    57cc:	cf 93       	push	r28
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	a1 97       	sbiw	r28, 0x21	; 33
    57d4:	0f b6       	in	r0, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	de bf       	out	0x3e, r29	; 62
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	cd bf       	out	0x3d, r28	; 61
    57de:	2c 01       	movw	r4, r24
    57e0:	74 2e       	mov	r7, r20
    57e2:	cb 01       	movw	r24, r22
    57e4:	22 30       	cpi	r18, 0x02	; 2
    57e6:	08 f4       	brcc	.+2      	; 0x57ea <_ZN5Print11printNumberEmh+0x3a>
    57e8:	2a e0       	ldi	r18, 0x0A	; 10
    57ea:	19 a2       	std	Y+33, r1	; 0x21
    57ec:	31 e2       	ldi	r19, 0x21	; 33
    57ee:	c3 2e       	mov	r12, r19
    57f0:	d1 2c       	mov	r13, r1
    57f2:	cc 0e       	add	r12, r28
    57f4:	dd 1e       	adc	r13, r29
    57f6:	82 2e       	mov	r8, r18
    57f8:	99 24       	eor	r9, r9
    57fa:	aa 24       	eor	r10, r10
    57fc:	bb 24       	eor	r11, r11
    57fe:	67 2d       	mov	r22, r7
    5800:	75 2f       	mov	r23, r21
    5802:	a5 01       	movw	r20, r10
    5804:	94 01       	movw	r18, r8
    5806:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__udivmodsi4>
    580a:	79 01       	movw	r14, r18
    580c:	8a 01       	movw	r16, r20
    580e:	c8 01       	movw	r24, r16
    5810:	b7 01       	movw	r22, r14
    5812:	a5 01       	movw	r20, r10
    5814:	94 01       	movw	r18, r8
    5816:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    581a:	47 2d       	mov	r20, r7
    581c:	46 1b       	sub	r20, r22
    581e:	08 94       	sec
    5820:	c1 08       	sbc	r12, r1
    5822:	d1 08       	sbc	r13, r1
    5824:	4a 30       	cpi	r20, 0x0A	; 10
    5826:	14 f4       	brge	.+4      	; 0x582c <_ZN5Print11printNumberEmh+0x7c>
    5828:	40 5d       	subi	r20, 0xD0	; 208
    582a:	01 c0       	rjmp	.+2      	; 0x582e <_ZN5Print11printNumberEmh+0x7e>
    582c:	49 5c       	subi	r20, 0xC9	; 201
    582e:	f6 01       	movw	r30, r12
    5830:	40 83       	st	Z, r20
    5832:	e1 14       	cp	r14, r1
    5834:	f1 04       	cpc	r15, r1
    5836:	01 05       	cpc	r16, r1
    5838:	11 05       	cpc	r17, r1
    583a:	21 f0       	breq	.+8      	; 0x5844 <_ZN5Print11printNumberEmh+0x94>
    583c:	7e 2c       	mov	r7, r14
    583e:	5f 2d       	mov	r21, r15
    5840:	c8 01       	movw	r24, r16
    5842:	dd cf       	rjmp	.-70     	; 0x57fe <_ZN5Print11printNumberEmh+0x4e>
    5844:	c2 01       	movw	r24, r4
    5846:	b6 01       	movw	r22, r12
    5848:	0e 94 c4 2b 	call	0x5788	; 0x5788 <_ZN5Print5writeEPKc>
    584c:	a1 96       	adiw	r28, 0x21	; 33
    584e:	0f b6       	in	r0, 0x3f	; 63
    5850:	f8 94       	cli
    5852:	de bf       	out	0x3e, r29	; 62
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	cd bf       	out	0x3d, r28	; 61
    5858:	cf 91       	pop	r28
    585a:	df 91       	pop	r29
    585c:	1f 91       	pop	r17
    585e:	0f 91       	pop	r16
    5860:	ff 90       	pop	r15
    5862:	ef 90       	pop	r14
    5864:	df 90       	pop	r13
    5866:	cf 90       	pop	r12
    5868:	bf 90       	pop	r11
    586a:	af 90       	pop	r10
    586c:	9f 90       	pop	r9
    586e:	8f 90       	pop	r8
    5870:	7f 90       	pop	r7
    5872:	5f 90       	pop	r5
    5874:	4f 90       	pop	r4
    5876:	08 95       	ret

00005878 <_ZN5Print5printEmi>:
    5878:	dc 01       	movw	r26, r24
    587a:	21 15       	cp	r18, r1
    587c:	31 05       	cpc	r19, r1
    587e:	41 f4       	brne	.+16     	; 0x5890 <_ZN5Print5printEmi+0x18>
    5880:	ed 91       	ld	r30, X+
    5882:	fc 91       	ld	r31, X
    5884:	01 90       	ld	r0, Z+
    5886:	f0 81       	ld	r31, Z
    5888:	e0 2d       	mov	r30, r0
    588a:	64 2f       	mov	r22, r20
    588c:	09 95       	icall
    588e:	08 95       	ret
    5890:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN5Print11printNumberEmh>
    5894:	08 95       	ret

00005896 <_ZN5Print5printEji>:
    5896:	ef 92       	push	r14
    5898:	ff 92       	push	r15
    589a:	0f 93       	push	r16
    589c:	1f 93       	push	r17
    589e:	9a 01       	movw	r18, r20
    58a0:	7b 01       	movw	r14, r22
    58a2:	00 e0       	ldi	r16, 0x00	; 0
    58a4:	10 e0       	ldi	r17, 0x00	; 0
    58a6:	b8 01       	movw	r22, r16
    58a8:	a7 01       	movw	r20, r14
    58aa:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN5Print5printEmi>
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	ef 90       	pop	r14
    58b6:	08 95       	ret

000058b8 <_ZN5Print7printlnEji>:
    58b8:	cf 92       	push	r12
    58ba:	df 92       	push	r13
    58bc:	ef 92       	push	r14
    58be:	ff 92       	push	r15
    58c0:	0f 93       	push	r16
    58c2:	1f 93       	push	r17
    58c4:	6c 01       	movw	r12, r24
    58c6:	7b 01       	movw	r14, r22
    58c8:	9a 01       	movw	r18, r20
    58ca:	00 e0       	ldi	r16, 0x00	; 0
    58cc:	10 e0       	ldi	r17, 0x00	; 0
    58ce:	b8 01       	movw	r22, r16
    58d0:	a7 01       	movw	r20, r14
    58d2:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN5Print5printEmi>
    58d6:	8c 01       	movw	r16, r24
    58d8:	c6 01       	movw	r24, r12
    58da:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    58de:	08 0f       	add	r16, r24
    58e0:	19 1f       	adc	r17, r25
    58e2:	c8 01       	movw	r24, r16
    58e4:	1f 91       	pop	r17
    58e6:	0f 91       	pop	r16
    58e8:	ff 90       	pop	r15
    58ea:	ef 90       	pop	r14
    58ec:	df 90       	pop	r13
    58ee:	cf 90       	pop	r12
    58f0:	08 95       	ret

000058f2 <_ZN5Print5printEhi>:
    58f2:	ef 92       	push	r14
    58f4:	ff 92       	push	r15
    58f6:	0f 93       	push	r16
    58f8:	1f 93       	push	r17
    58fa:	9a 01       	movw	r18, r20
    58fc:	e6 2e       	mov	r14, r22
    58fe:	ff 24       	eor	r15, r15
    5900:	00 e0       	ldi	r16, 0x00	; 0
    5902:	10 e0       	ldi	r17, 0x00	; 0
    5904:	b8 01       	movw	r22, r16
    5906:	a7 01       	movw	r20, r14
    5908:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN5Print5printEmi>
    590c:	1f 91       	pop	r17
    590e:	0f 91       	pop	r16
    5910:	ff 90       	pop	r15
    5912:	ef 90       	pop	r14
    5914:	08 95       	ret

00005916 <_ZN5Print7printlnEhi>:
    5916:	cf 92       	push	r12
    5918:	df 92       	push	r13
    591a:	ef 92       	push	r14
    591c:	ff 92       	push	r15
    591e:	0f 93       	push	r16
    5920:	1f 93       	push	r17
    5922:	6c 01       	movw	r12, r24
    5924:	e6 2e       	mov	r14, r22
    5926:	9a 01       	movw	r18, r20
    5928:	ff 24       	eor	r15, r15
    592a:	00 e0       	ldi	r16, 0x00	; 0
    592c:	10 e0       	ldi	r17, 0x00	; 0
    592e:	b8 01       	movw	r22, r16
    5930:	a7 01       	movw	r20, r14
    5932:	0e 94 3c 2c 	call	0x5878	; 0x5878 <_ZN5Print5printEmi>
    5936:	8c 01       	movw	r16, r24
    5938:	c6 01       	movw	r24, r12
    593a:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    593e:	08 0f       	add	r16, r24
    5940:	19 1f       	adc	r17, r25
    5942:	c8 01       	movw	r24, r16
    5944:	1f 91       	pop	r17
    5946:	0f 91       	pop	r16
    5948:	ff 90       	pop	r15
    594a:	ef 90       	pop	r14
    594c:	df 90       	pop	r13
    594e:	cf 90       	pop	r12
    5950:	08 95       	ret

00005952 <_ZN5Print5printEli>:
    5952:	cf 92       	push	r12
    5954:	df 92       	push	r13
    5956:	ef 92       	push	r14
    5958:	ff 92       	push	r15
    595a:	0f 93       	push	r16
    595c:	1f 93       	push	r17
    595e:	cf 93       	push	r28
    5960:	df 93       	push	r29
    5962:	ec 01       	movw	r28, r24
    5964:	6a 01       	movw	r12, r20
    5966:	7b 01       	movw	r14, r22
    5968:	21 15       	cp	r18, r1
    596a:	31 05       	cpc	r19, r1
    596c:	41 f4       	brne	.+16     	; 0x597e <_ZN5Print5printEli+0x2c>
    596e:	e8 81       	ld	r30, Y
    5970:	f9 81       	ldd	r31, Y+1	; 0x01
    5972:	01 90       	ld	r0, Z+
    5974:	f0 81       	ld	r31, Z
    5976:	e0 2d       	mov	r30, r0
    5978:	64 2f       	mov	r22, r20
    597a:	09 95       	icall
    597c:	1f c0       	rjmp	.+62     	; 0x59bc <_ZN5Print5printEli+0x6a>
    597e:	2a 30       	cpi	r18, 0x0A	; 10
    5980:	31 05       	cpc	r19, r1
    5982:	d1 f4       	brne	.+52     	; 0x59b8 <_ZN5Print5printEli+0x66>
    5984:	77 ff       	sbrs	r23, 7
    5986:	17 c0       	rjmp	.+46     	; 0x59b6 <_ZN5Print5printEli+0x64>
    5988:	e8 81       	ld	r30, Y
    598a:	f9 81       	ldd	r31, Y+1	; 0x01
    598c:	01 90       	ld	r0, Z+
    598e:	f0 81       	ld	r31, Z
    5990:	e0 2d       	mov	r30, r0
    5992:	6d e2       	ldi	r22, 0x2D	; 45
    5994:	09 95       	icall
    5996:	8c 01       	movw	r16, r24
    5998:	44 27       	eor	r20, r20
    599a:	55 27       	eor	r21, r21
    599c:	ba 01       	movw	r22, r20
    599e:	4c 19       	sub	r20, r12
    59a0:	5d 09       	sbc	r21, r13
    59a2:	6e 09       	sbc	r22, r14
    59a4:	7f 09       	sbc	r23, r15
    59a6:	ce 01       	movw	r24, r28
    59a8:	2a e0       	ldi	r18, 0x0A	; 10
    59aa:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN5Print11printNumberEmh>
    59ae:	98 01       	movw	r18, r16
    59b0:	28 0f       	add	r18, r24
    59b2:	39 1f       	adc	r19, r25
    59b4:	04 c0       	rjmp	.+8      	; 0x59be <_ZN5Print5printEli+0x6c>
    59b6:	2a e0       	ldi	r18, 0x0A	; 10
    59b8:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <_ZN5Print11printNumberEmh>
    59bc:	9c 01       	movw	r18, r24
    59be:	c9 01       	movw	r24, r18
    59c0:	df 91       	pop	r29
    59c2:	cf 91       	pop	r28
    59c4:	1f 91       	pop	r17
    59c6:	0f 91       	pop	r16
    59c8:	ff 90       	pop	r15
    59ca:	ef 90       	pop	r14
    59cc:	df 90       	pop	r13
    59ce:	cf 90       	pop	r12
    59d0:	08 95       	ret

000059d2 <_ZN5Print5printEii>:
    59d2:	ef 92       	push	r14
    59d4:	ff 92       	push	r15
    59d6:	0f 93       	push	r16
    59d8:	1f 93       	push	r17
    59da:	7b 01       	movw	r14, r22
    59dc:	9a 01       	movw	r18, r20
    59de:	00 27       	eor	r16, r16
    59e0:	f7 fc       	sbrc	r15, 7
    59e2:	00 95       	com	r16
    59e4:	10 2f       	mov	r17, r16
    59e6:	b8 01       	movw	r22, r16
    59e8:	a7 01       	movw	r20, r14
    59ea:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_ZN5Print5printEli>
    59ee:	1f 91       	pop	r17
    59f0:	0f 91       	pop	r16
    59f2:	ff 90       	pop	r15
    59f4:	ef 90       	pop	r14
    59f6:	08 95       	ret

000059f8 <_ZN5Print7printlnEii>:
    59f8:	cf 92       	push	r12
    59fa:	df 92       	push	r13
    59fc:	ef 92       	push	r14
    59fe:	ff 92       	push	r15
    5a00:	0f 93       	push	r16
    5a02:	1f 93       	push	r17
    5a04:	6c 01       	movw	r12, r24
    5a06:	7b 01       	movw	r14, r22
    5a08:	9a 01       	movw	r18, r20
    5a0a:	00 27       	eor	r16, r16
    5a0c:	f7 fc       	sbrc	r15, 7
    5a0e:	00 95       	com	r16
    5a10:	10 2f       	mov	r17, r16
    5a12:	b8 01       	movw	r22, r16
    5a14:	a7 01       	movw	r20, r14
    5a16:	0e 94 a9 2c 	call	0x5952	; 0x5952 <_ZN5Print5printEli>
    5a1a:	8c 01       	movw	r16, r24
    5a1c:	c6 01       	movw	r24, r12
    5a1e:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    5a22:	08 0f       	add	r16, r24
    5a24:	19 1f       	adc	r17, r25
    5a26:	c8 01       	movw	r24, r16
    5a28:	1f 91       	pop	r17
    5a2a:	0f 91       	pop	r16
    5a2c:	ff 90       	pop	r15
    5a2e:	ef 90       	pop	r14
    5a30:	df 90       	pop	r13
    5a32:	cf 90       	pop	r12
    5a34:	08 95       	ret

00005a36 <_ZN5Print5printEPKc>:
    5a36:	0e 94 c4 2b 	call	0x5788	; 0x5788 <_ZN5Print5writeEPKc>
    5a3a:	08 95       	ret

00005a3c <_ZN5Print7printlnEPKc>:
    5a3c:	ef 92       	push	r14
    5a3e:	ff 92       	push	r15
    5a40:	0f 93       	push	r16
    5a42:	1f 93       	push	r17
    5a44:	7c 01       	movw	r14, r24
    5a46:	0e 94 c4 2b 	call	0x5788	; 0x5788 <_ZN5Print5writeEPKc>
    5a4a:	8c 01       	movw	r16, r24
    5a4c:	c7 01       	movw	r24, r14
    5a4e:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <_ZN5Print7printlnEv>
    5a52:	08 0f       	add	r16, r24
    5a54:	19 1f       	adc	r17, r25
    5a56:	c8 01       	movw	r24, r16
    5a58:	1f 91       	pop	r17
    5a5a:	0f 91       	pop	r16
    5a5c:	ff 90       	pop	r15
    5a5e:	ef 90       	pop	r14
    5a60:	08 95       	ret

00005a62 <__mulsi3>:
    5a62:	db 01       	movw	r26, r22
    5a64:	8f 93       	push	r24
    5a66:	9f 93       	push	r25
    5a68:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__muluhisi3>
    5a6c:	bf 91       	pop	r27
    5a6e:	af 91       	pop	r26
    5a70:	a2 9f       	mul	r26, r18
    5a72:	80 0d       	add	r24, r0
    5a74:	91 1d       	adc	r25, r1
    5a76:	a3 9f       	mul	r26, r19
    5a78:	90 0d       	add	r25, r0
    5a7a:	b2 9f       	mul	r27, r18
    5a7c:	90 0d       	add	r25, r0
    5a7e:	11 24       	eor	r1, r1
    5a80:	08 95       	ret

00005a82 <__udivmodsi4>:
    5a82:	a1 e2       	ldi	r26, 0x21	; 33
    5a84:	1a 2e       	mov	r1, r26
    5a86:	aa 1b       	sub	r26, r26
    5a88:	bb 1b       	sub	r27, r27
    5a8a:	fd 01       	movw	r30, r26
    5a8c:	0d c0       	rjmp	.+26     	; 0x5aa8 <__udivmodsi4_ep>

00005a8e <__udivmodsi4_loop>:
    5a8e:	aa 1f       	adc	r26, r26
    5a90:	bb 1f       	adc	r27, r27
    5a92:	ee 1f       	adc	r30, r30
    5a94:	ff 1f       	adc	r31, r31
    5a96:	a2 17       	cp	r26, r18
    5a98:	b3 07       	cpc	r27, r19
    5a9a:	e4 07       	cpc	r30, r20
    5a9c:	f5 07       	cpc	r31, r21
    5a9e:	20 f0       	brcs	.+8      	; 0x5aa8 <__udivmodsi4_ep>
    5aa0:	a2 1b       	sub	r26, r18
    5aa2:	b3 0b       	sbc	r27, r19
    5aa4:	e4 0b       	sbc	r30, r20
    5aa6:	f5 0b       	sbc	r31, r21

00005aa8 <__udivmodsi4_ep>:
    5aa8:	66 1f       	adc	r22, r22
    5aaa:	77 1f       	adc	r23, r23
    5aac:	88 1f       	adc	r24, r24
    5aae:	99 1f       	adc	r25, r25
    5ab0:	1a 94       	dec	r1
    5ab2:	69 f7       	brne	.-38     	; 0x5a8e <__udivmodsi4_loop>
    5ab4:	60 95       	com	r22
    5ab6:	70 95       	com	r23
    5ab8:	80 95       	com	r24
    5aba:	90 95       	com	r25
    5abc:	9b 01       	movw	r18, r22
    5abe:	ac 01       	movw	r20, r24
    5ac0:	bd 01       	movw	r22, r26
    5ac2:	cf 01       	movw	r24, r30
    5ac4:	08 95       	ret

00005ac6 <__tablejump2__>:
    5ac6:	ee 0f       	add	r30, r30
    5ac8:	ff 1f       	adc	r31, r31
    5aca:	05 90       	lpm	r0, Z+
    5acc:	f4 91       	lpm	r31, Z
    5ace:	e0 2d       	mov	r30, r0
    5ad0:	09 94       	ijmp

00005ad2 <__muluhisi3>:
    5ad2:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <__umulhisi3>
    5ad6:	a5 9f       	mul	r26, r21
    5ad8:	90 0d       	add	r25, r0
    5ada:	b4 9f       	mul	r27, r20
    5adc:	90 0d       	add	r25, r0
    5ade:	a4 9f       	mul	r26, r20
    5ae0:	80 0d       	add	r24, r0
    5ae2:	91 1d       	adc	r25, r1
    5ae4:	11 24       	eor	r1, r1
    5ae6:	08 95       	ret

00005ae8 <__umulhisi3>:
    5ae8:	a2 9f       	mul	r26, r18
    5aea:	b0 01       	movw	r22, r0
    5aec:	b3 9f       	mul	r27, r19
    5aee:	c0 01       	movw	r24, r0
    5af0:	a3 9f       	mul	r26, r19
    5af2:	70 0d       	add	r23, r0
    5af4:	81 1d       	adc	r24, r1
    5af6:	11 24       	eor	r1, r1
    5af8:	91 1d       	adc	r25, r1
    5afa:	b2 9f       	mul	r27, r18
    5afc:	70 0d       	add	r23, r0
    5afe:	81 1d       	adc	r24, r1
    5b00:	11 24       	eor	r1, r1
    5b02:	91 1d       	adc	r25, r1
    5b04:	08 95       	ret

00005b06 <atoi>:
    5b06:	fc 01       	movw	r30, r24
    5b08:	88 27       	eor	r24, r24
    5b0a:	99 27       	eor	r25, r25
    5b0c:	e8 94       	clt
    5b0e:	21 91       	ld	r18, Z+
    5b10:	20 32       	cpi	r18, 0x20	; 32
    5b12:	e9 f3       	breq	.-6      	; 0x5b0e <atoi+0x8>
    5b14:	29 30       	cpi	r18, 0x09	; 9
    5b16:	10 f0       	brcs	.+4      	; 0x5b1c <atoi+0x16>
    5b18:	2e 30       	cpi	r18, 0x0E	; 14
    5b1a:	c8 f3       	brcs	.-14     	; 0x5b0e <atoi+0x8>
    5b1c:	2b 32       	cpi	r18, 0x2B	; 43
    5b1e:	41 f0       	breq	.+16     	; 0x5b30 <atoi+0x2a>
    5b20:	2d 32       	cpi	r18, 0x2D	; 45
    5b22:	39 f4       	brne	.+14     	; 0x5b32 <atoi+0x2c>
    5b24:	68 94       	set
    5b26:	04 c0       	rjmp	.+8      	; 0x5b30 <atoi+0x2a>
    5b28:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <__mulhi_const_10>
    5b2c:	82 0f       	add	r24, r18
    5b2e:	91 1d       	adc	r25, r1
    5b30:	21 91       	ld	r18, Z+
    5b32:	20 53       	subi	r18, 0x30	; 48
    5b34:	2a 30       	cpi	r18, 0x0A	; 10
    5b36:	c0 f3       	brcs	.-16     	; 0x5b28 <atoi+0x22>
    5b38:	1e f4       	brtc	.+6      	; 0x5b40 <atoi+0x3a>
    5b3a:	90 95       	com	r25
    5b3c:	81 95       	neg	r24
    5b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b40:	08 95       	ret

00005b42 <strcmp_P>:
    5b42:	fb 01       	movw	r30, r22
    5b44:	dc 01       	movw	r26, r24
    5b46:	8d 91       	ld	r24, X+
    5b48:	05 90       	lpm	r0, Z+
    5b4a:	80 19       	sub	r24, r0
    5b4c:	01 10       	cpse	r0, r1
    5b4e:	d9 f3       	breq	.-10     	; 0x5b46 <strcmp_P+0x4>
    5b50:	99 0b       	sbc	r25, r25
    5b52:	08 95       	ret

00005b54 <strncmp_P>:
    5b54:	fb 01       	movw	r30, r22
    5b56:	dc 01       	movw	r26, r24
    5b58:	41 50       	subi	r20, 0x01	; 1
    5b5a:	50 40       	sbci	r21, 0x00	; 0
    5b5c:	30 f0       	brcs	.+12     	; 0x5b6a <strncmp_P+0x16>
    5b5e:	8d 91       	ld	r24, X+
    5b60:	05 90       	lpm	r0, Z+
    5b62:	80 19       	sub	r24, r0
    5b64:	19 f4       	brne	.+6      	; 0x5b6c <strncmp_P+0x18>
    5b66:	00 20       	and	r0, r0
    5b68:	b9 f7       	brne	.-18     	; 0x5b58 <strncmp_P+0x4>
    5b6a:	88 1b       	sub	r24, r24
    5b6c:	99 0b       	sbc	r25, r25
    5b6e:	08 95       	ret

00005b70 <strlwr>:
    5b70:	dc 01       	movw	r26, r24
    5b72:	6c 91       	ld	r22, X
    5b74:	61 54       	subi	r22, 0x41	; 65
    5b76:	6a 31       	cpi	r22, 0x1A	; 26
    5b78:	08 f0       	brcs	.+2      	; 0x5b7c <strlwr+0xc>
    5b7a:	60 52       	subi	r22, 0x20	; 32
    5b7c:	6f 59       	subi	r22, 0x9F	; 159
    5b7e:	6d 93       	st	X+, r22
    5b80:	c1 f7       	brne	.-16     	; 0x5b72 <strlwr+0x2>
    5b82:	08 95       	ret

00005b84 <strncmp>:
    5b84:	fb 01       	movw	r30, r22
    5b86:	dc 01       	movw	r26, r24
    5b88:	41 50       	subi	r20, 0x01	; 1
    5b8a:	50 40       	sbci	r21, 0x00	; 0
    5b8c:	30 f0       	brcs	.+12     	; 0x5b9a <strncmp+0x16>
    5b8e:	8d 91       	ld	r24, X+
    5b90:	01 90       	ld	r0, Z+
    5b92:	80 19       	sub	r24, r0
    5b94:	19 f4       	brne	.+6      	; 0x5b9c <strncmp+0x18>
    5b96:	00 20       	and	r0, r0
    5b98:	b9 f7       	brne	.-18     	; 0x5b88 <strncmp+0x4>
    5b9a:	88 1b       	sub	r24, r24
    5b9c:	99 0b       	sbc	r25, r25
    5b9e:	08 95       	ret

00005ba0 <strncpy>:
    5ba0:	fb 01       	movw	r30, r22
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	41 50       	subi	r20, 0x01	; 1
    5ba6:	50 40       	sbci	r21, 0x00	; 0
    5ba8:	48 f0       	brcs	.+18     	; 0x5bbc <strncpy+0x1c>
    5baa:	01 90       	ld	r0, Z+
    5bac:	0d 92       	st	X+, r0
    5bae:	00 20       	and	r0, r0
    5bb0:	c9 f7       	brne	.-14     	; 0x5ba4 <strncpy+0x4>
    5bb2:	01 c0       	rjmp	.+2      	; 0x5bb6 <strncpy+0x16>
    5bb4:	1d 92       	st	X+, r1
    5bb6:	41 50       	subi	r20, 0x01	; 1
    5bb8:	50 40       	sbci	r21, 0x00	; 0
    5bba:	e0 f7       	brcc	.-8      	; 0x5bb4 <strncpy+0x14>
    5bbc:	08 95       	ret

00005bbe <strstr>:
    5bbe:	fb 01       	movw	r30, r22
    5bc0:	51 91       	ld	r21, Z+
    5bc2:	55 23       	and	r21, r21
    5bc4:	a9 f0       	breq	.+42     	; 0x5bf0 <strstr+0x32>
    5bc6:	bf 01       	movw	r22, r30
    5bc8:	dc 01       	movw	r26, r24
    5bca:	4d 91       	ld	r20, X+
    5bcc:	45 17       	cp	r20, r21
    5bce:	41 11       	cpse	r20, r1
    5bd0:	e1 f7       	brne	.-8      	; 0x5bca <strstr+0xc>
    5bd2:	59 f4       	brne	.+22     	; 0x5bea <strstr+0x2c>
    5bd4:	cd 01       	movw	r24, r26
    5bd6:	01 90       	ld	r0, Z+
    5bd8:	00 20       	and	r0, r0
    5bda:	49 f0       	breq	.+18     	; 0x5bee <strstr+0x30>
    5bdc:	4d 91       	ld	r20, X+
    5bde:	40 15       	cp	r20, r0
    5be0:	41 11       	cpse	r20, r1
    5be2:	c9 f3       	breq	.-14     	; 0x5bd6 <strstr+0x18>
    5be4:	fb 01       	movw	r30, r22
    5be6:	41 11       	cpse	r20, r1
    5be8:	ef cf       	rjmp	.-34     	; 0x5bc8 <strstr+0xa>
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	90 e0       	ldi	r25, 0x00	; 0
    5bee:	01 97       	sbiw	r24, 0x01	; 1
    5bf0:	08 95       	ret

00005bf2 <__mulhi_const_10>:
    5bf2:	7a e0       	ldi	r23, 0x0A	; 10
    5bf4:	97 9f       	mul	r25, r23
    5bf6:	90 2d       	mov	r25, r0
    5bf8:	87 9f       	mul	r24, r23
    5bfa:	80 2d       	mov	r24, r0
    5bfc:	91 0d       	add	r25, r1
    5bfe:	11 24       	eor	r1, r1
    5c00:	08 95       	ret

00005c02 <_exit>:
    5c02:	f8 94       	cli

00005c04 <__stop_program>:
    5c04:	ff cf       	rjmp	.-2      	; 0x5c04 <__stop_program>
